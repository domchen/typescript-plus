=== tests/cases/compiler/genericDefaultsErrors.ts ===
declare const x: any;
>x : any

declare function f03<T extends string = number>(): void; // error
>f03 : <T extends string = number>() => void
>T : T

declare function f04<T extends string, U extends number = T>(): void; // error
>f04 : <T extends string, U extends number = T>() => void
>T : T
>U : U
>T : T

declare function f05<T, U extends number = T>(): void; // error
>f05 : <T, U extends number = T>() => void
>T : T
>U : U
>T : T

declare function f06<T, U extends T = number>(): void; // error
>f06 : <T, U extends T = number>() => void
>T : T
>U : U
>T : T

declare function f11<T, U, V = number>(): void;
>f11 : <T, U, V = number>() => void
>T : T
>U : U
>V : V

f11(); // ok
>f11() : void
>f11 : <T, U, V = number>() => void

f11<1>(); // error
>f11<1>() : any
>f11 : <T, U, V = number>() => void

f11<1, 2>(); // ok
>f11<1, 2>() : void
>f11 : <T, U, V = number>() => void

f11<1, 2, 3>(); // ok
>f11<1, 2, 3>() : void
>f11 : <T, U, V = number>() => void

f11<1, 2, 3, 4>(); // error
>f11<1, 2, 3, 4>() : any
>f11 : <T, U, V = number>() => void

declare function f12<T, U = T>(a?: U): void;
>f12 : <T, U = T>(a?: U) => void
>T : T
>U : U
>T : T
>a : U
>U : U

f12<number>(); // ok
>f12<number>() : void
>f12 : <T, U = T>(a?: U) => void

f12<number>("a"); // error
>f12<number>("a") : any
>f12 : <T, U = T>(a?: U) => void
>"a" : "a"

interface i00<T> { } // ok
>i00 : i00<T, U>
>T : T

interface i00<U = number> { } // error
>i00 : i00<T, U>
>U : U

interface i01<T = number> { } // ok
>i01 : i01<T>
>T : T

interface i01<T = string> { } // error
>i01 : i01<T>
>T : T

interface i04<T = number, U> { } // error
>i04 : i04<T, U>
>T : T
>U : U

interface i05<T extends string = number> { } // error
>i05 : i05<T>
>T : T

interface i06<T extends string, U extends number = T> { } // error
>i06 : i06<T, U>
>T : T
>U : U
>T : T

interface i07<T, U extends number = T> { } // error
>i07 : i07<T, U>
>T : T
>U : U
>T : T

interface i08<T, U extends T = number> { } // error
>i08 : i08<T, U>
>T : T
>U : U
>T : T

interface i09<T, U, V = number> { }
>i09 : i09<T, U, V>
>T : T
>U : U
>V : V

type i09t00 = i09; // error
>i09t00 : any
>i09 : i09<T, U, V>

type i09t01 = i09<1>; // error
>i09t01 : any
>i09 : i09<T, U, V>

type i09t02 = i09<1, 2>; // ok
>i09t02 : i09<1, 2, number>
>i09 : i09<T, U, V>

type i09t03 = i09<1, 2, 3>; // ok
>i09t03 : i09<1, 2, 3>
>i09 : i09<T, U, V>

type i09t04 = i09<1, 2, 3, 4>; // error
>i09t04 : any
>i09 : i09<T, U, V>

interface i10 { x: T; } // error
>i10 : i10<T>
>x : any
>T : No type information available!

interface i10<T = number> {}
>i10 : i10<T>
>T : T

// https://github.com/Microsoft/TypeScript/issues/16221
interface SelfReference<T = SelfReference> {}
>SelfReference : SelfReference<T>
>T : T
>SelfReference : SelfReference<T>

