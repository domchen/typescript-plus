=== tests/cases/compiler/unusedTypeParametersWithUnderscore.ts ===
function f<_T, U>() { }
>f : Symbol(f, Decl(unusedTypeParametersWithUnderscore.ts, 0, 0))
>_T : Symbol(_T, Decl(unusedTypeParametersWithUnderscore.ts, 0, 11))
>U : Symbol(U, Decl(unusedTypeParametersWithUnderscore.ts, 0, 14))

type T<_T, U> = { };
>T : Symbol(T, Decl(unusedTypeParametersWithUnderscore.ts, 0, 23))
>_T : Symbol(_T, Decl(unusedTypeParametersWithUnderscore.ts, 2, 7))
>U : Symbol(U, Decl(unusedTypeParametersWithUnderscore.ts, 2, 10))

interface I<_T, U> { };
>I : Symbol(I, Decl(unusedTypeParametersWithUnderscore.ts, 2, 20))
>_T : Symbol(_T, Decl(unusedTypeParametersWithUnderscore.ts, 4, 12))
>U : Symbol(U, Decl(unusedTypeParametersWithUnderscore.ts, 4, 15))

class C<_T, U> {
>C : Symbol(C, Decl(unusedTypeParametersWithUnderscore.ts, 4, 23))
>_T : Symbol(_T, Decl(unusedTypeParametersWithUnderscore.ts, 6, 8))
>U : Symbol(U, Decl(unusedTypeParametersWithUnderscore.ts, 6, 11))

    public m<_V, W>() { }
>m : Symbol(C.m, Decl(unusedTypeParametersWithUnderscore.ts, 6, 16))
>_V : Symbol(_V, Decl(unusedTypeParametersWithUnderscore.ts, 7, 13))
>W : Symbol(W, Decl(unusedTypeParametersWithUnderscore.ts, 7, 16))

};

let l = <_T, U>() => { };
>l : Symbol(l, Decl(unusedTypeParametersWithUnderscore.ts, 10, 3))
>_T : Symbol(_T, Decl(unusedTypeParametersWithUnderscore.ts, 10, 9))
>U : Symbol(U, Decl(unusedTypeParametersWithUnderscore.ts, 10, 12))

