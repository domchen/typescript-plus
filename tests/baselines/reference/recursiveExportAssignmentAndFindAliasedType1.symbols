=== tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType1_moduleA.ts ===
/// <reference path="recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts"/>
import moduleC = require("moduleC");
>moduleC : Symbol(moduleC, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleA.ts, 0, 0))

import ClassB = require("recursiveExportAssignmentAndFindAliasedType1_moduleB");
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleA.ts, 1, 36))

export var b: ClassB; // This should result in type ClassB
>b : Symbol(b, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleA.ts, 3, 10))
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleA.ts, 1, 36))

=== tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts ===
declare module "moduleC" {
>"moduleC" : Symbol("moduleC", Decl(recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts, 0, 0))

    import self = require("moduleC");
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts, 0, 26))

    export = self;
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts, 0, 26))
}

=== tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType1_moduleB.ts ===
class ClassB { }
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleB.ts, 0, 0))

export = ClassB;
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType1_moduleB.ts, 0, 0))

