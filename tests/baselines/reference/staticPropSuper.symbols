=== tests/cases/compiler/staticPropSuper.ts ===
class A {
>A : Symbol(A, Decl(staticPropSuper.ts, 0, 0))
}

class B extends A {
>B : Symbol(B, Decl(staticPropSuper.ts, 1, 1))
>A : Symbol(A, Decl(staticPropSuper.ts, 0, 0))

    public static s: number = 9;
>s : Symbol(B.s, Decl(staticPropSuper.ts, 3, 19))

    constructor() {
        var x = 1; // should not error
>x : Symbol(x, Decl(staticPropSuper.ts, 7, 11))

        super();
>super : Symbol(A, Decl(staticPropSuper.ts, 0, 0))
    }
}

class C extends A {
>C : Symbol(C, Decl(staticPropSuper.ts, 10, 1))
>A : Symbol(A, Decl(staticPropSuper.ts, 0, 0))

    public p: number = 10;
>p : Symbol(C.p, Decl(staticPropSuper.ts, 12, 19))

    constructor() {
        var x = 1; // should error
>x : Symbol(x, Decl(staticPropSuper.ts, 16, 11))
    }
}

class D extends A {
>D : Symbol(D, Decl(staticPropSuper.ts, 18, 1))
>A : Symbol(A, Decl(staticPropSuper.ts, 0, 0))

    private p: number = 11;
>p : Symbol(D.p, Decl(staticPropSuper.ts, 20, 19))

    constructor() {
        var x = 1; // should error
>x : Symbol(x, Decl(staticPropSuper.ts, 24, 11))
    }
}

class E extends A {
>E : Symbol(E, Decl(staticPropSuper.ts, 26, 1))
>A : Symbol(A, Decl(staticPropSuper.ts, 0, 0))

    p: number = 12;
>p : Symbol(E.p, Decl(staticPropSuper.ts, 28, 19))

    constructor() {
        var x = 1; // should error
>x : Symbol(x, Decl(staticPropSuper.ts, 32, 11))
    }
}
