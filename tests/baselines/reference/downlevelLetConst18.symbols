=== tests/cases/compiler/downlevelLetConst18.ts ===
'use strict'

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 2, 8))

    function foo() { x };
>foo : Symbol(foo, Decl(downlevelLetConst18.ts, 2, 16))
>x : Symbol(x, Decl(downlevelLetConst18.ts, 2, 8))
}

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 6, 8))

    function foo1() { x };
>foo1 : Symbol(foo1, Decl(downlevelLetConst18.ts, 6, 16))
>x : Symbol(x, Decl(downlevelLetConst18.ts, 6, 8))
}

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 10, 8))

    (() => { x })();
>x : Symbol(x, Decl(downlevelLetConst18.ts, 10, 8))
}

for (const x = 1; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 14, 10))

    (() => { x })();
>x : Symbol(x, Decl(downlevelLetConst18.ts, 14, 10))
}

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 18, 8))

    ({ foo() { x }})
>foo : Symbol(foo, Decl(downlevelLetConst18.ts, 19, 6))
>x : Symbol(x, Decl(downlevelLetConst18.ts, 18, 8))
}

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 22, 8))

    ({ get foo() { return x } })
>foo : Symbol(foo, Decl(downlevelLetConst18.ts, 23, 6))
>x : Symbol(x, Decl(downlevelLetConst18.ts, 22, 8))
}

for (let x; ;) {
>x : Symbol(x, Decl(downlevelLetConst18.ts, 26, 8))

    ({ set foo(v) { x } })
>foo : Symbol(foo, Decl(downlevelLetConst18.ts, 27, 6))
>v : Symbol(v, Decl(downlevelLetConst18.ts, 27, 15))
>x : Symbol(x, Decl(downlevelLetConst18.ts, 26, 8))
}

