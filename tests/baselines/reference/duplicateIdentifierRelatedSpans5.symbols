=== tests/cases/compiler/file1.ts ===
declare global {
>global : Symbol(global, Decl(file1.ts, 0, 0))

    interface TopLevel {
>TopLevel : Symbol(TopLevel, Decl(file1.ts, 0, 16), Decl(file2.ts, 1, 16))

        duplicate1: () => string;
>duplicate1 : Symbol(TopLevel.duplicate1, Decl(file1.ts, 1, 24))

        duplicate2: () => string;
>duplicate2 : Symbol(TopLevel.duplicate2, Decl(file1.ts, 2, 33))

        duplicate3: () => string;
>duplicate3 : Symbol(TopLevel.duplicate3, Decl(file1.ts, 3, 33))
    }
}
export {}
=== tests/cases/compiler/file2.ts ===
import "./file1";
declare global {
>global : Symbol(global, Decl(file2.ts, 0, 17))

    interface TopLevel {
>TopLevel : Symbol(TopLevel, Decl(file1.ts, 0, 16), Decl(file2.ts, 1, 16))

        duplicate1(): number;
>duplicate1 : Symbol(TopLevel.duplicate1, Decl(file2.ts, 2, 24))

        duplicate2(): number;
>duplicate2 : Symbol(TopLevel.duplicate2, Decl(file2.ts, 3, 29))

        duplicate3(): number;
>duplicate3 : Symbol(TopLevel.duplicate3, Decl(file2.ts, 4, 29))
    }
}
export {}

