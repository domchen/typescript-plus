=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts ===
// Call signature parameters do not allow accessibility modifiers

function foo(public x, private y) { }
>foo : (public x: any, private y: any) => void
>x : any
>y : any

var f = function foo(public x, private y) { }
>f : (public x: any, private y: any) => void
>function foo(public x, private y) { } : (public x: any, private y: any) => void
>foo : (public x: any, private y: any) => void
>x : any
>y : any

var f2 = function (public x, private y) { }
>f2 : (public x: any, private y: any) => void
>function (public x, private y) { } : (public x: any, private y: any) => void
>x : any
>y : any

var f3 = (x, private y) => { }
>f3 : (x: any, private y: any) => void
>(x, private y) => { } : (x: any, private y: any) => void
>x : any
>y : any

var f4 = <T>(public x: T, y: T) => { }
>f4 : <T>(public x: T, y: T) => void
><T>(public x: T, y: T) => { } : <T>(public x: T, y: T) => void
>T : T
>x : T
>T : T
>y : T
>T : T

function foo2(private x: string, public y: number) { }
>foo2 : (private x: string, public y: number) => void
>x : string
>y : number

var f5 = function foo(private x: string, public y: number) { }
>f5 : (private x: string, public y: number) => void
>function foo(private x: string, public y: number) { } : (private x: string, public y: number) => void
>foo : (private x: string, public y: number) => void
>x : string
>y : number

var f6 = function (private x: string, public y: number) { }
>f6 : (private x: string, public y: number) => void
>function (private x: string, public y: number) { } : (private x: string, public y: number) => void
>x : string
>y : number

var f7 = (private x: string, public y: number) => { }
>f7 : (private x: string, public y: number) => void
>(private x: string, public y: number) => { } : (private x: string, public y: number) => void
>x : string
>y : number

var f8 = <T>(private x: T, public y: T) => { }
>f8 : <T>(private x: T, public y: T) => void
><T>(private x: T, public y: T) => { } : <T>(private x: T, public y: T) => void
>T : T
>x : T
>T : T
>y : T
>T : T

class C {
>C : C

    foo(public x, private y) { }
>foo : (public x: any, private y: any) => void
>x : any
>y : any

    foo2(public x: number, private y: string) { }
>foo2 : (public x: number, private y: string) => void
>x : number
>y : string

    foo3<T>(public x: T, private y: T) { }
>foo3 : <T>(public x: T, private y: T) => void
>T : T
>x : T
>T : T
>y : T
>T : T
}

interface I {
>I : I

    (private x, public y);
>x : any
>y : any

    (private x: string, public y: number);
>x : string
>y : number

    foo(private x, public y);
>foo : { (private x: any, public y: any): any; (public x: number, y: string): any; }
>x : any
>y : any

    foo(public x: number, y: string);
>foo : { (private x: any, public y: any): any; (public x: number, y: string): any; }
>x : number
>y : string

    foo3<T>(x: T, private y: T);
>foo3 : <T>(x: T, private y: T) => any
>T : T
>x : T
>T : T
>y : T
>T : T
}

var a: {
>a : { foo(public x: any, private y: any): any; foo2(private x: number, public y: string): any; }

    foo(public x, private y);
>foo : (public x: any, private y: any) => any
>x : any
>y : any

    foo2(private x: number, public y: string);
>foo2 : (private x: number, public y: string) => any
>x : number
>y : string

};

var b = {
>b : { foo(public x: any, y: any): void; a: (x: number, private y: string) => void; b: <T>(public x: T, private y: T) => void; }
>{    foo(public x, y) { },    a: function foo(x: number, private y: string) { },    b: <T>(public x: T, private y: T) => { }} : { foo(public x: any, y: any): void; a: (x: number, private y: string) => void; b: <T>(public x: T, private y: T) => void; }

    foo(public x, y) { },
>foo : (public x: any, y: any) => void
>x : any
>y : any

    a: function foo(x: number, private y: string) { },
>a : (x: number, private y: string) => void
>function foo(x: number, private y: string) { } : (x: number, private y: string) => void
>foo : (x: number, private y: string) => void
>x : number
>y : string

    b: <T>(public x: T, private y: T) => { }
>b : <T>(public x: T, private y: T) => void
><T>(public x: T, private y: T) => { } : <T>(public x: T, private y: T) => void
>T : T
>x : T
>T : T
>y : T
>T : T
}
