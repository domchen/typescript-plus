=== tests/cases/compiler/Class.ts ===
import { Configurable } from "./Configurable"
>Configurable : Symbol(Configurable, Decl(Class.ts, 0, 8))

export class HiddenClass {}
>HiddenClass : Symbol(HiddenClass, Decl(Class.ts, 0, 45))

export class ActualClass extends Configurable(HiddenClass) {}
>ActualClass : Symbol(ActualClass, Decl(Class.ts, 2, 27))
>Configurable : Symbol(Configurable, Decl(Class.ts, 0, 8))
>HiddenClass : Symbol(HiddenClass, Decl(Class.ts, 0, 45))

=== tests/cases/compiler/Configurable.ts ===
export type Constructor<T> = {
>Constructor : Symbol(Constructor, Decl(Configurable.ts, 0, 0))
>T : Symbol(T, Decl(Configurable.ts, 0, 24))

    new(...args: any[]): T;
>args : Symbol(args, Decl(Configurable.ts, 1, 8))
>T : Symbol(T, Decl(Configurable.ts, 0, 24))
}
export function Configurable<T extends Constructor<{}>>(base: T): T {
>Configurable : Symbol(Configurable, Decl(Configurable.ts, 2, 1))
>T : Symbol(T, Decl(Configurable.ts, 3, 29))
>Constructor : Symbol(Constructor, Decl(Configurable.ts, 0, 0))
>base : Symbol(base, Decl(Configurable.ts, 3, 56))
>T : Symbol(T, Decl(Configurable.ts, 3, 29))
>T : Symbol(T, Decl(Configurable.ts, 3, 29))

    return class extends base {
>base : Symbol(base, Decl(Configurable.ts, 3, 56))

        constructor(...args: any[]) {
>args : Symbol(args, Decl(Configurable.ts, 6, 20))

            super(...args);
>super : Symbol(T, Decl(Configurable.ts, 3, 29))
>args : Symbol(args, Decl(Configurable.ts, 6, 20))
        }

    };
}

