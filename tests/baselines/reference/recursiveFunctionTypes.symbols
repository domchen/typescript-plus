=== tests/cases/compiler/recursiveFunctionTypes.ts ===
function fn(): typeof fn { return 1; }
>fn : Symbol(fn, Decl(recursiveFunctionTypes.ts, 0, 0))
>fn : Symbol(fn, Decl(recursiveFunctionTypes.ts, 0, 0))

var x: number = fn; // error
>x : Symbol(x, Decl(recursiveFunctionTypes.ts, 2, 3))
>fn : Symbol(fn, Decl(recursiveFunctionTypes.ts, 0, 0))

var y: () => number = fn; // ok
>y : Symbol(y, Decl(recursiveFunctionTypes.ts, 3, 3))
>fn : Symbol(fn, Decl(recursiveFunctionTypes.ts, 0, 0))

var f: () => typeof g;
>f : Symbol(f, Decl(recursiveFunctionTypes.ts, 5, 3))
>g : Symbol(g, Decl(recursiveFunctionTypes.ts, 6, 3))

var g: () => typeof f;
>g : Symbol(g, Decl(recursiveFunctionTypes.ts, 6, 3))
>f : Symbol(f, Decl(recursiveFunctionTypes.ts, 5, 3))

function f1(d: typeof f1) { }
>f1 : Symbol(f1, Decl(recursiveFunctionTypes.ts, 6, 22))
>d : Symbol(d, Decl(recursiveFunctionTypes.ts, 8, 12))
>f1 : Symbol(f1, Decl(recursiveFunctionTypes.ts, 6, 22))

function f2(): typeof g2 { } 
>f2 : Symbol(f2, Decl(recursiveFunctionTypes.ts, 8, 29))
>g2 : Symbol(g2, Decl(recursiveFunctionTypes.ts, 10, 28))

function g2(): typeof f2 { } 
>g2 : Symbol(g2, Decl(recursiveFunctionTypes.ts, 10, 28))
>f2 : Symbol(f2, Decl(recursiveFunctionTypes.ts, 8, 29))

interface I<T> { }
>I : Symbol(I, Decl(recursiveFunctionTypes.ts, 11, 28))
>T : Symbol(T, Decl(recursiveFunctionTypes.ts, 13, 12))

function f3(): I<typeof f3> { return f3; }
>f3 : Symbol(f3, Decl(recursiveFunctionTypes.ts, 13, 18))
>I : Symbol(I, Decl(recursiveFunctionTypes.ts, 11, 28))
>f3 : Symbol(f3, Decl(recursiveFunctionTypes.ts, 13, 18))
>f3 : Symbol(f3, Decl(recursiveFunctionTypes.ts, 13, 18))

var a: number = f3; // error
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 16, 3))
>f3 : Symbol(f3, Decl(recursiveFunctionTypes.ts, 13, 18))

class C {
>C : Symbol(C, Decl(recursiveFunctionTypes.ts, 16, 19))

     static g(t: typeof C.g){ }
>g : Symbol(C.g, Decl(recursiveFunctionTypes.ts, 18, 9))
>t : Symbol(t, Decl(recursiveFunctionTypes.ts, 19, 14))
>C.g : Symbol(C.g, Decl(recursiveFunctionTypes.ts, 18, 9))
>C : Symbol(C, Decl(recursiveFunctionTypes.ts, 16, 19))
>g : Symbol(C.g, Decl(recursiveFunctionTypes.ts, 18, 9))
}
C.g(3); // error
>C.g : Symbol(C.g, Decl(recursiveFunctionTypes.ts, 18, 9))
>C : Symbol(C, Decl(recursiveFunctionTypes.ts, 16, 19))
>g : Symbol(C.g, Decl(recursiveFunctionTypes.ts, 18, 9))

var f4: () => typeof f4;
>f4 : Symbol(f4, Decl(recursiveFunctionTypes.ts, 23, 3))
>f4 : Symbol(f4, Decl(recursiveFunctionTypes.ts, 23, 3))

f4 = 3; // error
>f4 : Symbol(f4, Decl(recursiveFunctionTypes.ts, 23, 3))

function f5() { return f5; }
>f5 : Symbol(f5, Decl(recursiveFunctionTypes.ts, 24, 7))
>f5 : Symbol(f5, Decl(recursiveFunctionTypes.ts, 24, 7))

function f6(): typeof f6;
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

function f6(a: typeof f6): () => number;
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 29, 12))
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

function f6(a?: any) { return f6; }
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 30, 12))
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

f6("", 3); // error (arity mismatch)
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

f6(""); // ok (function takes an any param)
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

f6(); // ok
>f6 : Symbol(f6, Decl(recursiveFunctionTypes.ts, 26, 28), Decl(recursiveFunctionTypes.ts, 28, 25), Decl(recursiveFunctionTypes.ts, 29, 40))

declare function f7(): typeof f7;
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

declare function f7(a: typeof f7): () => number;
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 37, 20))
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

declare function f7(a: number): number;
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 38, 20))

declare function f7(a?: typeof f7): typeof f7;
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))
>a : Symbol(a, Decl(recursiveFunctionTypes.ts, 39, 20))
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

f7("", 3); // error (arity mismatch)
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

f7(""); // ok (function takes an any param)
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

f7(); // ok
>f7 : Symbol(f7, Decl(recursiveFunctionTypes.ts, 34, 5), Decl(recursiveFunctionTypes.ts, 36, 33), Decl(recursiveFunctionTypes.ts, 37, 48), Decl(recursiveFunctionTypes.ts, 38, 39))

