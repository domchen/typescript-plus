=== tests/cases/compiler/errorMessagesIntersectionTypes04.ts ===
interface A {
>A : Symbol(A, Decl(errorMessagesIntersectionTypes04.ts, 0, 0))

    a;
>a : Symbol(A.a, Decl(errorMessagesIntersectionTypes04.ts, 0, 13))
}

interface B {
>B : Symbol(B, Decl(errorMessagesIntersectionTypes04.ts, 2, 1))

    b;
>b : Symbol(B.b, Decl(errorMessagesIntersectionTypes04.ts, 4, 13))
}

function f<T, U extends A, V extends U>(): void {
>f : Symbol(f, Decl(errorMessagesIntersectionTypes04.ts, 6, 1))
>T : Symbol(T, Decl(errorMessagesIntersectionTypes04.ts, 8, 11))
>U : Symbol(U, Decl(errorMessagesIntersectionTypes04.ts, 8, 13))
>A : Symbol(A, Decl(errorMessagesIntersectionTypes04.ts, 0, 0))
>V : Symbol(V, Decl(errorMessagesIntersectionTypes04.ts, 8, 26))
>U : Symbol(U, Decl(errorMessagesIntersectionTypes04.ts, 8, 13))

    let num: number;
>num : Symbol(num, Decl(errorMessagesIntersectionTypes04.ts, 9, 7))

    let bool: boolean;
>bool : Symbol(bool, Decl(errorMessagesIntersectionTypes04.ts, 10, 7))

    let str: string;
>str : Symbol(str, Decl(errorMessagesIntersectionTypes04.ts, 11, 7))

    let a_and_b: A & B;
>a_and_b : Symbol(a_and_b, Decl(errorMessagesIntersectionTypes04.ts, 13, 7))
>A : Symbol(A, Decl(errorMessagesIntersectionTypes04.ts, 0, 0))
>B : Symbol(B, Decl(errorMessagesIntersectionTypes04.ts, 2, 1))

    let num_and_bool: number & boolean;
>num_and_bool : Symbol(num_and_bool, Decl(errorMessagesIntersectionTypes04.ts, 14, 7))

    num = a_and_b;
>num : Symbol(num, Decl(errorMessagesIntersectionTypes04.ts, 9, 7))
>a_and_b : Symbol(a_and_b, Decl(errorMessagesIntersectionTypes04.ts, 13, 7))

    bool = a_and_b;
>bool : Symbol(bool, Decl(errorMessagesIntersectionTypes04.ts, 10, 7))
>a_and_b : Symbol(a_and_b, Decl(errorMessagesIntersectionTypes04.ts, 13, 7))

    str = a_and_b;
>str : Symbol(str, Decl(errorMessagesIntersectionTypes04.ts, 11, 7))
>a_and_b : Symbol(a_and_b, Decl(errorMessagesIntersectionTypes04.ts, 13, 7))

    str = num_and_bool;
>str : Symbol(str, Decl(errorMessagesIntersectionTypes04.ts, 11, 7))
>num_and_bool : Symbol(num_and_bool, Decl(errorMessagesIntersectionTypes04.ts, 14, 7))
}
