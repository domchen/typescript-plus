=== tests/cases/compiler/overloadsWithinClasses.ts ===
class foo {
>foo : Symbol(foo, Decl(overloadsWithinClasses.ts, 0, 0))
 
    static fnOverload( ) {}
>fnOverload : Symbol(foo.fnOverload, Decl(overloadsWithinClasses.ts, 0, 11), Decl(overloadsWithinClasses.ts, 2, 27))
 
    static fnOverload(foo: string){ } // error
>fnOverload : Symbol(foo.fnOverload, Decl(overloadsWithinClasses.ts, 0, 11), Decl(overloadsWithinClasses.ts, 2, 27))
>foo : Symbol(foo, Decl(overloadsWithinClasses.ts, 4, 22))
 
}

class bar {
>bar : Symbol(bar, Decl(overloadsWithinClasses.ts, 6, 1))
 
    static fnOverload( );
>fnOverload : Symbol(bar.fnOverload, Decl(overloadsWithinClasses.ts, 8, 11), Decl(overloadsWithinClasses.ts, 10, 25))
 
    static fnOverload(foo?: string){ } // no error
>fnOverload : Symbol(bar.fnOverload, Decl(overloadsWithinClasses.ts, 8, 11), Decl(overloadsWithinClasses.ts, 10, 25))
>foo : Symbol(foo, Decl(overloadsWithinClasses.ts, 12, 22))
 
}

class X {
>X : Symbol(X, Decl(overloadsWithinClasses.ts, 14, 1))

   public attr(name:string):string;
>attr : Symbol(X.attr, Decl(overloadsWithinClasses.ts, 16, 9), Decl(overloadsWithinClasses.ts, 17, 35), Decl(overloadsWithinClasses.ts, 18, 44))
>name : Symbol(name, Decl(overloadsWithinClasses.ts, 17, 15))

   public attr(name:string, value:string):X;
>attr : Symbol(X.attr, Decl(overloadsWithinClasses.ts, 16, 9), Decl(overloadsWithinClasses.ts, 17, 35), Decl(overloadsWithinClasses.ts, 18, 44))
>name : Symbol(name, Decl(overloadsWithinClasses.ts, 18, 15))
>value : Symbol(value, Decl(overloadsWithinClasses.ts, 18, 27))
>X : Symbol(X, Decl(overloadsWithinClasses.ts, 14, 1))

   public attr(first:any, second?:any):any {
>attr : Symbol(X.attr, Decl(overloadsWithinClasses.ts, 16, 9), Decl(overloadsWithinClasses.ts, 17, 35), Decl(overloadsWithinClasses.ts, 18, 44))
>first : Symbol(first, Decl(overloadsWithinClasses.ts, 19, 15))
>second : Symbol(second, Decl(overloadsWithinClasses.ts, 19, 25))
   }
}

