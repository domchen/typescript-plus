=== tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classIsSubtypeOfBaseType.ts ===
class Base<T> {
>Base : Symbol(Base, Decl(classIsSubtypeOfBaseType.ts, 0, 0))
>T : Symbol(T, Decl(classIsSubtypeOfBaseType.ts, 0, 11))

    foo: T;
>foo : Symbol(Base.foo, Decl(classIsSubtypeOfBaseType.ts, 0, 15))
>T : Symbol(T, Decl(classIsSubtypeOfBaseType.ts, 0, 11))
}

class Derived extends Base<{ bar: string; }> {
>Derived : Symbol(Derived, Decl(classIsSubtypeOfBaseType.ts, 2, 1))
>Base : Symbol(Base, Decl(classIsSubtypeOfBaseType.ts, 0, 0))
>bar : Symbol(bar, Decl(classIsSubtypeOfBaseType.ts, 4, 28))

    foo: {
>foo : Symbol(Derived.foo, Decl(classIsSubtypeOfBaseType.ts, 4, 46))

        bar: string; baz: number; // ok
>bar : Symbol(bar, Decl(classIsSubtypeOfBaseType.ts, 5, 10))
>baz : Symbol(baz, Decl(classIsSubtypeOfBaseType.ts, 6, 20))
    }
}

class Derived2 extends Base<{ bar: string; }> {
>Derived2 : Symbol(Derived2, Decl(classIsSubtypeOfBaseType.ts, 8, 1))
>Base : Symbol(Base, Decl(classIsSubtypeOfBaseType.ts, 0, 0))
>bar : Symbol(bar, Decl(classIsSubtypeOfBaseType.ts, 10, 29))

    foo: {
>foo : Symbol(Derived2.foo, Decl(classIsSubtypeOfBaseType.ts, 10, 47))

        bar?: string; // error
>bar : Symbol(bar, Decl(classIsSubtypeOfBaseType.ts, 11, 10))
    }
}
