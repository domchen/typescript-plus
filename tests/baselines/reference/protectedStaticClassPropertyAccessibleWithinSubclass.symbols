=== tests/cases/conformance/classes/members/accessibility/protectedStaticClassPropertyAccessibleWithinSubclass.ts ===
class Base {
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))

    protected static x: string;
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

    static staticMethod() {
>staticMethod : Symbol(Base.staticMethod, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 1, 31))

        Base.x;         // OK, accessed within their declaring class
>Base.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived1.x;     // OK, accessed within their declaring class
>Derived1.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived2.x;     // OK, accessed within their declaring class
>Derived2.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
    }
}

class Derived1 extends Base {
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))

    static staticMethod1() {
>staticMethod1 : Symbol(Derived1.staticMethod1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 10, 29))

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
    }
}

class Derived2 extends Base {
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))

    static staticMethod2() {
>staticMethod2 : Symbol(Derived2.staticMethod2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 19, 29))

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
    }
}

class Derived3 extends Derived1 {
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))

    protected static x: string;
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))

    static staticMethod3() {
>staticMethod3 : Symbol(Derived3.staticMethod3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 29, 31))

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

        Derived3.x;     // OK, accessed within their declaring class
>Derived3.x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
    }
}


Base.x;         // Error, neither within their declaring class nor classes derived from their declaring class
>Base.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Base : Symbol(Base, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

Derived1.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived1.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived1 : Symbol(Derived1, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 8, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

Derived2.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived2.x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))
>Derived2 : Symbol(Derived2, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 17, 1))
>x : Symbol(Base.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 0, 12))

Derived3.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived3.x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))
>Derived3 : Symbol(Derived3, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 26, 1))
>x : Symbol(Derived3.x, Decl(protectedStaticClassPropertyAccessibleWithinSubclass.ts, 28, 33))

