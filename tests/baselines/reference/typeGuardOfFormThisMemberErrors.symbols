=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMemberErrors.ts ===
// There's a 'File' class in the stdlib, wrap with a namespace to avoid collision
namespace Test {
>Test : Symbol(Test, Decl(typeGuardOfFormThisMemberErrors.ts, 0, 0))

	export class FileSystemObject {
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))

		isFSO: this is FileSystemObject;
>isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMemberErrors.ts, 2, 32))
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))

		get isFile(): this is File {
>isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))
>File : Symbol(File, Decl(typeGuardOfFormThisMemberErrors.ts, 15, 2))

			return this instanceof File;
>this : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))
>File : Symbol(File, Decl(typeGuardOfFormThisMemberErrors.ts, 15, 2))
		}
		set isFile(param) {
>isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))
>param : Symbol(param, Decl(typeGuardOfFormThisMemberErrors.ts, 7, 13))

			// noop
		}
		get isDirectory(): this is Directory {
>isDirectory : Symbol(FileSystemObject.isDirectory, Decl(typeGuardOfFormThisMemberErrors.ts, 9, 3))
>Directory : Symbol(Directory, Decl(typeGuardOfFormThisMemberErrors.ts, 19, 2))

			return this instanceof Directory;
>this : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))
>Directory : Symbol(Directory, Decl(typeGuardOfFormThisMemberErrors.ts, 19, 2))
		}
		isNetworked: this is (Networked & this);
>isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMemberErrors.ts, 12, 3))
>Networked : Symbol(Networked, Decl(typeGuardOfFormThisMemberErrors.ts, 22, 2))

		constructor(public path: string) {}
>path : Symbol(FileSystemObject.path, Decl(typeGuardOfFormThisMemberErrors.ts, 14, 14))
	}

	export class File extends FileSystemObject {
>File : Symbol(File, Decl(typeGuardOfFormThisMemberErrors.ts, 15, 2))
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))

		constructor(path: string, public content: string) { super(path); }
>path : Symbol(path, Decl(typeGuardOfFormThisMemberErrors.ts, 18, 14))
>content : Symbol(File.content, Decl(typeGuardOfFormThisMemberErrors.ts, 18, 27))
>super : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))
>path : Symbol(path, Decl(typeGuardOfFormThisMemberErrors.ts, 18, 14))
	}
	export class Directory extends FileSystemObject {
>Directory : Symbol(Directory, Decl(typeGuardOfFormThisMemberErrors.ts, 19, 2))
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))

		children: FileSystemObject[];
>children : Symbol(Directory.children, Decl(typeGuardOfFormThisMemberErrors.ts, 20, 50))
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))
	}
	export interface Networked {
>Networked : Symbol(Networked, Decl(typeGuardOfFormThisMemberErrors.ts, 22, 2))

		host: string;
>host : Symbol(Networked.host, Decl(typeGuardOfFormThisMemberErrors.ts, 23, 29))
	}

	let file: FileSystemObject = new File("foo/bar.txt", "foo");
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMemberErrors.ts, 1, 16))
>File : Symbol(File, Decl(typeGuardOfFormThisMemberErrors.ts, 15, 2))

	file.isNetworked = file.isFile;
>file.isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMemberErrors.ts, 12, 3))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMemberErrors.ts, 12, 3))
>file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))

	file.isFSO = file.isNetworked;
>file.isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMemberErrors.ts, 2, 32))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMemberErrors.ts, 2, 32))
>file.isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMemberErrors.ts, 12, 3))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMemberErrors.ts, 12, 3))

	file.isFile = file.isFSO;
>file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMemberErrors.ts, 3, 34), Decl(typeGuardOfFormThisMemberErrors.ts, 6, 3))
>file.isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMemberErrors.ts, 2, 32))
>file : Symbol(file, Decl(typeGuardOfFormThisMemberErrors.ts, 27, 4))
>isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMemberErrors.ts, 2, 32))
}
