=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractFactoryFunction.ts ===
class A {}
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))

abstract class B extends A {}
>B : Symbol(B, Decl(classAbstractFactoryFunction.ts, 0, 10))
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))

function NewA(Factory: typeof A) {
>NewA : Symbol(NewA, Decl(classAbstractFactoryFunction.ts, 1, 29))
>Factory : Symbol(Factory, Decl(classAbstractFactoryFunction.ts, 3, 14))
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))

    return new A;
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))
}

function NewB(Factory: typeof B) {
>NewB : Symbol(NewB, Decl(classAbstractFactoryFunction.ts, 5, 1))
>Factory : Symbol(Factory, Decl(classAbstractFactoryFunction.ts, 7, 14))
>B : Symbol(B, Decl(classAbstractFactoryFunction.ts, 0, 10))

    return new B;
>B : Symbol(B, Decl(classAbstractFactoryFunction.ts, 0, 10))
}

NewA(A);
>NewA : Symbol(NewA, Decl(classAbstractFactoryFunction.ts, 1, 29))
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))

NewA(B);
>NewA : Symbol(NewA, Decl(classAbstractFactoryFunction.ts, 1, 29))
>B : Symbol(B, Decl(classAbstractFactoryFunction.ts, 0, 10))

NewB(A);
>NewB : Symbol(NewB, Decl(classAbstractFactoryFunction.ts, 5, 1))
>A : Symbol(A, Decl(classAbstractFactoryFunction.ts, 0, 0))

NewB(B);
>NewB : Symbol(NewB, Decl(classAbstractFactoryFunction.ts, 5, 1))
>B : Symbol(B, Decl(classAbstractFactoryFunction.ts, 0, 10))

