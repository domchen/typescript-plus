=== tests/cases/compiler/implicitAnyDeclareFunctionExprWithoutFormalType.ts ===
// these should be errors for implicit any parameter
var lambda = (l1) => { };       // Error at "l1"
>lambda : Symbol(lambda, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 1, 3))
>l1 : Symbol(l1, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 1, 14))

var lambd2 = (ll1, ll2: string) => { }  // Error at "ll1"
>lambd2 : Symbol(lambd2, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 2, 3))
>ll1 : Symbol(ll1, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 2, 14))
>ll2 : Symbol(ll2, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 2, 18))

var lamda3 = function myLambda3(myParam) { }
>lamda3 : Symbol(lamda3, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 3, 3))
>myLambda3 : Symbol(myLambda3, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 3, 12))
>myParam : Symbol(myParam, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 3, 32))

var lamda4 = () => { return null };
>lamda4 : Symbol(lamda4, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 4, 3))

// these should be error for implicit any return type
var lambda5 = function temp() { return null; }
>lambda5 : Symbol(lambda5, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 7, 3))
>temp : Symbol(temp, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 7, 13))

var lambda6 = () => { return null; }
>lambda6 : Symbol(lambda6, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 8, 3))

var lambda7 = function temp() { return undefined; }
>lambda7 : Symbol(lambda7, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 9, 3))
>temp : Symbol(temp, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 9, 13))
>undefined : Symbol(undefined)

var lambda8 = () => { return undefined; }
>lambda8 : Symbol(lambda8, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 10, 3))
>undefined : Symbol(undefined)

// this shouldn't be an error
var lambda9 = () => { return 5; }
>lambda9 : Symbol(lambda9, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 13, 3))

var lambda10 = function temp1() { return 5; }
>lambda10 : Symbol(lambda10, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 14, 3))
>temp1 : Symbol(temp1, Decl(implicitAnyDeclareFunctionExprWithoutFormalType.ts, 14, 14))


