=== tests/cases/compiler/newOperator.ts ===
interface ifc { }
>ifc : Symbol(ifc, Decl(newOperator.ts, 0, 0))

// Attempting to 'new' an interface yields poor error
var i = new ifc();
>i : Symbol(i, Decl(newOperator.ts, 2, 3))

// Parens are optional
var x = new Date;
>x : Symbol(x, Decl(newOperator.ts, 5, 3))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

var y = new Date();
>y : Symbol(y, Decl(newOperator.ts, 6, 3))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

// Target is not a class or var, good error
var t1 = new 53();
>t1 : Symbol(t1, Decl(newOperator.ts, 9, 3))

var t2 = new ''();
>t2 : Symbol(t2, Decl(newOperator.ts, 10, 3))

new string;

// Use in LHS of expression?
(new Date()).toString();
>(new Date()).toString : Symbol(Date.toString, Decl(lib.es5.d.ts, --, --))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))
>toString : Symbol(Date.toString, Decl(lib.es5.d.ts, --, --))

// Various spacing
var t3 = new string[]( );
>t3 : Symbol(t3, Decl(newOperator.ts, 17, 3))

var t4 =
>t4 : Symbol(t4, Decl(newOperator.ts, 18, 3))

new
string
[
    ]
    (
        );

// Unresolved symbol
var f = new q();
>f : Symbol(f, Decl(newOperator.ts, 27, 3))

// not legal
var t5 = new new Date;
>t5 : Symbol(t5, Decl(newOperator.ts, 30, 3))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

// Can be an expression
new String;
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))


module M {
>M : Symbol(M, Decl(newOperator.ts, 33, 11))

    export class T {
>T : Symbol(T, Decl(newOperator.ts, 36, 10))

        x: number;
>x : Symbol(T.x, Decl(newOperator.ts, 37, 20))
    }
}

class S {
>S : Symbol(S, Decl(newOperator.ts, 40, 1))

    public get xs(): M.T[] {
>xs : Symbol(S.xs, Decl(newOperator.ts, 42, 9))
>M : Symbol(M, Decl(newOperator.ts, 33, 11))
>T : Symbol(M.T, Decl(newOperator.ts, 36, 10))

        return new M.T[];
>M.T : Symbol(M.T, Decl(newOperator.ts, 36, 10))
>M : Symbol(M, Decl(newOperator.ts, 33, 11))
>T : Symbol(M.T, Decl(newOperator.ts, 36, 10))
    }
}

