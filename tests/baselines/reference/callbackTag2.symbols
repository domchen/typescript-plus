=== tests/cases/conformance/jsdoc/cb.js ===
/** @template T
 * @callback Id
 * @param {T} t
 * @returns {T} Maybe just return 120 and cast it?
 */
var x = 1
>x : Symbol(x, Decl(cb.js, 5, 3))

/** @type {Id<string>} I actually wanted to write `const "120"` */
var one_twenty = s => "120";
>one_twenty : Symbol(one_twenty, Decl(cb.js, 8, 3))
>s : Symbol(s, Decl(cb.js, 8, 16))

/** @template S
 * @callback SharedId
 * @param {S} ego
 * @return {S}
 */
class SharedClass {
>SharedClass : Symbol(SharedClass, Decl(cb.js, 8, 28))

    constructor() {
        /** @type {SharedId<S>} */
        this.id;
>this.id : Symbol(SharedClass.id, Decl(cb.js, 16, 19))
>this : Symbol(SharedClass, Decl(cb.js, 8, 28))
>id : Symbol(SharedClass.id, Decl(cb.js, 16, 19))
    }
}
/** @type {SharedId<number>} */
var outside = n => n + 1;
>outside : Symbol(outside, Decl(cb.js, 22, 3))
>n : Symbol(n, Decl(cb.js, 22, 13))
>n : Symbol(n, Decl(cb.js, 22, 13))

/** @type {Final<{ fantasy }, { heroes }>} */
var noreturn = (barts, tidus, noctis) => "cecil"
>noreturn : Symbol(noreturn, Decl(cb.js, 25, 3))
>barts : Symbol(barts, Decl(cb.js, 25, 16))
>tidus : Symbol(tidus, Decl(cb.js, 25, 22))
>noctis : Symbol(noctis, Decl(cb.js, 25, 29))

/**
 * @template V,X
 * @callback Final
 * @param {V} barts - "Barts"
 * @param {X} tidus - Titus
 * @param {X & V} noctis - "Prince Noctis Lucius Caelum"
 * @return {"cecil" | "zidane"}
 */

