=== tests/cases/compiler/getAndSetAsMemberNames.ts ===
class C1 {
>C1 : Symbol(C1, Decl(getAndSetAsMemberNames.ts, 0, 0))

    set: boolean;
>set : Symbol(C1.set, Decl(getAndSetAsMemberNames.ts, 0, 10))

    get = 1;
>get : Symbol(C1.get, Decl(getAndSetAsMemberNames.ts, 1, 17))
}
class C2 {
>C2 : Symbol(C2, Decl(getAndSetAsMemberNames.ts, 3, 1))

    set;
>set : Symbol(C2.set, Decl(getAndSetAsMemberNames.ts, 4, 10))
}
class C3 {
>C3 : Symbol(C3, Decl(getAndSetAsMemberNames.ts, 6, 1))

    set (x) {
>set : Symbol(C3.set, Decl(getAndSetAsMemberNames.ts, 7, 10))
>x : Symbol(x, Decl(getAndSetAsMemberNames.ts, 8, 9))

        return x + 1;
>x : Symbol(x, Decl(getAndSetAsMemberNames.ts, 8, 9))
    }
}
class C4 {
>C4 : Symbol(C4, Decl(getAndSetAsMemberNames.ts, 11, 1))

    get: boolean = true;
>get : Symbol(C4.get, Decl(getAndSetAsMemberNames.ts, 12, 10))
}
class C5 {
>C5 : Symbol(C5, Decl(getAndSetAsMemberNames.ts, 14, 1))

    public set: () => boolean = function () { return true; };
>set : Symbol(C5.set, Decl(getAndSetAsMemberNames.ts, 15, 10))

    get (): boolean { return true; }
>get : Symbol(C5.get, Decl(getAndSetAsMemberNames.ts, 16, 61))

    set t(x) { }
>t : Symbol(C5.t, Decl(getAndSetAsMemberNames.ts, 17, 36))
>x : Symbol(x, Decl(getAndSetAsMemberNames.ts, 18, 10))
}

