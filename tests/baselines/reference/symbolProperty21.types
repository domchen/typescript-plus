=== tests/cases/conformance/es6/Symbols/symbolProperty21.ts ===
interface I<T, U> {
    [Symbol.unscopables]: T;
>[Symbol.unscopables] : T
>Symbol.unscopables : symbol
>Symbol : SymbolConstructor
>unscopables : symbol

    [Symbol.isConcatSpreadable]: U;
>[Symbol.isConcatSpreadable] : U
>Symbol.isConcatSpreadable : symbol
>Symbol : SymbolConstructor
>isConcatSpreadable : symbol
}

declare function foo<T, U>(p: I<T, U>): { t: T; u: U };
>foo : <T, U>(p: I<T, U>) => { t: T; u: U; }
>p : I<T, U>
>t : T
>u : U

foo({
>foo({    [Symbol.isConcatSpreadable]: "",    [Symbol.toPrimitive]: 0,    [Symbol.unscopables]: true}) : any
>foo : <T, U>(p: I<T, U>) => { t: T; u: U; }
>{    [Symbol.isConcatSpreadable]: "",    [Symbol.toPrimitive]: 0,    [Symbol.unscopables]: true} : { [Symbol.isConcatSpreadable]: string; [Symbol.toPrimitive]: number; [Symbol.unscopables]: boolean; }

    [Symbol.isConcatSpreadable]: "",
>[Symbol.isConcatSpreadable] : string
>Symbol.isConcatSpreadable : symbol
>Symbol : SymbolConstructor
>isConcatSpreadable : symbol
>"" : ""

    [Symbol.toPrimitive]: 0,
>[Symbol.toPrimitive] : number
>Symbol.toPrimitive : symbol
>Symbol : SymbolConstructor
>toPrimitive : symbol
>0 : 0

    [Symbol.unscopables]: true
>[Symbol.unscopables] : boolean
>Symbol.unscopables : symbol
>Symbol : SymbolConstructor
>unscopables : symbol
>true : true

});
