=== tests/cases/conformance/externalModules/foo_1.ts ===
import foo = require("./foo_0");
>foo : Symbol(foo, Decl(foo_1.ts, 0, 0))

var x = new foo(true); // Should error
>x : Symbol(x, Decl(foo_1.ts, 1, 3))
>foo : Symbol(foo, Decl(foo_1.ts, 0, 0))

var y = new foo({a: "test", b: 42}); // Should be OK
>y : Symbol(y, Decl(foo_1.ts, 2, 3))
>foo : Symbol(foo, Decl(foo_1.ts, 0, 0))
>a : Symbol(a, Decl(foo_1.ts, 2, 17))
>b : Symbol(b, Decl(foo_1.ts, 2, 27))

var z: number = y.test.b;
>z : Symbol(z, Decl(foo_1.ts, 3, 3))
>y.test.b : Symbol(b, Decl(foo_1.ts, 2, 27))
>y.test : Symbol(foo.test, Decl(foo_0.ts, 0, 44))
>y : Symbol(y, Decl(foo_1.ts, 2, 3))
>test : Symbol(foo.test, Decl(foo_0.ts, 0, 44))
>b : Symbol(b, Decl(foo_1.ts, 2, 27))

=== tests/cases/conformance/externalModules/foo_0.ts ===
class Foo<T extends {a: string; b:number;}>{
>Foo : Symbol(Foo, Decl(foo_0.ts, 0, 0))
>T : Symbol(T, Decl(foo_0.ts, 0, 10))
>a : Symbol(a, Decl(foo_0.ts, 0, 21))
>b : Symbol(b, Decl(foo_0.ts, 0, 31))

	test: T;
>test : Symbol(Foo.test, Decl(foo_0.ts, 0, 44))
>T : Symbol(T, Decl(foo_0.ts, 0, 10))

	constructor(x: T){}
>x : Symbol(x, Decl(foo_0.ts, 2, 13))
>T : Symbol(T, Decl(foo_0.ts, 0, 10))
}

export = Foo;
>Foo : Symbol(Foo, Decl(foo_0.ts, 0, 0))

