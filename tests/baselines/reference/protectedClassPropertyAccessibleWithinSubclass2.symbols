=== tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass2.ts ===
class Base {
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

    protected x: string;
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

    method() {
>method : Symbol(Base.method, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 1, 24))

        var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 3, 11))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

        var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 4, 11))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

        var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 5, 11))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

        var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 6, 11))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

        var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 7, 11))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

        b.x;            // OK, accessed within their declaring class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 3, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d1.x;           // OK, accessed within their declaring class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 4, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d2.x;           // OK, accessed within their declaring class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 5, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 6, 11))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

        d4.x;           // OK, accessed within their declaring class
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 7, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
    }
}

class Derived1 extends Base {
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

    method1() {
>method1 : Symbol(Derived1.method1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 17, 29))

        var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 19, 11))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

        var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 20, 11))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

        var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 21, 11))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

        var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 22, 11))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

        var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 23, 11))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 19, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d1.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 20, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 21, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 22, 11))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

        d4.x;           // Error, isn't accessed through an instance of the enclosing class
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 23, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
    }
}

class Derived2 extends Base {
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

    method2() {
>method2 : Symbol(Derived2.method2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 33, 29))

        var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 35, 11))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

        var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 36, 11))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

        var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 37, 11))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

        var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 38, 11))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

        var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 39, 11))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 35, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 36, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d2.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 37, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 38, 11))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

        d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class or one of its subclasses
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 39, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
    }
}

class Derived3 extends Derived1 {
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

    protected x: string;
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

    method3() {
>method3 : Symbol(Derived3.method3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 50, 24))

        var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 52, 11))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

        var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 53, 11))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

        var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 54, 11))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

        var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 55, 11))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

        var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 56, 11))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 52, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 53, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 54, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d3.x;           // OK, accessed within their declaring class
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 55, 11))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

        d4.x;           // Error, isn't accessed through an instance of the enclosing class
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 56, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
    }
}

class Derived4 extends Derived2 {
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

    method4() {
>method4 : Symbol(Derived4.method4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 66, 33))

        var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 68, 11))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

        var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 69, 11))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

        var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 70, 11))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

        var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 71, 11))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

        var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 72, 11))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 68, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 69, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 70, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 71, 11))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

        d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 72, 11))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
    }
}


var b: Base;
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 83, 3))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 0))

var d1: Derived1;
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 84, 3))
>Derived1 : Symbol(Derived1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 15, 1))

var d2: Derived2;
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 85, 3))
>Derived2 : Symbol(Derived2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 31, 1))

var d3: Derived3;
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 86, 3))
>Derived3 : Symbol(Derived3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 47, 1))

var d4: Derived4;
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 87, 3))
>Derived4 : Symbol(Derived4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 64, 1))

b.x;                    // Error, neither within their declaring class nor classes derived from their declaring class
>b.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>b : Symbol(b, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 83, 3))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

d1.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d1.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d1 : Symbol(d1, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 84, 3))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

d2.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d2.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d2 : Symbol(d2, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 85, 3))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

d3.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d3.x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))
>d3 : Symbol(d3, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 86, 3))
>x : Symbol(Derived3.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 49, 33))

d4.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d4.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))
>d4 : Symbol(d4, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 87, 3))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass2.ts, 0, 12))

