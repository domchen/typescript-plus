=== tests/cases/conformance/jsdoc/a.js ===
function A () {
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))

    this.x = 1
>x : Symbol(A.x, Decl(a.js, 0, 15))

    /** @type {1} */
    this.first = this.second = 1
>first : Symbol(A.first, Decl(a.js, 1, 14))
>second : Symbol(A.second, Decl(a.js, 3, 16))
}
/** @param {number} n */
A.prototype.y = A.prototype.z = function f(n) {
>A.prototype : Symbol(A.y, Decl(a.js, 4, 1))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>y : Symbol(A.y, Decl(a.js, 4, 1))
>A.prototype : Symbol(A.z, Decl(a.js, 6, 15))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>z : Symbol(A.z, Decl(a.js, 6, 15))
>f : Symbol(f, Decl(a.js, 6, 31))
>n : Symbol(n, Decl(a.js, 6, 43))

    return n + this.x
>n : Symbol(n, Decl(a.js, 6, 43))
>this.x : Symbol(A.x, Decl(a.js, 0, 15))
>this : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>x : Symbol(A.x, Decl(a.js, 0, 15))
}
/** @param {number} m */
A.s = A.t = function g(m) {
>A.s : Symbol(A.s, Decl(a.js, 8, 1))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>s : Symbol(A.s, Decl(a.js, 8, 1))
>A.t : Symbol(A.t, Decl(a.js, 10, 5))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>t : Symbol(A.t, Decl(a.js, 10, 5))
>g : Symbol(g, Decl(a.js, 10, 11))
>m : Symbol(m, Decl(a.js, 10, 23))

    return m + this.x
>m : Symbol(m, Decl(a.js, 10, 23))
>this : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
}
var a = new A()
>a : Symbol(a, Decl(a.js, 13, 3), Decl(a.js, 17, 22))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))

a.y('no') // error
>a.y : Symbol(A.y, Decl(a.js, 4, 1))
>a : Symbol(a, Decl(a.js, 13, 3), Decl(a.js, 17, 22))
>y : Symbol(A.y, Decl(a.js, 4, 1))

a.z('not really') // error
>a.z : Symbol(A.z, Decl(a.js, 6, 15))
>a : Symbol(a, Decl(a.js, 13, 3), Decl(a.js, 17, 22))
>z : Symbol(A.z, Decl(a.js, 6, 15))

A.s('still no') // error
>A.s : Symbol(A.s, Decl(a.js, 8, 1))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>s : Symbol(A.s, Decl(a.js, 8, 1))

A.t('not here either') // error
>A.t : Symbol(A.t, Decl(a.js, 10, 5))
>A : Symbol(A, Decl(a.js, 0, 0), Decl(a.js, 8, 1))
>t : Symbol(A.t, Decl(a.js, 10, 5))

a.first = 10 // error: '10' isn't assignable to '1'
>a.first : Symbol(A.first, Decl(a.js, 1, 14))
>a : Symbol(a, Decl(a.js, 13, 3), Decl(a.js, 17, 22))
>first : Symbol(A.first, Decl(a.js, 1, 14))

