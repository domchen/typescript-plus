=== tests/cases/compiler/superCallInNonStaticMethod.ts ===
class Doing {
>Doing : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))

    public instanceMethod() {
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
    }
}

class Other extends Doing {
>Other : Symbol(Other, Decl(superCallInNonStaticMethod.ts, 3, 1))
>Doing : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))

    // in instance method
    public instanceMethod() {
>instanceMethod : Symbol(Other.instanceMethod, Decl(superCallInNonStaticMethod.ts, 5, 27))

        super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
    }

    // in a lambda inside a instance method
    public lambdaInsideAnInstanceMethod() {
>lambdaInsideAnInstanceMethod : Symbol(Other.lambdaInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 9, 5))

        () => {
            super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
        }
    }

    // in an object literal inside a instance method
    public objectLiteralInsideAnInstanceMethod() {
>objectLiteralInsideAnInstanceMethod : Symbol(Other.objectLiteralInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 16, 5))

        return {
            a: () => {
>a : Symbol(a, Decl(superCallInNonStaticMethod.ts, 20, 16))

                super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))

            },
            b: super.instanceMethod()
>b : Symbol(b, Decl(superCallInNonStaticMethod.ts, 23, 14))
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))

        };
    }

    // in a getter
    public get accessor() {
>accessor : Symbol(Other.accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))

        super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))

        return 0;
    }

    // in a setter
    public set accessor(value: number) {
>accessor : Symbol(Other.accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))
>value : Symbol(value, Decl(superCallInNonStaticMethod.ts, 36, 24))

        super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
    }
    
    constructor() {
        super();
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))

        super.instanceMethod();
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
    }
    
    public propertyInitializer = super.instanceMethod();
>propertyInitializer : Symbol(Other.propertyInitializer, Decl(superCallInNonStaticMethod.ts, 43, 5))
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
    
    public functionProperty = () => {super.instanceMethod(); };
>functionProperty : Symbol(Other.functionProperty, Decl(superCallInNonStaticMethod.ts, 45, 56))
>super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
>instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
}

