=== tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceWithObjectLiteral.ts ===
interface Computed<T> {
>Computed : Symbol(Computed, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 0))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 19))

    read(): T;
>read : Symbol(Computed.read, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 23))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 19))

    write(value: T);
>write : Symbol(Computed.write, Decl(typeArgumentInferenceWithObjectLiteral.ts, 1, 14))
>value : Symbol(value, Decl(typeArgumentInferenceWithObjectLiteral.ts, 2, 10))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 19))
}

function foo<T>(x: Computed<T>) { }
>foo : Symbol(foo, Decl(typeArgumentInferenceWithObjectLiteral.ts, 3, 1))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 5, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 5, 16))
>Computed : Symbol(Computed, Decl(typeArgumentInferenceWithObjectLiteral.ts, 0, 0))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 5, 13))

var s: string;
>s : Symbol(s, Decl(typeArgumentInferenceWithObjectLiteral.ts, 7, 3))

// Calls below should infer string for T and then assign that type to the value parameter
foo({
>foo : Symbol(foo, Decl(typeArgumentInferenceWithObjectLiteral.ts, 3, 1))

    read: () => s,
>read : Symbol(read, Decl(typeArgumentInferenceWithObjectLiteral.ts, 10, 5))
>s : Symbol(s, Decl(typeArgumentInferenceWithObjectLiteral.ts, 7, 3))

    write: value => s = value
>write : Symbol(write, Decl(typeArgumentInferenceWithObjectLiteral.ts, 11, 18))
>value : Symbol(value, Decl(typeArgumentInferenceWithObjectLiteral.ts, 12, 10))
>s : Symbol(s, Decl(typeArgumentInferenceWithObjectLiteral.ts, 7, 3))
>value : Symbol(value, Decl(typeArgumentInferenceWithObjectLiteral.ts, 12, 10))

});
foo({
>foo : Symbol(foo, Decl(typeArgumentInferenceWithObjectLiteral.ts, 3, 1))

    write: value => s = value,
>write : Symbol(write, Decl(typeArgumentInferenceWithObjectLiteral.ts, 14, 5))
>value : Symbol(value, Decl(typeArgumentInferenceWithObjectLiteral.ts, 15, 10))
>s : Symbol(s, Decl(typeArgumentInferenceWithObjectLiteral.ts, 7, 3))
>value : Symbol(value, Decl(typeArgumentInferenceWithObjectLiteral.ts, 15, 10))

    read: () => s
>read : Symbol(read, Decl(typeArgumentInferenceWithObjectLiteral.ts, 15, 30))
>s : Symbol(s, Decl(typeArgumentInferenceWithObjectLiteral.ts, 7, 3))

});

enum E1 { X }
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))

enum E2 { X }
>E2 : Symbol(E2, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 13))
>X : Symbol(E2.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 9))

// Check that we infer from both a.r and b before fixing T in a.w

declare function f1<T, U>(a: { w: (x: T) => U; r: () => T; }, b: T): U;
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 20))
>U : Symbol(U, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 22))
>a : Symbol(a, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 26))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 30))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 35))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 20))
>U : Symbol(U, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 22))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 46))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 20))
>b : Symbol(b, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 61))
>T : Symbol(T, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 20))
>U : Symbol(U, Decl(typeArgumentInferenceWithObjectLiteral.ts, 24, 22))

var v1: number;
>v1 : Symbol(v1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 26, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 3))

var v1 = f1({ w: x => x, r: () => 0 }, 0);
>v1 : Symbol(v1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 26, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 3))
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 16))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 16))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 24))

var v1 = f1({ w: x => x, r: () => 0 }, E1.X);
>v1 : Symbol(v1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 26, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 3))
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 16))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 16))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 24))
>E1.X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))

var v1 = f1({ w: x => x, r: () => E1.X }, 0);
>v1 : Symbol(v1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 26, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 27, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 28, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 3))
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 16))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 16))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 29, 24))
>E1.X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))

var v2: E1;
>v2 : Symbol(v2, Decl(typeArgumentInferenceWithObjectLiteral.ts, 31, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 3))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))

var v2 = f1({ w: x => x, r: () => E1.X }, E1.X);
>v2 : Symbol(v2, Decl(typeArgumentInferenceWithObjectLiteral.ts, 31, 3), Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 3))
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 16))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 16))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 32, 24))
>E1.X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1.X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))

var v3 = f1({ w: x => x, r: () => E1.X }, E2.X);  // Error
>v3 : Symbol(v3, Decl(typeArgumentInferenceWithObjectLiteral.ts, 34, 3))
>f1 : Symbol(f1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 13))
>w : Symbol(w, Decl(typeArgumentInferenceWithObjectLiteral.ts, 34, 13))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 34, 16))
>x : Symbol(x, Decl(typeArgumentInferenceWithObjectLiteral.ts, 34, 16))
>r : Symbol(r, Decl(typeArgumentInferenceWithObjectLiteral.ts, 34, 24))
>E1.X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E1 : Symbol(E1, Decl(typeArgumentInferenceWithObjectLiteral.ts, 17, 3))
>X : Symbol(E1.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 9))
>E2.X : Symbol(E2.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 9))
>E2 : Symbol(E2, Decl(typeArgumentInferenceWithObjectLiteral.ts, 19, 13))
>X : Symbol(E2.X, Decl(typeArgumentInferenceWithObjectLiteral.ts, 20, 9))

