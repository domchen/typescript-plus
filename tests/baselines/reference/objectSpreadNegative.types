=== tests/cases/conformance/types/spread/objectSpreadNegative.ts ===
let o = { a: 1, b: 'no' }
>o : { a: number; b: string; }
>{ a: 1, b: 'no' } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>'no' : "no"

/// private propagates
class PrivateOptionalX {
>PrivateOptionalX : PrivateOptionalX

    private x?: number;
>x : number
}
class PublicX {
>PublicX : PublicX

    public x: number;
>x : number
}
let publicX: PublicX;
>publicX : PublicX
>PublicX : PublicX

let privateOptionalX: PrivateOptionalX;
>privateOptionalX : PrivateOptionalX
>PrivateOptionalX : PrivateOptionalX

let o2 = { ...publicX, ...privateOptionalX };
>o2 : {}
>{ ...publicX, ...privateOptionalX } : {}
>publicX : PublicX
>privateOptionalX : PrivateOptionalX

let sn: number = o2.x; // error, x is private
>sn : number
>o2.x : any
>o2 : {}
>x : any

let optionalString: { sn?: string };
>optionalString : { sn?: string; }
>sn : string

let optionalNumber: { sn?: number };
>optionalNumber : { sn?: number; }
>sn : number

let allOptional: { sn: string | number } = { ...optionalString, ...optionalNumber };
>allOptional : { sn: string | number; }
>sn : string | number
>{ ...optionalString, ...optionalNumber } : { sn?: string | number; }
>optionalString : { sn?: string; }
>optionalNumber : { sn?: number; }

// error, 'sn' is optional in source, required in target

// assignability as target
interface Bool { b: boolean };
>Bool : Bool
>b : boolean

interface Str { s: string };
>Str : Str
>s : string

let spread = { ...{ b: true }, ...{s: "foo" } };
>spread : { s: string; b: boolean; }
>{ ...{ b: true }, ...{s: "foo" } } : { s: string; b: boolean; }
>{ b: true } : { b: boolean; }
>b : boolean
>true : true
>{s: "foo" } : { s: string; }
>s : string
>"foo" : "foo"

spread = { s: "foo" };  // error, missing 'b'
>spread = { s: "foo" } : { s: string; }
>spread : { s: string; b: boolean; }
>{ s: "foo" } : { s: string; }
>s : string
>"foo" : "foo"

let b = { b: false };
>b : { b: boolean; }
>{ b: false } : { b: boolean; }
>b : boolean
>false : false

spread = b; // error, missing 's'
>spread = b : { b: boolean; }
>spread : { s: string; b: boolean; }
>b : { b: boolean; }

// literal repeats are not allowed, but spread repeats are fine
let duplicated = { b: 'bad', ...o, b: 'bad', ...o2, b: 'bad' }
>duplicated : { b: string; a: number; }
>{ b: 'bad', ...o, b: 'bad', ...o2, b: 'bad' } : { b: string; a: number; }
>b : string
>'bad' : "bad"
>o : { a: number; b: string; }
>b : string
>'bad' : "bad"
>o2 : {}
>b : string
>'bad' : "bad"

let duplicatedSpread = { ...o, ...o }
>duplicatedSpread : { a: number; b: string; }
>{ ...o, ...o } : { a: number; b: string; }
>o : { a: number; b: string; }
>o : { a: number; b: string; }

// primitives are not allowed, except for falsy ones
let spreadNum = { ...12 };
>spreadNum : any
>{ ...12 } : any
>12 : 12

let spreadSum = { ...1 + 1 };
>spreadSum : any
>{ ...1 + 1 } : any
>1 + 1 : number
>1 : 1
>1 : 1

let spreadZero = { ...0 };
>spreadZero : any
>{ ...0 } : any
>0 : 0

spreadZero.toFixed(); // error, no methods even from a falsy number
>spreadZero.toFixed() : any
>spreadZero.toFixed : any
>spreadZero : any
>toFixed : any

let spreadBool = { ...true };
>spreadBool : any
>{ ...true } : any
>true : true

spreadBool.valueOf();
>spreadBool.valueOf() : any
>spreadBool.valueOf : any
>spreadBool : any
>valueOf : any

let spreadStr = { ...'foo' };
>spreadStr : any
>{ ...'foo' } : any
>'foo' : "foo"

spreadStr.length; // error, no 'length'
>spreadStr.length : any
>spreadStr : any
>length : any

spreadStr.charAt(1); // error, no methods either
>spreadStr.charAt(1) : any
>spreadStr.charAt : any
>spreadStr : any
>charAt : any
>1 : 1

// functions are skipped
let spreadFunc = { ...function () { } }
>spreadFunc : {}
>{ ...function () { } } : {}
>function () { } : () => void

spreadFunc(); // error, no call signature
>spreadFunc() : any
>spreadFunc : {}

// write-only properties get skipped
let setterOnly = { ...{ set b (bad: number) { } } };
>setterOnly : {}
>{ ...{ set b (bad: number) { } } } : {}
>{ set b (bad: number) { } } : { b: number; }
>b : number
>bad : number

setterOnly.b = 12; // error, 'b' does not exist
>setterOnly.b = 12 : 12
>setterOnly.b : any
>setterOnly : {}
>b : any
>12 : 12

// methods are skipped because they aren't enumerable
class C { p = 1; m() { } }
>C : C
>p : number
>1 : 1
>m : () => void

let c: C = new C()
>c : C
>C : C
>new C() : C
>C : typeof C

let spreadC = { ...c }
>spreadC : { p: number; }
>{ ...c } : { p: number; }
>c : C

spreadC.m(); // error 'm' is not in '{ ... c }'
>spreadC.m() : any
>spreadC.m : any
>spreadC : { p: number; }
>m : any

// non primitive
let obj: object = { a: 123 };
>obj : object
>{ a: 123 } : { a: number; }
>a : number
>123 : 123

let spreadObj = { ...obj };
>spreadObj : {}
>{ ...obj } : {}
>obj : object

spreadObj.a; // error 'a' is not in {}
>spreadObj.a : any
>spreadObj : {}
>a : any

// generics
function f<T, U>(t: T, u: U) {
>f : <T, U>(t: T, u: U) => any
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U

    return { ...t, ...u, id: 'id' };
>{ ...t, ...u, id: 'id' } : any
>t : T
>u : U
>id : string
>'id' : "id"
}
function override<U>(initial: U, override: U): U {
>override : <U>(initial: U, override: U) => U
>U : U
>initial : U
>U : U
>override : U
>U : U
>U : U

    return { ...initial, ...override };
>{ ...initial, ...override } : any
>initial : U
>override : U
}
let exclusive: { id: string, a: number, b: string, c: string, d: boolean } =
>exclusive : { id: string; a: number; b: string; c: string; d: boolean; }
>id : string
>a : number
>b : string
>c : string
>d : boolean

    f({ a: 1, b: 'yes' }, { c: 'no', d: false })
>f({ a: 1, b: 'yes' }, { c: 'no', d: false }) : any
>f : <T, U>(t: T, u: U) => any
>{ a: 1, b: 'yes' } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>'yes' : "yes"
>{ c: 'no', d: false } : { c: string; d: false; }
>c : string
>'no' : "no"
>d : false
>false : false

let overlap: { id: string, a: number, b: string } =
>overlap : { id: string; a: number; b: string; }
>id : string
>a : number
>b : string

    f({ a: 1 }, { a: 2, b: 'extra' })
>f({ a: 1 }, { a: 2, b: 'extra' }) : any
>f : <T, U>(t: T, u: U) => any
>{ a: 1 } : { a: number; }
>a : number
>1 : 1
>{ a: 2, b: 'extra' } : { a: number; b: string; }
>a : number
>2 : 2
>b : string
>'extra' : "extra"

let overlapConflict: { id:string, a: string } =
>overlapConflict : { id: string; a: string; }
>id : string
>a : string

    f({ a: 1 }, { a: 'mismatch' })
>f({ a: 1 }, { a: 'mismatch' }) : any
>f : <T, U>(t: T, u: U) => any
>{ a: 1 } : { a: number; }
>a : number
>1 : 1
>{ a: 'mismatch' } : { a: string; }
>a : string
>'mismatch' : "mismatch"

let overwriteId: { id: string, a: number, c: number, d: string } =
>overwriteId : { id: string; a: number; c: number; d: string; }
>id : string
>a : number
>c : number
>d : string

    f({ a: 1, id: true }, { c: 1, d: 'no' })
>f({ a: 1, id: true }, { c: 1, d: 'no' }) : any
>f : <T, U>(t: T, u: U) => any
>{ a: 1, id: true } : { a: number; id: true; }
>a : number
>1 : 1
>id : true
>true : true
>{ c: 1, d: 'no' } : { c: number; d: string; }
>c : number
>1 : 1
>d : string
>'no' : "no"

// excess property checks
type A = { a: string, b: string };
>A : A
>a : string
>b : string

type Extra = { a: string, b: string, extra: string };
>Extra : Extra
>a : string
>b : string
>extra : string

const extra1: A = { a: "a", b: "b", extra: "extra" };
>extra1 : A
>A : A
>{ a: "a", b: "b", extra: "extra" } : { a: string; b: string; extra: string; }
>a : string
>"a" : "a"
>b : string
>"b" : "b"
>extra : string
>"extra" : "extra"

const extra2 = { a: "a", b: "b", extra: "extra" };
>extra2 : { a: string; b: string; extra: string; }
>{ a: "a", b: "b", extra: "extra" } : { a: string; b: string; extra: string; }
>a : string
>"a" : "a"
>b : string
>"b" : "b"
>extra : string
>"extra" : "extra"

const a1: A = { ...extra1 }; // error spans should be here
>a1 : A
>A : A
>{ ...extra1 } : { a: string; b: string; }
>extra1 : A

const a2: A = { ...extra2 }; // not on the symbol declarations above
>a2 : A
>A : A
>{ ...extra2 } : { a: string; b: string; extra: string; }
>extra2 : { a: string; b: string; extra: string; }

const extra3: Extra = { a: "a", b: "b", extra: "extra" };
>extra3 : Extra
>Extra : Extra
>{ a: "a", b: "b", extra: "extra" } : { a: string; b: string; extra: string; }
>a : string
>"a" : "a"
>b : string
>"b" : "b"
>extra : string
>"extra" : "extra"

const a3: A = { ...extra3 }; // same here
>a3 : A
>A : A
>{ ...extra3 } : { a: string; b: string; extra: string; }
>extra3 : Extra

