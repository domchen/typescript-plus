=== tests/cases/compiler/collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts ===
class Foo2 {
>Foo2 : Symbol(Foo2, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 0, 0))

    constructor(_this: number) { //Error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 1, 16))

        var lambda = () => {
>lambda : Symbol(lambda, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 2, 11))

            return x => this;   // New scope.  So should inject new _this capture
>x : Symbol(x, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 3, 18))
>this : Symbol(Foo2, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 0, 0))
        }
    }
}

class Foo3 {
>Foo3 : Symbol(Foo3, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 6, 1))

    constructor(private _this: number) { // Error
>_this : Symbol(Foo3._this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 9, 16))

        var lambda = () => {
>lambda : Symbol(lambda, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 10, 11))

            return x => this;   // New scope.  So should inject new _this capture
>x : Symbol(x, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 11, 18))
>this : Symbol(Foo3, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 6, 1))
        }
    }
}   

class Foo4 {
>Foo4 : Symbol(Foo4, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 14, 1))

    constructor(_this: number); // No code gen - no error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 17, 16))

    constructor(_this: string); // No code gen - no error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 18, 16))

    constructor(_this: any) { // Error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 19, 16))

        var lambda = () => {
>lambda : Symbol(lambda, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 20, 11))

            return x => this;   // New scope.  So should inject new _this capture
>x : Symbol(x, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 21, 18))
>this : Symbol(Foo4, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 14, 1))
        }
    }
}  

class Foo5 {
>Foo5 : Symbol(Foo5, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 24, 1))

    constructor(_this: number); // No code gen - no error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 27, 16))

    constructor(_this: string); // No code gen - no error
>_this : Symbol(_this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 28, 16))

    constructor(private _this: any) { // Error
>_this : Symbol(Foo5._this, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 29, 16))

        var lambda = () => {
>lambda : Symbol(lambda, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 30, 11))

            return x => this;   // New scope.  So should inject new _this capture
>x : Symbol(x, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 31, 18))
>this : Symbol(Foo5, Decl(collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts, 24, 1))
        }
    }
}  
