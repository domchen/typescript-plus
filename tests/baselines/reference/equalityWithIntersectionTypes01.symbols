=== tests/cases/conformance/types/typeRelationships/comparable/equalityWithIntersectionTypes01.ts ===
interface I1 {
>I1 : Symbol(I1, Decl(equalityWithIntersectionTypes01.ts, 0, 0))

    p1: number
>p1 : Symbol(I1.p1, Decl(equalityWithIntersectionTypes01.ts, 0, 14))
}

interface I2 extends I1 {
>I2 : Symbol(I2, Decl(equalityWithIntersectionTypes01.ts, 2, 1))
>I1 : Symbol(I1, Decl(equalityWithIntersectionTypes01.ts, 0, 0))

    p2: number;
>p2 : Symbol(I2.p2, Decl(equalityWithIntersectionTypes01.ts, 4, 25))
}

interface I3 {
>I3 : Symbol(I3, Decl(equalityWithIntersectionTypes01.ts, 6, 1))

    p3: number;
>p3 : Symbol(I3.p3, Decl(equalityWithIntersectionTypes01.ts, 8, 14))
}

var x = { p1: 10, p2: 20, p3: 30 };
>x : Symbol(x, Decl(equalityWithIntersectionTypes01.ts, 12, 3))
>p1 : Symbol(p1, Decl(equalityWithIntersectionTypes01.ts, 12, 9))
>p2 : Symbol(p2, Decl(equalityWithIntersectionTypes01.ts, 12, 17))
>p3 : Symbol(p3, Decl(equalityWithIntersectionTypes01.ts, 12, 25))

var y: I1 & I3 = x;
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
>I1 : Symbol(I1, Decl(equalityWithIntersectionTypes01.ts, 0, 0))
>I3 : Symbol(I3, Decl(equalityWithIntersectionTypes01.ts, 6, 1))
>x : Symbol(x, Decl(equalityWithIntersectionTypes01.ts, 12, 3))

var z: I2 = x;
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>I2 : Symbol(I2, Decl(equalityWithIntersectionTypes01.ts, 2, 1))
>x : Symbol(x, Decl(equalityWithIntersectionTypes01.ts, 12, 3))

if (y === z || z === y) {
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
}
else if (y !== z || z !== y) {
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
}
else if (y == z || z == y) {
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
}
else if (y != z || z != y) {
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>z : Symbol(z, Decl(equalityWithIntersectionTypes01.ts, 14, 3))
>y : Symbol(y, Decl(equalityWithIntersectionTypes01.ts, 13, 3))
}
