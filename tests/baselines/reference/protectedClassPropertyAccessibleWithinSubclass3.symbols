=== tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass3.ts ===
class Base {
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 0))

    protected x: string;
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))

    method() {
>method : Symbol(Base.method, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 1, 24))

        this.x;            // OK, accessed within their declaring class
>this.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))
>this : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))
    }
}

class Derived extends Base {
>Derived : Symbol(Derived, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 5, 1))
>Base : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 0))

    method1() {
>method1 : Symbol(Derived.method1, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 7, 28))

        this.x;            // OK, accessed within a subclass of the declaring class
>this.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))
>this : Symbol(Derived, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 5, 1))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))

        super.x;           // Error, x is not public
>super.x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))
>super : Symbol(Base, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 0))
>x : Symbol(Base.x, Decl(protectedClassPropertyAccessibleWithinSubclass3.ts, 0, 12))
    }
}
