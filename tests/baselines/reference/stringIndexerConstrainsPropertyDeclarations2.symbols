=== tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations2.ts ===
// String indexer providing a constraint of a user defined type

class A {
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    foo(): string { return ''; }
>foo : Symbol(A.foo, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 2, 9))
}

class B extends A {
>B : Symbol(B, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 4, 1))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    bar(): string { return ''; }
>bar : Symbol(B.bar, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 6, 19))
}

class Foo {
>Foo : Symbol(Foo, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 8, 1))

    [x: string]: A;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 11, 5))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    a: A; // ok
>a : Symbol(Foo.a, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 11, 19))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    b: B; // ok
>b : Symbol(Foo.b, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 12, 9))
>B : Symbol(B, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 4, 1))

    c: number; // error
>c : Symbol(Foo.c, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 13, 9))

    d: string; // error
>d : Symbol(Foo.d, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 14, 14))
}

interface Foo2 {
>Foo2 : Symbol(Foo2, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 16, 1))

    [x: string]: A;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 19, 5))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    a: A; // ok
>a : Symbol(Foo2.a, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 19, 19))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    b: B; // ok
>b : Symbol(Foo2.b, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 20, 9))
>B : Symbol(B, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 4, 1))

    c: number; // error
>c : Symbol(Foo2.c, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 21, 9))

    d: string; // error
>d : Symbol(Foo2.d, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 22, 14))
}

var a: {
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 26, 3))

    [x: string]: A;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 27, 5))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    a: A; // ok
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 27, 19))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    b: B; // ok
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 28, 9))
>B : Symbol(B, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 4, 1))

    c: number; // error
>c : Symbol(c, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 29, 9))

    d: string; // error
>d : Symbol(d, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 30, 14))

};

// error
var b: { [x: string]: A } = {
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 35, 3))
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 35, 10))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    a: A,
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 35, 29))
>A : Symbol(A, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 0, 0))

    b: B
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 36, 9))
>B : Symbol(B, Decl(stringIndexerConstrainsPropertyDeclarations2.ts, 4, 1))
}
