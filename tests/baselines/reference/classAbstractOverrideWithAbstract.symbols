=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverrideWithAbstract.ts ===
class A {
>A : Symbol(A, Decl(classAbstractOverrideWithAbstract.ts, 0, 0))

    foo() {}
>foo : Symbol(A.foo, Decl(classAbstractOverrideWithAbstract.ts, 0, 9))
}

abstract class B extends A {
>B : Symbol(B, Decl(classAbstractOverrideWithAbstract.ts, 2, 1))
>A : Symbol(A, Decl(classAbstractOverrideWithAbstract.ts, 0, 0))

    abstract foo();
>foo : Symbol(B.foo, Decl(classAbstractOverrideWithAbstract.ts, 4, 28))
}

abstract class AA {
>AA : Symbol(AA, Decl(classAbstractOverrideWithAbstract.ts, 6, 1))

    foo() {}
>foo : Symbol(AA.foo, Decl(classAbstractOverrideWithAbstract.ts, 8, 19))

    abstract bar();
>bar : Symbol(AA.bar, Decl(classAbstractOverrideWithAbstract.ts, 9, 12))
}

abstract class BB extends AA {
>BB : Symbol(BB, Decl(classAbstractOverrideWithAbstract.ts, 11, 1))
>AA : Symbol(AA, Decl(classAbstractOverrideWithAbstract.ts, 6, 1))

    abstract foo();
>foo : Symbol(BB.foo, Decl(classAbstractOverrideWithAbstract.ts, 13, 30))

    bar () {}
>bar : Symbol(BB.bar, Decl(classAbstractOverrideWithAbstract.ts, 14, 19))
}

class CC extends BB {} // error
>CC : Symbol(CC, Decl(classAbstractOverrideWithAbstract.ts, 16, 1))
>BB : Symbol(BB, Decl(classAbstractOverrideWithAbstract.ts, 11, 1))

class DD extends BB {
>DD : Symbol(DD, Decl(classAbstractOverrideWithAbstract.ts, 18, 22))
>BB : Symbol(BB, Decl(classAbstractOverrideWithAbstract.ts, 11, 1))

    foo() {}
>foo : Symbol(DD.foo, Decl(classAbstractOverrideWithAbstract.ts, 20, 21))
}
