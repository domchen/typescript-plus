=== tests/cases/conformance/types/typeAliases/directDependenceBetweenTypeAliases.ts ===
// It is an error for the type specified in a type alias to depend on that type alias

// A type alias directly depends on the type it aliases.
type T0 = T0
>T0 : Symbol(T0, Decl(directDependenceBetweenTypeAliases.ts, 0, 0))
>T0 : Symbol(T0, Decl(directDependenceBetweenTypeAliases.ts, 0, 0))

type T0_1 = T0_2
>T0_1 : Symbol(T0_1, Decl(directDependenceBetweenTypeAliases.ts, 3, 12))
>T0_2 : Symbol(T0_2, Decl(directDependenceBetweenTypeAliases.ts, 4, 16))

type T0_2 = T0_3
>T0_2 : Symbol(T0_2, Decl(directDependenceBetweenTypeAliases.ts, 4, 16))
>T0_3 : Symbol(T0_3, Decl(directDependenceBetweenTypeAliases.ts, 5, 16))

type T0_3 = T0_1
>T0_3 : Symbol(T0_3, Decl(directDependenceBetweenTypeAliases.ts, 5, 16))
>T0_1 : Symbol(T0_1, Decl(directDependenceBetweenTypeAliases.ts, 3, 12))

// A type reference directly depends on the referenced type and each of the type arguments, if any.
interface I<T> {}
>I : Symbol(I, Decl(directDependenceBetweenTypeAliases.ts, 6, 16))
>T : Symbol(T, Decl(directDependenceBetweenTypeAliases.ts, 9, 12))

type T1 = I<T1>
>T1 : Symbol(T1, Decl(directDependenceBetweenTypeAliases.ts, 9, 17))
>I : Symbol(I, Decl(directDependenceBetweenTypeAliases.ts, 6, 16))
>T1 : Symbol(T1, Decl(directDependenceBetweenTypeAliases.ts, 9, 17))

// A union type directly depends on each of the constituent types.
type T2 = T2 | string
>T2 : Symbol(T2, Decl(directDependenceBetweenTypeAliases.ts, 10, 15))
>T2 : Symbol(T2, Decl(directDependenceBetweenTypeAliases.ts, 10, 15))

class C<T> {}
>C : Symbol(C, Decl(directDependenceBetweenTypeAliases.ts, 13, 21))
>T : Symbol(T, Decl(directDependenceBetweenTypeAliases.ts, 14, 8))

type T2_1 = T2_1[] | number
>T2_1 : Symbol(T2_1, Decl(directDependenceBetweenTypeAliases.ts, 14, 13))
>T2_1 : Symbol(T2_1, Decl(directDependenceBetweenTypeAliases.ts, 14, 13))

// An array type directly depends on its element type.
type T3 = T3[]
>T3 : Symbol(T3, Decl(directDependenceBetweenTypeAliases.ts, 15, 27))
>T3 : Symbol(T3, Decl(directDependenceBetweenTypeAliases.ts, 15, 27))

// A tuple type directly depends on each of its element types.
type T4 = [number, T4]
>T4 : Symbol(T4, Decl(directDependenceBetweenTypeAliases.ts, 18, 14))
>T4 : Symbol(T4, Decl(directDependenceBetweenTypeAliases.ts, 18, 14))

// A type query directly depends on the type of the referenced entity.
var x: T5[] = []
>x : Symbol(x, Decl(directDependenceBetweenTypeAliases.ts, 24, 3))
>T5 : Symbol(T5, Decl(directDependenceBetweenTypeAliases.ts, 24, 16))

type T5 = typeof x
>T5 : Symbol(T5, Decl(directDependenceBetweenTypeAliases.ts, 24, 16))
>x : Symbol(x, Decl(directDependenceBetweenTypeAliases.ts, 24, 3))

class C1<T> {}
>C1 : Symbol(C1, Decl(directDependenceBetweenTypeAliases.ts, 25, 18))
>T : Symbol(T, Decl(directDependenceBetweenTypeAliases.ts, 27, 9))

type T6 = T7 | number
>T6 : Symbol(T6, Decl(directDependenceBetweenTypeAliases.ts, 27, 14))
>T7 : Symbol(T7, Decl(directDependenceBetweenTypeAliases.ts, 28, 21))

type T7 = typeof yy
>T7 : Symbol(T7, Decl(directDependenceBetweenTypeAliases.ts, 28, 21))
>yy : Symbol(yy, Decl(directDependenceBetweenTypeAliases.ts, 30, 3))

var yy: [string, T8[]];
>yy : Symbol(yy, Decl(directDependenceBetweenTypeAliases.ts, 30, 3))
>T8 : Symbol(T8, Decl(directDependenceBetweenTypeAliases.ts, 30, 23))

type T8 = C<T6>
>T8 : Symbol(T8, Decl(directDependenceBetweenTypeAliases.ts, 30, 23))
>C : Symbol(C, Decl(directDependenceBetweenTypeAliases.ts, 13, 21))
>T6 : Symbol(T6, Decl(directDependenceBetweenTypeAliases.ts, 27, 14))

// legal cases
type T9 = () => T9
>T9 : Symbol(T9, Decl(directDependenceBetweenTypeAliases.ts, 31, 15))
>T9 : Symbol(T9, Decl(directDependenceBetweenTypeAliases.ts, 31, 15))

type T10 = { x: T10 } | { new(v: T10): string }
>T10 : Symbol(T10, Decl(directDependenceBetweenTypeAliases.ts, 34, 18))
>x : Symbol(x, Decl(directDependenceBetweenTypeAliases.ts, 35, 12))
>T10 : Symbol(T10, Decl(directDependenceBetweenTypeAliases.ts, 34, 18))
>v : Symbol(v, Decl(directDependenceBetweenTypeAliases.ts, 35, 30))
>T10 : Symbol(T10, Decl(directDependenceBetweenTypeAliases.ts, 34, 18))

type T11 = T12[]
>T11 : Symbol(T11, Decl(directDependenceBetweenTypeAliases.ts, 35, 47))
>T12 : Symbol(T12, Decl(directDependenceBetweenTypeAliases.ts, 36, 16))

type T12 = [T13, string]
>T12 : Symbol(T12, Decl(directDependenceBetweenTypeAliases.ts, 36, 16))
>T13 : Symbol(T13, Decl(directDependenceBetweenTypeAliases.ts, 37, 24))

type T13 = typeof zz
>T13 : Symbol(T13, Decl(directDependenceBetweenTypeAliases.ts, 37, 24))
>zz : Symbol(zz, Decl(directDependenceBetweenTypeAliases.ts, 39, 3))

var zz: { x: T11 }
>zz : Symbol(zz, Decl(directDependenceBetweenTypeAliases.ts, 39, 3))
>x : Symbol(x, Decl(directDependenceBetweenTypeAliases.ts, 39, 9))
>T11 : Symbol(T11, Decl(directDependenceBetweenTypeAliases.ts, 35, 47))


