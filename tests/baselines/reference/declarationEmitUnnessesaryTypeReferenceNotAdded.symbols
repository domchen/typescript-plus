=== /index.ts ===
import minimist = require('minimist');
>minimist : Symbol(minimist, Decl(index.ts, 0, 0))

import process = require('process');
>process : Symbol(process, Decl(index.ts, 0, 38))

export default function parseArgs(): minimist.ParsedArgs {
>parseArgs : Symbol(parseArgs, Decl(index.ts, 1, 36))
>minimist : Symbol(minimist, Decl(index.ts, 0, 0))
>ParsedArgs : Symbol(minimist.ParsedArgs, Decl(minimist.d.ts, 0, 25))

  return minimist(process.argv.slice(2));
>minimist : Symbol(minimist, Decl(index.ts, 0, 0))
>process : Symbol(process, Decl(index.ts, 0, 38))
}

=== /node_modules/@types/minimist/minimist.d.ts ===
declare namespace thing {
>thing : Symbol(thing, Decl(minimist.d.ts, 2, 1), Decl(minimist.d.ts, 0, 0))

    interface ParsedArgs {}
>ParsedArgs : Symbol(ParsedArgs, Decl(minimist.d.ts, 0, 25))
}
declare function thing(x: any): thing.ParsedArgs;
>thing : Symbol(thing, Decl(minimist.d.ts, 2, 1), Decl(minimist.d.ts, 0, 0))
>x : Symbol(x, Decl(minimist.d.ts, 3, 23))
>thing : Symbol(thing, Decl(minimist.d.ts, 2, 1), Decl(minimist.d.ts, 0, 0))
>ParsedArgs : Symbol(thing.ParsedArgs, Decl(minimist.d.ts, 0, 25))

export = thing;
>thing : Symbol(thing, Decl(minimist.d.ts, 2, 1), Decl(minimist.d.ts, 0, 0))

=== /node_modules/@types/process/process.d.ts ===
declare const thing: any;
>thing : Symbol(thing, Decl(process.d.ts, 0, 13))

export = thing;
>thing : Symbol(thing, Decl(process.d.ts, 0, 13))

