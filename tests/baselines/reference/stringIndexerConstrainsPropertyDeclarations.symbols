=== tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations.ts ===
// String indexer types constrain the types of named properties in their containing type

interface MyString extends String {
>MyString : Symbol(MyString, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 0, 0))
>String : Symbol(String, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

    foo: number;
>foo : Symbol(MyString.foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 2, 35))
}

class C {
>C : Symbol(C, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 4, 1))

    [x: string]: string;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 7, 5))

    constructor() { } // ok

    a: string; // ok
>a : Symbol(C.a, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 9, 21))

    b: number; // error
>b : Symbol(C.b, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 11, 14))

    c: () => {} // error
>c : Symbol(C.c, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 12, 14))

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : Symbol(C.f, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 19, 18))
>MyString : Symbol(MyString, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 0, 0))

    get X() { // ok
>X : Symbol(C.X, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 20, 16), Decl(stringIndexerConstrainsPropertyDeclarations.ts, 24, 5))

        return '';
    }
    set X(v) { } // ok
>X : Symbol(C.X, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 20, 16), Decl(stringIndexerConstrainsPropertyDeclarations.ts, 24, 5))
>v : Symbol(v, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 25, 10))

    foo() { // error
>foo : Symbol(C.foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 25, 16))

        return '';
    }

    static sa: number; // ok
>sa : Symbol(C.sa, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 29, 5))

    static sb: string; // ok
>sb : Symbol(C.sb, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 31, 22))

    static foo() { } // ok
>foo : Symbol(C.foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 32, 22))

    static get X() { // ok
>X : Symbol(C.X, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 34, 20))

        return 1;
    }
}

interface I {
>I : Symbol(I, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 38, 1))

    [x: string]: string;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 41, 5))

    a: string; // ok
>a : Symbol(I.a, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 41, 24))

    b: number; // error
>b : Symbol(I.b, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 43, 14))

    c: () => {} // error
>c : Symbol(I.c, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 44, 14))

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    (): string; // ok
    (x): number // ok
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 51, 5))

    foo(): string; // error
>foo : Symbol(I.foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 51, 15))

    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : Symbol(I.f, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 54, 18))
>MyString : Symbol(MyString, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 0, 0))
}

var a: {
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 58, 3))

    [x: string]: string;
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 59, 5))

    a: string; // ok
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 59, 24))

    b: number; // error
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 61, 14))

    c: () => {} // error
>c : Symbol(c, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 62, 14))

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    (): string; // ok
    (x): number // ok
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 69, 5))

    foo(): string; // error
>foo : Symbol(foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 69, 15))

    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : Symbol(f, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 72, 18))
>MyString : Symbol(MyString, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 0, 0))
}

// error
var b: { [x: string]: string; } = {
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 77, 3))
>x : Symbol(x, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 77, 10))

    a: '',
>a : Symbol(a, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 77, 35))

    b: 1, 
>b : Symbol(b, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 78, 10))

    c: () => { }, 
>c : Symbol(c, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 79, 9))

    "d": '', 
    "e": 1, 
    1.0: '',
    2.0: 1, 
    "3.0": '', 
    "4.0": 1, 
    f: <MyString>null, 
>f : Symbol(f, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 86, 13))
>MyString : Symbol(MyString, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 0, 0))

    get X() { 
>X : Symbol(X, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 87, 22), Decl(stringIndexerConstrainsPropertyDeclarations.ts, 91, 6))

        return '';
    },
    set X(v) { }, 
>X : Symbol(X, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 87, 22), Decl(stringIndexerConstrainsPropertyDeclarations.ts, 91, 6))
>v : Symbol(v, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 92, 10))

    foo() { 
>foo : Symbol(foo, Decl(stringIndexerConstrainsPropertyDeclarations.ts, 92, 17))

        return '';
    }
}
