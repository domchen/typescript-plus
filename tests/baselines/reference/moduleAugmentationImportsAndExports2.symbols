=== tests/cases/compiler/f1.ts ===
export class A {}
>A : Symbol(A, Decl(f1.ts, 0, 0))

=== tests/cases/compiler/f2.ts ===
export class B {
>B : Symbol(B, Decl(f2.ts, 0, 0))

    n: number;
>n : Symbol(B.n, Decl(f2.ts, 0, 16))
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : Symbol(A, Decl(f3.ts, 0, 8))

A.prototype.foo = function () { return undefined; }
>A.prototype : Symbol(A.prototype)
>A : Symbol(A, Decl(f3.ts, 0, 8))
>prototype : Symbol(A.prototype)
>undefined : Symbol(undefined)

namespace N {
>N : Symbol(N, Decl(f3.ts, 2, 51))

    export interface Ifc { a }
>Ifc : Symbol(Ifc, Decl(f3.ts, 4, 13))
>a : Symbol(Ifc.a, Decl(f3.ts, 5, 26))

    export interface Cls { a }
>Cls : Symbol(Cls, Decl(f3.ts, 5, 30))
>a : Symbol(Cls.a, Decl(f3.ts, 6, 26))
}

declare module "./f1" {
>"./f1" : Symbol("tests/cases/compiler/f1", Decl(f1.ts, 0, 0), Decl(f3.ts, 7, 1))

    import {B} from "./f2";
>B : Symbol(B, Decl(f3.ts, 10, 12))

    export {B} from "./f2";
>B : Symbol(B, Decl(f3.ts, 11, 12))

    import I = N.Ifc;
>I : Symbol(I, Decl(f3.ts, 11, 27))
>N : Symbol(N, Decl(f3.ts, 2, 51))
>Ifc : Symbol(I, Decl(f3.ts, 4, 13))

    import C = N.Cls;
>C : Symbol(C, Decl(f3.ts, 12, 21))
>N : Symbol(N, Decl(f3.ts, 2, 51))
>Cls : Symbol(C, Decl(f3.ts, 5, 30))

    // should have explicit export
    interface A {
>A : Symbol(A, Decl(f3.ts, 13, 21))

        foo(): B;
>foo : Symbol(A.foo, Decl(f3.ts, 15, 17))
>B : Symbol(B, Decl(f3.ts, 10, 12))

        bar(): I;
>bar : Symbol(A.bar, Decl(f3.ts, 16, 17))
>I : Symbol(I, Decl(f3.ts, 11, 27))

        baz(): C;
>baz : Symbol(A.baz, Decl(f3.ts, 17, 17))
>C : Symbol(C, Decl(f3.ts, 12, 21))
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : Symbol(A, Decl(f4.ts, 0, 8))

import "./f3";

let a: A;
>a : Symbol(a, Decl(f4.ts, 3, 3))
>A : Symbol(A, Decl(f4.ts, 0, 8))

let b = a.foo().n;
>b : Symbol(b, Decl(f4.ts, 4, 3))
>a : Symbol(a, Decl(f4.ts, 3, 3))

