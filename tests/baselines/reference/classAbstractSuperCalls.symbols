=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractSuperCalls.ts ===
class A {
>A : Symbol(A, Decl(classAbstractSuperCalls.ts, 0, 0))

    foo() { return 1; }
>foo : Symbol(A.foo, Decl(classAbstractSuperCalls.ts, 0, 9))
}

abstract class B extends A {
>B : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))
>A : Symbol(A, Decl(classAbstractSuperCalls.ts, 0, 0))

    abstract foo();
>foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))

    bar() { super.foo(); }
>bar : Symbol(B.bar, Decl(classAbstractSuperCalls.ts, 5, 19))
>super.foo : Symbol(A.foo, Decl(classAbstractSuperCalls.ts, 0, 9))
>super : Symbol(A, Decl(classAbstractSuperCalls.ts, 0, 0))
>foo : Symbol(A.foo, Decl(classAbstractSuperCalls.ts, 0, 9))

    baz() { return this.foo; }
>baz : Symbol(B.baz, Decl(classAbstractSuperCalls.ts, 6, 26))
>this.foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))
>this : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))
>foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))
}

class C extends B {
>C : Symbol(C, Decl(classAbstractSuperCalls.ts, 8, 1))
>B : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))

    foo() { return 2; }
>foo : Symbol(C.foo, Decl(classAbstractSuperCalls.ts, 10, 19))

    qux() { return super.foo() || super.foo; } // 2 errors, foo is abstract
>qux : Symbol(C.qux, Decl(classAbstractSuperCalls.ts, 11, 23))
>super.foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))
>super : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))
>foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))
>super.foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))
>super : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))
>foo : Symbol(B.foo, Decl(classAbstractSuperCalls.ts, 4, 28))

    norf() { return super.bar(); }
>norf : Symbol(C.norf, Decl(classAbstractSuperCalls.ts, 12, 46))
>super.bar : Symbol(B.bar, Decl(classAbstractSuperCalls.ts, 5, 19))
>super : Symbol(B, Decl(classAbstractSuperCalls.ts, 2, 1))
>bar : Symbol(B.bar, Decl(classAbstractSuperCalls.ts, 5, 19))
}

class AA {
>AA : Symbol(AA, Decl(classAbstractSuperCalls.ts, 14, 1))

    foo() { return 1; }
>foo : Symbol(AA.foo, Decl(classAbstractSuperCalls.ts, 16, 10))

    bar() { return this.foo(); }
>bar : Symbol(AA.bar, Decl(classAbstractSuperCalls.ts, 17, 23))
>this.foo : Symbol(AA.foo, Decl(classAbstractSuperCalls.ts, 16, 10))
>this : Symbol(AA, Decl(classAbstractSuperCalls.ts, 14, 1))
>foo : Symbol(AA.foo, Decl(classAbstractSuperCalls.ts, 16, 10))
}

abstract class BB extends AA {
>BB : Symbol(BB, Decl(classAbstractSuperCalls.ts, 19, 1))
>AA : Symbol(AA, Decl(classAbstractSuperCalls.ts, 14, 1))

    abstract foo();
>foo : Symbol(BB.foo, Decl(classAbstractSuperCalls.ts, 21, 30))

    // inherits bar. But BB is abstract, so this is OK.
}

