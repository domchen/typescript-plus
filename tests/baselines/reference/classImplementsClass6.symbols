=== tests/cases/compiler/classImplementsClass6.ts ===
class A {
>A : Symbol(A, Decl(classImplementsClass6.ts, 0, 0))

    static bar(): string {
>bar : Symbol(A.bar, Decl(classImplementsClass6.ts, 0, 9))

        return "";
    }
    foo(): number { return 1; }
>foo : Symbol(A.foo, Decl(classImplementsClass6.ts, 3, 5))
}
class C implements A {
>C : Symbol(C, Decl(classImplementsClass6.ts, 5, 1))
>A : Symbol(A, Decl(classImplementsClass6.ts, 0, 0))
    
    foo() {
>foo : Symbol(C.foo, Decl(classImplementsClass6.ts, 6, 22))

        return 1;
    }
}

class C2 extends A {}
>C2 : Symbol(C2, Decl(classImplementsClass6.ts, 11, 1))
>A : Symbol(A, Decl(classImplementsClass6.ts, 0, 0))

var c: C;
>c : Symbol(c, Decl(classImplementsClass6.ts, 15, 3))
>C : Symbol(C, Decl(classImplementsClass6.ts, 5, 1))

var c2: C2;
>c2 : Symbol(c2, Decl(classImplementsClass6.ts, 16, 3))
>C2 : Symbol(C2, Decl(classImplementsClass6.ts, 11, 1))

c = c2;
>c : Symbol(c, Decl(classImplementsClass6.ts, 15, 3))
>c2 : Symbol(c2, Decl(classImplementsClass6.ts, 16, 3))

c2 = c;
>c2 : Symbol(c2, Decl(classImplementsClass6.ts, 16, 3))
>c : Symbol(c, Decl(classImplementsClass6.ts, 15, 3))

c.bar(); // error
>c : Symbol(c, Decl(classImplementsClass6.ts, 15, 3))

c2.bar(); // should error
>c2 : Symbol(c2, Decl(classImplementsClass6.ts, 16, 3))

