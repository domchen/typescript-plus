=== tests/cases/conformance/scanner/ecmascript5/scannertest1.ts ===
///<reference path='References.ts' />

class CharacterInfo {
>CharacterInfo : Symbol(CharacterInfo, Decl(scannertest1.ts, 0, 0))

    public static isDecimalDigit(c: number): boolean {
>isDecimalDigit : Symbol(CharacterInfo.isDecimalDigit, Decl(scannertest1.ts, 2, 21))
>c : Symbol(c, Decl(scannertest1.ts, 3, 33))

        return c >= CharacterCodes._0 && c <= CharacterCodes._9;
>c : Symbol(c, Decl(scannertest1.ts, 3, 33))
>c : Symbol(c, Decl(scannertest1.ts, 3, 33))
    }

    public static isHexDigit(c: number): boolean {
>isHexDigit : Symbol(CharacterInfo.isHexDigit, Decl(scannertest1.ts, 5, 5))
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))

        return isDecimalDigit(c) ||
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))

               (c >= CharacterCodes.A && c <= CharacterCodes.F) ||
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))

               (c >= CharacterCodes.a && c <= CharacterCodes.f);
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))
>c : Symbol(c, Decl(scannertest1.ts, 7, 29))
    }

    public static hexValue(c: number): number {
>hexValue : Symbol(CharacterInfo.hexValue, Decl(scannertest1.ts, 11, 5))
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

        Debug.assert(isHexDigit(c));
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

        return isDecimalDigit(c)
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

            ? (c - CharacterCodes._0)
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

            : (c >= CharacterCodes.A && c <= CharacterCodes.F)
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

                ? c - CharacterCodes.A + 10
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))

                : c - CharacterCodes.a + 10;
>c : Symbol(c, Decl(scannertest1.ts, 13, 27))
    }
}


