=== tests/cases/compiler/thisTypeInNativeThisAssignableMethods.ts ===
class A {
>A : A

    options: string[];
>options : string[]

    addOptions(options: string[]) {
>addOptions : (options: string[]) => this
>options : string[]

        if (!this.options) {
>!this.options : boolean
>this.options : string[]
>this : this
>options : string[]

            this.options = [];
>this.options = [] : undefined[]
>this.options : string[]
>this : this
>options : string[]
>[] : undefined[]
        }
        options.forEach(function (item) {
>options.forEach(function (item) {            this.options.push(item);        }, this) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function (item) {            this.options.push(item);        } : (item: string) => void
>item : string

            this.options.push(item);
>this.options.push(item) : any
>this.options.push : any
>this.options : any
>this : any
>options : any
>push : any
>item : string

        }, this);
>this : this

        return this;
>this : this
    }

    testUndefined(options: string[]) {
>testUndefined : (options: string[]) => void
>options : string[]

        const undefinedArr: Array<undefined> = []
>undefinedArr : undefined[]
>Array : T[]
>[] : undefined[]

        options.forEach(function () {
>options.forEach(function () {            undefinedArr.push(this);        }) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function () {            undefinedArr.push(this);        } : () => void

            undefinedArr.push(this);
>undefinedArr.push(this) : number
>undefinedArr.push : (...items: undefined[]) => number
>undefinedArr : undefined[]
>push : (...items: undefined[]) => number
>this : any

        }); // case1
        options.forEach(function () {
>options.forEach(function () {            undefinedArr.push(this);        }, undefined) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function () {            undefinedArr.push(this);        } : () => void

            undefinedArr.push(this);
>undefinedArr.push(this) : number
>undefinedArr.push : (...items: undefined[]) => number
>undefinedArr : undefined[]
>push : (...items: undefined[]) => number
>this : any

        }, undefined); // case2
>undefined : undefined

        options.forEach(function () {
>options.forEach(function () {            undefinedArr.push(this);        }, null) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function () {            undefinedArr.push(this);        } : () => void

            undefinedArr.push(this);
>undefinedArr.push(this) : number
>undefinedArr.push : (...items: undefined[]) => number
>undefinedArr : undefined[]
>push : (...items: undefined[]) => number
>this : any

        }, null); // case3
>null : null

        const arrLike = {} as ArrayLike<number>
>arrLike : ArrayLike<number>
>{} as ArrayLike<number> : ArrayLike<number>
>{} : {}
>ArrayLike : ArrayLike<T>

        Array.from(arrLike, function (item) {
>Array.from(arrLike, function (item) {            return this === undefined ? 2 : 1;        }, undefined) : (2 | 1)[]
>Array.from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>Array : ArrayConstructor
>from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>arrLike : ArrayLike<number>
>function (item) {            return this === undefined ? 2 : 1;        } : (this: void, item: number) => 2 | 1
>item : number

            return this === undefined ? 2 : 1;
>this === undefined ? 2 : 1 : 2 | 1
>this === undefined : boolean
>this : void
>undefined : undefined
>2 : 2
>1 : 1

        }, undefined)
>undefined : undefined

        const iterLike = [] as Iterable<number>
>iterLike : Iterable<number>
>[] as Iterable<number> : Iterable<number>
>[] : undefined[]
>Iterable : Iterable<T>

        Array.from(iterLike, function (item) {
>Array.from(iterLike, function (item) {            return this === undefined ? 2 : 1;        }, undefined) : (2 | 1)[]
>Array.from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>Array : ArrayConstructor
>from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>iterLike : Iterable<number>
>function (item) {            return this === undefined ? 2 : 1;        } : (this: void, item: number) => 2 | 1
>item : number

            return this === undefined ? 2 : 1;
>this === undefined ? 2 : 1 : 2 | 1
>this === undefined : boolean
>this : void
>undefined : undefined
>2 : 2
>1 : 1

        }, undefined)
>undefined : undefined
    }

    test(options: string[]) {
>test : (options: string[]) => void
>options : string[]

        const thisObject = {
>thisObject : { options: string[]; }
>{            options: [] as string[]        } : { options: string[]; }

            options: [] as string[]
>options : string[]
>[] as string[] : string[]
>[] : undefined[]

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : string
>options.find : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): string; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): string; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): string; }
>options : string[]
>find : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): string; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): string; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): string; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: string[]; }, val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : string
>this.options : string[]
>this : { options: string[]; }
>options : string[]
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): number; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): number; }
>options : string[]
>findIndex : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): number; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: string[]; }, val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : string
>this.options : string[]
>this : { options: string[]; }
>options : string[]
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>options : string[]
>map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: string, index: number) => any
>val : string
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>options : string[]
>some : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : string[]
>options.filter : { <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): string[]; }
>options : string[]
>filter : { <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): string[]; }
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>options : string[]
>every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: string[]; }

        const arrLike = {} as ArrayLike<number>
>arrLike : ArrayLike<number>
>{} as ArrayLike<number> : ArrayLike<number>
>{} : {}
>ArrayLike : ArrayLike<T>

        Array.from(arrLike, function (item) {
>Array.from(arrLike, function (item) {            return this.options[item].length        }, thisObject) : number[]
>Array.from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>Array : ArrayConstructor
>from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>arrLike : ArrayLike<number>
>function (item) {            return this.options[item].length        } : (this: { options: string[]; }, item: number) => number
>item : number

            return this.options[item].length
>this.options[item].length : number
>this.options[item] : string
>this.options : string[]
>this : { options: string[]; }
>options : string[]
>item : number
>length : number

        }, thisObject)
>thisObject : { options: string[]; }

        const iterLike = [] as Iterable<number>
>iterLike : Iterable<number>
>[] as Iterable<number> : Iterable<number>
>[] : undefined[]
>Iterable : Iterable<T>

        Array.from(iterLike, function (item) {
>Array.from(iterLike, function (item) {            return this.options[item].length        }, thisObject) : number[]
>Array.from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>Array : ArrayConstructor
>from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>iterLike : Iterable<number>
>function (item) {            return this.options[item].length        } : (this: { options: string[]; }, item: number) => number
>item : number

            return this.options[item].length
>this.options[item].length : number
>this.options[item] : string
>this.options : string[]
>this : { options: string[]; }
>options : string[]
>item : number
>length : number

        }, thisObject)
>thisObject : { options: string[]; }
    }

    test1(options: string[]) {
>test1 : (options: string[]) => void
>options : string[]

        const thisObject = {
>thisObject : { options: ReadonlyArray<string>; }
>{            options: [] as ReadonlyArray<string>        } : { options: ReadonlyArray<string>; }

            options: [] as ReadonlyArray<string>
>options : ReadonlyArray<string>
>[] as ReadonlyArray<string> : ReadonlyArray<string>
>[] : undefined[]
>ReadonlyArray : ReadonlyArray<T>

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : string
>options.find : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): string; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): string; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): string; }
>options : string[]
>find : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): string; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): string; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): string; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: ReadonlyArray<string>; }, val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : string
>this.options : ReadonlyArray<string>
>this : { options: ReadonlyArray<string>; }
>options : ReadonlyArray<string>
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): number; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): number; }
>options : string[]
>findIndex : { (predicate: (this: void, value: string, index: number, obj: string[]) => boolean): number; (predicate: (this: void, value: string, index: number, obj: string[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: string, index: number, obj: string[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: ReadonlyArray<string>; }, val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : string
>this.options : ReadonlyArray<string>
>this : { options: ReadonlyArray<string>; }
>options : ReadonlyArray<string>
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>options : string[]
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>options : string[]
>map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: string, index: number) => any
>val : string
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>options : string[]
>some : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : string[]
>options.filter : { <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): string[]; }
>options : string[]
>filter : { <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): string[]; }
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>options : string[]
>every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: string, index: number) => boolean
>val : string
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : string
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: ReadonlyArray<string>; }
    }

    test2(options: Int8Array[]) {
>test2 : (options: Int8Array[]) => void
>options : Int8Array[]
>Int8Array : Int8Array

        const thisObject = {
>thisObject : { options: Int8Array[]; }
>{            options: [] as Int8Array[]        } : { options: Int8Array[]; }

            options: [] as Int8Array[]
>options : Int8Array[]
>[] as Int8Array[] : Int8Array[]
>[] : undefined[]
>Int8Array : Int8Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Int8Array
>options.find : { (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean): Int8Array; (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: undefined): Int8Array; <Z>(predicate: (this: Z, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: Z): Int8Array; }
>options : Int8Array[]
>find : { (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean): Int8Array; (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: undefined): Int8Array; <Z>(predicate: (this: Z, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: Z): Int8Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Int8Array[]; }, val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : Int8Array
>this.options : Int8Array[]
>this : { options: Int8Array[]; }
>options : Int8Array[]
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean): number; (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: Z): number; }
>options : Int8Array[]
>findIndex : { (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean): number; (predicate: (this: void, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Int8Array, index: number, obj: Int8Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Int8Array[]; }, val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : Int8Array
>this.options : Int8Array[]
>this : { options: Int8Array[]; }
>options : Int8Array[]
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => void, thisArg?: any) => void
>options : Int8Array[]
>forEach : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => U, thisArg?: any) => U[]
>options : Int8Array[]
>map : <U>(callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Int8Array, index: number) => any
>val : Int8Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => boolean, thisArg?: any) => boolean
>options : Int8Array[]
>some : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Int8Array[]
>options.filter : { <S extends Int8Array>(callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => any, thisArg?: any): Int8Array[]; }
>options : Int8Array[]
>filter : { <S extends Int8Array>(callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => any, thisArg?: any): Int8Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => boolean, thisArg?: any) => boolean
>options : Int8Array[]
>every : (callbackfn: (value: Int8Array, index: number, array: Int8Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Int8Array, index: number) => boolean
>val : Int8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int8Array[]; }
    }

    test3(options: Uint8Array[]) {
>test3 : (options: Uint8Array[]) => void
>options : Uint8Array[]
>Uint8Array : Uint8Array

        const thisObject = {
>thisObject : { options: Uint8Array[]; }
>{            options: [] as Uint8Array[]        } : { options: Uint8Array[]; }

            options: [] as Uint8Array[]
>options : Uint8Array[]
>[] as Uint8Array[] : Uint8Array[]
>[] : undefined[]
>Uint8Array : Uint8Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint8Array
>options.find : { (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean): Uint8Array; (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: undefined): Uint8Array; <Z>(predicate: (this: Z, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: Z): Uint8Array; }
>options : Uint8Array[]
>find : { (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean): Uint8Array; (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: undefined): Uint8Array; <Z>(predicate: (this: Z, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: Z): Uint8Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint8Array[]; }, val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : Uint8Array
>this.options : Uint8Array[]
>this : { options: Uint8Array[]; }
>options : Uint8Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean): number; (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: Z): number; }
>options : Uint8Array[]
>findIndex : { (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean): number; (predicate: (this: void, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint8Array, index: number, obj: Uint8Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint8Array[]; }, val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : Uint8Array
>this.options : Uint8Array[]
>this : { options: Uint8Array[]; }
>options : Uint8Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => void, thisArg?: any) => void
>options : Uint8Array[]
>forEach : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => U, thisArg?: any) => U[]
>options : Uint8Array[]
>map : <U>(callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Uint8Array, index: number) => any
>val : Uint8Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => boolean, thisArg?: any) => boolean
>options : Uint8Array[]
>some : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint8Array[]
>options.filter : { <S extends Uint8Array>(callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => any, thisArg?: any): Uint8Array[]; }
>options : Uint8Array[]
>filter : { <S extends Uint8Array>(callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => any, thisArg?: any): Uint8Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => boolean, thisArg?: any) => boolean
>options : Uint8Array[]
>every : (callbackfn: (value: Uint8Array, index: number, array: Uint8Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint8Array, index: number) => boolean
>val : Uint8Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8Array[]; }
    }

    test4(options: Float32Array[]) {
>test4 : (options: Float32Array[]) => void
>options : Float32Array[]
>Float32Array : Float32Array

        const thisObject = {
>thisObject : { options: Float32Array[]; }
>{            options: [] as Float32Array[]        } : { options: Float32Array[]; }

            options: [] as Float32Array[]
>options : Float32Array[]
>[] as Float32Array[] : Float32Array[]
>[] : undefined[]
>Float32Array : Float32Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Float32Array
>options.find : { (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean): Float32Array; (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: undefined): Float32Array; <Z>(predicate: (this: Z, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: Z): Float32Array; }
>options : Float32Array[]
>find : { (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean): Float32Array; (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: undefined): Float32Array; <Z>(predicate: (this: Z, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: Z): Float32Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Float32Array[]; }, val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : Float32Array
>this.options : Float32Array[]
>this : { options: Float32Array[]; }
>options : Float32Array[]
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean): number; (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: Z): number; }
>options : Float32Array[]
>findIndex : { (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean): number; (predicate: (this: void, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Float32Array, index: number, obj: Float32Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Float32Array[]; }, val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : Float32Array
>this.options : Float32Array[]
>this : { options: Float32Array[]; }
>options : Float32Array[]
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => void, thisArg?: any) => void
>options : Float32Array[]
>forEach : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => U, thisArg?: any) => U[]
>options : Float32Array[]
>map : <U>(callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Float32Array, index: number) => any
>val : Float32Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => boolean, thisArg?: any) => boolean
>options : Float32Array[]
>some : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Float32Array[]
>options.filter : { <S extends Float32Array>(callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => any, thisArg?: any): Float32Array[]; }
>options : Float32Array[]
>filter : { <S extends Float32Array>(callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => any, thisArg?: any): Float32Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => boolean, thisArg?: any) => boolean
>options : Float32Array[]
>every : (callbackfn: (value: Float32Array, index: number, array: Float32Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Float32Array, index: number) => boolean
>val : Float32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float32Array[]; }
    }

    test5(options: Uint8ClampedArray[]) {
>test5 : (options: Uint8ClampedArray[]) => void
>options : Uint8ClampedArray[]
>Uint8ClampedArray : Uint8ClampedArray

        const thisObject = {
>thisObject : { options: Uint8ClampedArray[]; }
>{            options: [] as Uint8ClampedArray[]        } : { options: Uint8ClampedArray[]; }

            options: [] as Uint8ClampedArray[]
>options : Uint8ClampedArray[]
>[] as Uint8ClampedArray[] : Uint8ClampedArray[]
>[] : undefined[]
>Uint8ClampedArray : Uint8ClampedArray

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint8ClampedArray
>options.find : { (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean): Uint8ClampedArray; (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: undefined): Uint8ClampedArray; <Z>(predicate: (this: Z, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: Z): Uint8ClampedArray; }
>options : Uint8ClampedArray[]
>find : { (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean): Uint8ClampedArray; (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: undefined): Uint8ClampedArray; <Z>(predicate: (this: Z, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: Z): Uint8ClampedArray; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint8ClampedArray[]; }, val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : Uint8ClampedArray
>this.options : Uint8ClampedArray[]
>this : { options: Uint8ClampedArray[]; }
>options : Uint8ClampedArray[]
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean): number; (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: Z): number; }
>options : Uint8ClampedArray[]
>findIndex : { (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean): number; (predicate: (this: void, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint8ClampedArray, index: number, obj: Uint8ClampedArray[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint8ClampedArray[]; }, val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : Uint8ClampedArray
>this.options : Uint8ClampedArray[]
>this : { options: Uint8ClampedArray[]; }
>options : Uint8ClampedArray[]
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => void, thisArg?: any) => void
>options : Uint8ClampedArray[]
>forEach : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => U, thisArg?: any) => U[]
>options : Uint8ClampedArray[]
>map : <U>(callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Uint8ClampedArray, index: number) => any
>val : Uint8ClampedArray
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => boolean, thisArg?: any) => boolean
>options : Uint8ClampedArray[]
>some : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint8ClampedArray[]
>options.filter : { <S extends Uint8ClampedArray>(callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => any, thisArg?: any): Uint8ClampedArray[]; }
>options : Uint8ClampedArray[]
>filter : { <S extends Uint8ClampedArray>(callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => any, thisArg?: any): Uint8ClampedArray[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => boolean, thisArg?: any) => boolean
>options : Uint8ClampedArray[]
>every : (callbackfn: (value: Uint8ClampedArray, index: number, array: Uint8ClampedArray[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint8ClampedArray, index: number) => boolean
>val : Uint8ClampedArray
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint8ClampedArray
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint8ClampedArray[]; }
    }

    test6(options: Int16Array[]) {
>test6 : (options: Int16Array[]) => void
>options : Int16Array[]
>Int16Array : Int16Array

        const thisObject = {
>thisObject : { options: Int16Array[]; }
>{            options: [] as Int16Array[]        } : { options: Int16Array[]; }

            options: [] as Int16Array[]
>options : Int16Array[]
>[] as Int16Array[] : Int16Array[]
>[] : undefined[]
>Int16Array : Int16Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Int16Array
>options.find : { (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean): Int16Array; (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: undefined): Int16Array; <Z>(predicate: (this: Z, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: Z): Int16Array; }
>options : Int16Array[]
>find : { (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean): Int16Array; (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: undefined): Int16Array; <Z>(predicate: (this: Z, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: Z): Int16Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Int16Array[]; }, val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : Int16Array
>this.options : Int16Array[]
>this : { options: Int16Array[]; }
>options : Int16Array[]
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean): number; (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: Z): number; }
>options : Int16Array[]
>findIndex : { (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean): number; (predicate: (this: void, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Int16Array, index: number, obj: Int16Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Int16Array[]; }, val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : Int16Array
>this.options : Int16Array[]
>this : { options: Int16Array[]; }
>options : Int16Array[]
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => void, thisArg?: any) => void
>options : Int16Array[]
>forEach : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => U, thisArg?: any) => U[]
>options : Int16Array[]
>map : <U>(callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Int16Array, index: number) => any
>val : Int16Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => boolean, thisArg?: any) => boolean
>options : Int16Array[]
>some : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Int16Array[]
>options.filter : { <S extends Int16Array>(callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => any, thisArg?: any): Int16Array[]; }
>options : Int16Array[]
>filter : { <S extends Int16Array>(callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => any, thisArg?: any): Int16Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => boolean, thisArg?: any) => boolean
>options : Int16Array[]
>every : (callbackfn: (value: Int16Array, index: number, array: Int16Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Int16Array, index: number) => boolean
>val : Int16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Int16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Int16Array[]; }
    }

    test7(options: Uint16Array[]) {
>test7 : (options: Uint16Array[]) => void
>options : Uint16Array[]
>Uint16Array : Uint16Array

        const thisObject = {
>thisObject : { options: Uint16Array[]; }
>{            options: [] as Uint16Array[]        } : { options: Uint16Array[]; }

            options: [] as Uint16Array[]
>options : Uint16Array[]
>[] as Uint16Array[] : Uint16Array[]
>[] : undefined[]
>Uint16Array : Uint16Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint16Array
>options.find : { (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean): Uint16Array; (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: undefined): Uint16Array; <Z>(predicate: (this: Z, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: Z): Uint16Array; }
>options : Uint16Array[]
>find : { (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean): Uint16Array; (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: undefined): Uint16Array; <Z>(predicate: (this: Z, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: Z): Uint16Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint16Array[]; }, val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : Uint16Array
>this.options : Uint16Array[]
>this : { options: Uint16Array[]; }
>options : Uint16Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean): number; (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: Z): number; }
>options : Uint16Array[]
>findIndex : { (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean): number; (predicate: (this: void, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint16Array, index: number, obj: Uint16Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint16Array[]; }, val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : Uint16Array
>this.options : Uint16Array[]
>this : { options: Uint16Array[]; }
>options : Uint16Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => void, thisArg?: any) => void
>options : Uint16Array[]
>forEach : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => U, thisArg?: any) => U[]
>options : Uint16Array[]
>map : <U>(callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Uint16Array, index: number) => any
>val : Uint16Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => boolean, thisArg?: any) => boolean
>options : Uint16Array[]
>some : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint16Array[]
>options.filter : { <S extends Uint16Array>(callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => any, thisArg?: any): Uint16Array[]; }
>options : Uint16Array[]
>filter : { <S extends Uint16Array>(callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => any, thisArg?: any): Uint16Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => boolean, thisArg?: any) => boolean
>options : Uint16Array[]
>every : (callbackfn: (value: Uint16Array, index: number, array: Uint16Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint16Array, index: number) => boolean
>val : Uint16Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint16Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint16Array[]; }
    }

    test8(options: Uint32Array[]) {
>test8 : (options: Uint32Array[]) => void
>options : Uint32Array[]
>Uint32Array : Uint32Array

        const thisObject = {
>thisObject : { options: Uint32Array[]; }
>{            options: [] as Uint32Array[]        } : { options: Uint32Array[]; }

            options: [] as Uint32Array[]
>options : Uint32Array[]
>[] as Uint32Array[] : Uint32Array[]
>[] : undefined[]
>Uint32Array : Uint32Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint32Array
>options.find : { (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean): Uint32Array; (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: undefined): Uint32Array; <Z>(predicate: (this: Z, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: Z): Uint32Array; }
>options : Uint32Array[]
>find : { (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean): Uint32Array; (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: undefined): Uint32Array; <Z>(predicate: (this: Z, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: Z): Uint32Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint32Array[]; }, val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : Uint32Array
>this.options : Uint32Array[]
>this : { options: Uint32Array[]; }
>options : Uint32Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean): number; (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: Z): number; }
>options : Uint32Array[]
>findIndex : { (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean): number; (predicate: (this: void, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Uint32Array, index: number, obj: Uint32Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Uint32Array[]; }, val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : Uint32Array
>this.options : Uint32Array[]
>this : { options: Uint32Array[]; }
>options : Uint32Array[]
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => void, thisArg?: any) => void
>options : Uint32Array[]
>forEach : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => U, thisArg?: any) => U[]
>options : Uint32Array[]
>map : <U>(callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Uint32Array, index: number) => any
>val : Uint32Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => boolean, thisArg?: any) => boolean
>options : Uint32Array[]
>some : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Uint32Array[]
>options.filter : { <S extends Uint32Array>(callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => any, thisArg?: any): Uint32Array[]; }
>options : Uint32Array[]
>filter : { <S extends Uint32Array>(callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => any, thisArg?: any): Uint32Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => boolean, thisArg?: any) => boolean
>options : Uint32Array[]
>every : (callbackfn: (value: Uint32Array, index: number, array: Uint32Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Uint32Array, index: number) => boolean
>val : Uint32Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Uint32Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Uint32Array[]; }
    }

    test9(options: Float64Array[]) {
>test9 : (options: Float64Array[]) => void
>options : Float64Array[]
>Float64Array : Float64Array

        const thisObject = {
>thisObject : { options: Float64Array[]; }
>{            options: [] as Float64Array[]        } : { options: Float64Array[]; }

            options: [] as Float64Array[]
>options : Float64Array[]
>[] as Float64Array[] : Float64Array[]
>[] : undefined[]
>Float64Array : Float64Array

        };

        options.find(function (val, index) {
>options.find(function (val, index) {            return val === this.options[index];        }, thisObject) : Float64Array
>options.find : { (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean): Float64Array; (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: undefined): Float64Array; <Z>(predicate: (this: Z, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: Z): Float64Array; }
>options : Float64Array[]
>find : { (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean): Float64Array; (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: undefined): Float64Array; <Z>(predicate: (this: Z, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: Z): Float64Array; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Float64Array[]; }, val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : Float64Array
>this.options : Float64Array[]
>this : { options: Float64Array[]; }
>options : Float64Array[]
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.findIndex(function (val, index) {
>options.findIndex(function (val, index) {            return val === this.options[index];        }, thisObject) : number
>options.findIndex : { (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean): number; (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: Z): number; }
>options : Float64Array[]
>findIndex : { (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean): number; (predicate: (this: void, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: undefined): number; <Z>(predicate: (this: Z, value: Float64Array, index: number, obj: Float64Array[]) => boolean, thisArg: Z): number; }
>function (val, index) {            return val === this.options[index];        } : (this: { options: Float64Array[]; }, val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : Float64Array
>this.options : Float64Array[]
>this : { options: Float64Array[]; }
>options : Float64Array[]
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.forEach(function (val, index) {
>options.forEach(function (val, index) {            return val === this.options[index];        }, thisObject) : void
>options.forEach : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => void, thisArg?: any) => void
>options : Float64Array[]
>forEach : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => void, thisArg?: any) => void
>function (val, index) {            return val === this.options[index];        } : (val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.map(function (val, index) {
>options.map(function (val, index) {            if (val === this.options[index])                return this.options[index];        }, thisObject) : any[]
>options.map : <U>(callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => U, thisArg?: any) => U[]
>options : Float64Array[]
>map : <U>(callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => U, thisArg?: any) => U[]
>function (val, index) {            if (val === this.options[index])                return this.options[index];        } : (val: Float64Array, index: number) => any
>val : Float64Array
>index : number

            if (val === this.options[index])
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

                return this.options[index];
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.some(function (val, index) {
>options.some(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.some : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => boolean, thisArg?: any) => boolean
>options : Float64Array[]
>some : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.filter(function (val, index) {
>options.filter(function (val, index) {            return val === this.options[index];        }, thisObject) : Float64Array[]
>options.filter : { <S extends Float64Array>(callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => any, thisArg?: any): Float64Array[]; }
>options : Float64Array[]
>filter : { <S extends Float64Array>(callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => any, thisArg?: any): Float64Array[]; }
>function (val, index) {            return val === this.options[index];        } : (val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }

        options.every(function (val, index) {
>options.every(function (val, index) {            return val === this.options[index];        }, thisObject) : boolean
>options.every : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => boolean, thisArg?: any) => boolean
>options : Float64Array[]
>every : (callbackfn: (value: Float64Array, index: number, array: Float64Array[]) => boolean, thisArg?: any) => boolean
>function (val, index) {            return val === this.options[index];        } : (val: Float64Array, index: number) => boolean
>val : Float64Array
>index : number

            return val === this.options[index];
>val === this.options[index] : boolean
>val : Float64Array
>this.options[index] : any
>this.options : any
>this : any
>options : any
>index : number

        }, thisObject);
>thisObject : { options: Float64Array[]; }
    }
}

