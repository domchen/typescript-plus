=== tests/cases/compiler/genericClassWithStaticsUsingTypeArguments.ts ===
// Should be error to use 'T' in all declarations within Foo.
class Foo<T> {
>Foo : Foo<T>
>T : T

    static a = (n: T) => { };
>a : (n: any) => void
>(n: T) => { } : (n: any) => void
>n : any
>T : No type information available!

    static b: T;
>b : any
>T : No type information available!

    static c: T[] = [];
>c : any[]
>T : No type information available!
>[] : undefined[]

    static d = false || ((x: T) => x || undefined)(null)
>d : any
>false || ((x: T) => x || undefined)(null) : any
>false : false
>((x: T) => x || undefined)(null) : any
>((x: T) => x || undefined) : (x: any) => any
>(x: T) => x || undefined : (x: any) => any
>x : any
>T : No type information available!
>x || undefined : any
>x : any
>undefined : undefined
>null : null

    static e = function (x: T) { return null; }
>e : (x: any) => any
>function (x: T) { return null; } : (x: any) => any
>x : any
>T : No type information available!
>null : null

    static f(xs: T[]): T[] {
>f : (xs: any[]) => any[]
>xs : any[]
>T : No type information available!
>T : No type information available!

        return xs.reverse();
>xs.reverse() : any[]
>xs.reverse : () => any[]
>xs : any[]
>reverse : () => any[]
    }
}

