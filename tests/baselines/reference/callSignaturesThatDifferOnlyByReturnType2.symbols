=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType2.ts ===
// Normally it is an error to have multiple overloads which differ only by return type in a single type declaration.
// Here the multiple overloads come from multiple bases.

interface I<T> {
>I : Symbol(I, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 0, 0))
>T : Symbol(T, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 12))

    foo(x: number): T;
>foo : Symbol(I.foo, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 16))
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 4, 8))
>T : Symbol(T, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 12))
}

interface A extends I<number>, I<string> { }
>A : Symbol(A, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 5, 1))
>I : Symbol(I, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 0, 0))
>I : Symbol(I, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 0, 0))

var x: A;
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 9, 3))
>A : Symbol(A, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 5, 1))

// BUG 822524
var r = x.foo(1); // no error
>r : Symbol(r, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 11, 3))
>x.foo : Symbol(I.foo, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 16))
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 9, 3))
>foo : Symbol(I.foo, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 16))

var r2 = x.foo(''); // error
>r2 : Symbol(r2, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 12, 3))
>x.foo : Symbol(I.foo, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 16))
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 9, 3))
>foo : Symbol(I.foo, Decl(callSignaturesThatDifferOnlyByReturnType2.ts, 3, 16))

