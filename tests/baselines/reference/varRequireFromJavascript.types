=== tests/cases/conformance/salsa/use.js ===
var ex = require('./ex')
>ex : typeof import("tests/cases/conformance/salsa/ex")
>require('./ex') : typeof import("tests/cases/conformance/salsa/ex")
>require : any
>'./ex' : "./ex"

// values work
var crunch = new ex.Crunch(1);
>crunch : import("tests/cases/conformance/salsa/ex").Crunch
>new ex.Crunch(1) : import("tests/cases/conformance/salsa/ex").Crunch
>ex.Crunch : typeof import("tests/cases/conformance/salsa/ex").Crunch
>ex : typeof import("tests/cases/conformance/salsa/ex")
>Crunch : typeof import("tests/cases/conformance/salsa/ex").Crunch
>1 : 1

crunch.n
>crunch.n : number
>crunch : import("tests/cases/conformance/salsa/ex").Crunch
>n : number


// types work
/**
 * @param {ex.Crunch} wrap
 */
function f(wrap) {
>f : (wrap: import("tests/cases/conformance/salsa/ex").Crunch) => void
>wrap : import("tests/cases/conformance/salsa/ex").Crunch

    wrap.n
>wrap.n : number
>wrap : import("tests/cases/conformance/salsa/ex").Crunch
>n : number
}

=== tests/cases/conformance/salsa/ex.js ===
export class Crunch {
>Crunch : Crunch

    /** @param {number} n */
    constructor(n) {
>n : number

        this.n = n
>this.n = n : number
>this.n : number
>this : this
>n : number
>n : number
    }
    m() {
>m : () => number

        return this.n
>this.n : number
>this : this
>n : number
    }
}

