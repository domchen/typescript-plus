=== tests/cases/conformance/types/forAwait/types.forAwait.esnext.2.ts ===
declare const asyncIterable: AsyncIterable<number>;
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.2.ts, 0, 13))
>AsyncIterable : Symbol(AsyncIterable, Decl(lib.esnext.asynciterable.d.ts, --, --))

declare const iterable: Iterable<number>;
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.2.ts, 1, 13))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))

async function f() {
>f : Symbol(f, Decl(types.forAwait.esnext.2.ts, 1, 41))

    let y: number;
>y : Symbol(y, Decl(types.forAwait.esnext.2.ts, 3, 7))

    let z: string;
>z : Symbol(z, Decl(types.forAwait.esnext.2.ts, 4, 7))

    for await (const x of {}) {
>x : Symbol(x, Decl(types.forAwait.esnext.2.ts, 5, 20))
    }
    for await (y of {}) {
>y : Symbol(y, Decl(types.forAwait.esnext.2.ts, 3, 7))
    }
    for await (z of asyncIterable) {
>z : Symbol(z, Decl(types.forAwait.esnext.2.ts, 4, 7))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.2.ts, 0, 13))
    }
    for await (z of iterable) {
>z : Symbol(z, Decl(types.forAwait.esnext.2.ts, 4, 7))
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.2.ts, 1, 13))
    }
    for (const x of asyncIterable) {
>x : Symbol(x, Decl(types.forAwait.esnext.2.ts, 13, 14))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.2.ts, 0, 13))
    }
    for (y of asyncIterable) {
>y : Symbol(y, Decl(types.forAwait.esnext.2.ts, 3, 7))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.2.ts, 0, 13))
    }
}
