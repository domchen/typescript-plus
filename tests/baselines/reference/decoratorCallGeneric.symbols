=== tests/cases/conformance/decorators/decoratorCallGeneric.ts ===
interface I<T> {
>I : Symbol(I, Decl(decoratorCallGeneric.ts, 0, 0))
>T : Symbol(T, Decl(decoratorCallGeneric.ts, 0, 12))

    prototype: T,
>prototype : Symbol(I.prototype, Decl(decoratorCallGeneric.ts, 0, 16))
>T : Symbol(T, Decl(decoratorCallGeneric.ts, 0, 12))

    m: () => T
>m : Symbol(I.m, Decl(decoratorCallGeneric.ts, 1, 17))
>T : Symbol(T, Decl(decoratorCallGeneric.ts, 0, 12))
}
function dec<T>(c: I<T>) { }
>dec : Symbol(dec, Decl(decoratorCallGeneric.ts, 3, 1))
>T : Symbol(T, Decl(decoratorCallGeneric.ts, 4, 13))
>c : Symbol(c, Decl(decoratorCallGeneric.ts, 4, 16))
>I : Symbol(I, Decl(decoratorCallGeneric.ts, 0, 0))
>T : Symbol(T, Decl(decoratorCallGeneric.ts, 4, 13))

@dec
>dec : Symbol(dec, Decl(decoratorCallGeneric.ts, 3, 1))

class C {
>C : Symbol(C, Decl(decoratorCallGeneric.ts, 4, 28))

    _brand: any;
>_brand : Symbol(C._brand, Decl(decoratorCallGeneric.ts, 7, 9))

    static m() {}
>m : Symbol(C.m, Decl(decoratorCallGeneric.ts, 8, 16))
}

