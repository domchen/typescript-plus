=== tests/cases/conformance/types/rest/genericRestParameters3.ts ===
declare let f1: (x: string, ...args: [string] | [number, boolean]) => void;
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>x : string
>args : [string] | [number, boolean]

declare let f2: (x: string, y: string) => void;
>f2 : (x: string, y: string) => void
>x : string
>y : string

declare let f3: (x: string, y: number, z: boolean) => void;
>f3 : (x: string, y: number, z: boolean) => void
>x : string
>y : number
>z : boolean

declare let f4: (...args: [string, string] | [string, number, boolean]) => void;
>f4 : (...args: [string, string] | [string, number, boolean]) => void
>args : [string, string] | [string, number, boolean]

declare const tt: [string] | [number, boolean];
>tt : [string] | [number, boolean]

f1("foo", "abc");
>f1("foo", "abc") : void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>"foo" : "foo"
>"abc" : "abc"

f1("foo", 10, true);
>f1("foo", 10, true) : void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>"foo" : "foo"
>10 : 10
>true : true

f1("foo", ...tt);
>f1("foo", ...tt) : void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>"foo" : "foo"
>...tt : string | number | boolean
>tt : [string] | [number, boolean]

f1("foo", 10);  // Error
>f1("foo", 10) : void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>"foo" : "foo"
>10 : 10

f1("foo");  // Error
>f1("foo") : void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>"foo" : "foo"

f2 = f1;
>f2 = f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f2 : (x: string, y: string) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void

f3 = f1;
>f3 = f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f3 : (x: string, y: number, z: boolean) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void

f4 = f1;  // Error, misaligned complex rest types
>f4 = f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f4 : (...args: [string, string] | [string, number, boolean]) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void

f1 = f2;  // Error
>f1 = f2 : (x: string, y: string) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f2 : (x: string, y: string) => void

f1 = f3;  // Error
>f1 = f3 : (x: string, y: number, z: boolean) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f3 : (x: string, y: number, z: boolean) => void

f1 = f4;  // Error, misaligned complex rest types
>f1 = f4 : (...args: [string, string] | [string, number, boolean]) => void
>f1 : (x: string, ...args: [string] | [number, boolean]) => void
>f4 : (...args: [string, string] | [string, number, boolean]) => void

// Repro from #26110

interface CoolArray<E> extends Array<E> { 
    hello: number;
>hello : number
}

declare function foo<T extends any[]>(cb: (...args: T) => void): void;
>foo : <T extends any[]>(cb: (...args: T) => void) => void
>cb : (...args: T) => void
>args : T

foo<CoolArray<any>>();     // Error
>foo<CoolArray<any>>() : any
>foo : <T extends any[]>(cb: (...args: T) => void) => void

foo<CoolArray<any>>(100);  // Error
>foo<CoolArray<any>>(100) : any
>foo : <T extends any[]>(cb: (...args: T) => void) => void
>100 : 100

foo<CoolArray<any>>(foo);  // Error
>foo<CoolArray<any>>(foo) : any
>foo : <T extends any[]>(cb: (...args: T) => void) => void
>foo : <T extends any[]>(cb: (...args: T) => void) => void

function bar<T extends any[]>(...args: T): T {
>bar : <T extends any[]>(...args: T) => T
>args : T

    return args;
>args : T
}

let a = bar(10, 20);
>a : [number, number]
>bar(10, 20) : [number, number]
>bar : <T extends any[]>(...args: T) => T
>10 : 10
>20 : 20

let b = bar<CoolArray<number>>(10, 20);  // Error
>b : any
>bar<CoolArray<number>>(10, 20) : any
>bar : <T extends any[]>(...args: T) => T
>10 : 10
>20 : 20

declare function baz<T>(...args: CoolArray<T>): void;
>baz : <T>(...args: CoolArray<T>) => void
>args : CoolArray<T>

declare const ca: CoolArray<number>;
>ca : CoolArray<number>

baz();       // Error
>baz() : any
>baz : <T>(...args: CoolArray<T>) => void

baz(1);      // Error
>baz(1) : any
>baz : <T>(...args: CoolArray<T>) => void
>1 : 1

baz(1, 2);   // Error
>baz(1, 2) : any
>baz : <T>(...args: CoolArray<T>) => void
>1 : 1
>2 : 2

baz(...ca);  // Error
>baz(...ca) : any
>baz : <T>(...args: CoolArray<T>) => void
>...ca : number
>ca : CoolArray<number>

// Repro from #26491

declare function hmm<A extends [] | [number, string]>(...args: A): void;
>hmm : <A extends [] | [number, string]>(...args: A) => void
>args : A

hmm(); // okay, A = []
>hmm() : void
>hmm : <A extends [] | [number, string]>(...args: A) => void

hmm(1, "s"); // okay, A = [1, "s"]
>hmm(1, "s") : void
>hmm : <A extends [] | [number, string]>(...args: A) => void
>1 : 1
>"s" : "s"

hmm("what"); // no error?  A = [] | [number, string] ?
>hmm("what") : any
>hmm : <A extends [] | [number, string]>(...args: A) => void
>"what" : "what"

