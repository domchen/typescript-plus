=== tests/cases/compiler/scopeCheckStaticInitializer.ts ===
class X {
>X : Symbol(X, Decl(scopeCheckStaticInitializer.ts, 0, 0))

    static illegalBeforeProperty = X.data;
>illegalBeforeProperty : Symbol(X.illegalBeforeProperty, Decl(scopeCheckStaticInitializer.ts, 0, 9))
>X.data : Symbol(X.data, Decl(scopeCheckStaticInitializer.ts, 5, 35))
>X : Symbol(X, Decl(scopeCheckStaticInitializer.ts, 0, 0))
>data : Symbol(X.data, Decl(scopeCheckStaticInitializer.ts, 5, 35))

    static okBeforeMethod = X.method;
>okBeforeMethod : Symbol(X.okBeforeMethod, Decl(scopeCheckStaticInitializer.ts, 1, 42))
>X.method : Symbol(X.method, Decl(scopeCheckStaticInitializer.ts, 6, 21))
>X : Symbol(X, Decl(scopeCheckStaticInitializer.ts, 0, 0))
>method : Symbol(X.method, Decl(scopeCheckStaticInitializer.ts, 6, 21))

    static illegal2 = After.data;
>illegal2 : Symbol(X.illegal2, Decl(scopeCheckStaticInitializer.ts, 2, 37))
>After.data : Symbol(After.data, Decl(scopeCheckStaticInitializer.ts, 9, 13))
>After : Symbol(After, Decl(scopeCheckStaticInitializer.ts, 8, 1))
>data : Symbol(After.data, Decl(scopeCheckStaticInitializer.ts, 9, 13))

    static illegal3 = After.method;
>illegal3 : Symbol(X.illegal3, Decl(scopeCheckStaticInitializer.ts, 4, 33))
>After.method : Symbol(After.method, Decl(scopeCheckStaticInitializer.ts, 10, 21))
>After : Symbol(After, Decl(scopeCheckStaticInitializer.ts, 8, 1))
>method : Symbol(After.method, Decl(scopeCheckStaticInitializer.ts, 10, 21))

    static data = 13;
>data : Symbol(X.data, Decl(scopeCheckStaticInitializer.ts, 5, 35))

    static method() { }
>method : Symbol(X.method, Decl(scopeCheckStaticInitializer.ts, 6, 21))
}
class After {
>After : Symbol(After, Decl(scopeCheckStaticInitializer.ts, 8, 1))

    static data = 12;
>data : Symbol(After.data, Decl(scopeCheckStaticInitializer.ts, 9, 13))

    static method() { };
>method : Symbol(After.method, Decl(scopeCheckStaticInitializer.ts, 10, 21))
}


