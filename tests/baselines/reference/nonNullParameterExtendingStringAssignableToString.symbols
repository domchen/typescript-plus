=== tests/cases/compiler/nonNullParameterExtendingStringAssignableToString.ts ===
declare function foo(p: string): void;
>foo : Symbol(foo, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 0))
>p : Symbol(p, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 21))

function fn<T extends string | undefined, U extends string>(one: T, two: U) {
>fn : Symbol(fn, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 38))
>T : Symbol(T, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 12))
>U : Symbol(U, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 41))
>one : Symbol(one, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 60))
>T : Symbol(T, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 12))
>two : Symbol(two, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 67))
>U : Symbol(U, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 41))

    let three = Boolean() ? one : two;
>three : Symbol(three, Decl(nonNullParameterExtendingStringAssignableToString.ts, 3, 7))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>one : Symbol(one, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 60))
>two : Symbol(two, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 67))

    foo(one!);
>foo : Symbol(foo, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 0))
>one : Symbol(one, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 60))

    foo(two!);
>foo : Symbol(foo, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 0))
>two : Symbol(two, Decl(nonNullParameterExtendingStringAssignableToString.ts, 2, 67))

    foo(three!); // this line is the important one
>foo : Symbol(foo, Decl(nonNullParameterExtendingStringAssignableToString.ts, 0, 0))
>three : Symbol(three, Decl(nonNullParameterExtendingStringAssignableToString.ts, 3, 7))
}
