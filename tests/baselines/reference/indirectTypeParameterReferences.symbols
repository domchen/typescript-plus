=== tests/cases/compiler/indirectTypeParameterReferences.ts ===
// Repro from #19043

type B = {b: string}
>B : Symbol(B, Decl(indirectTypeParameterReferences.ts, 0, 0))
>b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 2, 10))

const flowtypes = <A>(b: B) => {
>flowtypes : Symbol(flowtypes, Decl(indirectTypeParameterReferences.ts, 4, 5))
>A : Symbol(A, Decl(indirectTypeParameterReferences.ts, 4, 19))
>b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 4, 22))
>B : Symbol(B, Decl(indirectTypeParameterReferences.ts, 0, 0))

  type Combined = A & B
>Combined : Symbol(Combined, Decl(indirectTypeParameterReferences.ts, 4, 32))
>A : Symbol(A, Decl(indirectTypeParameterReferences.ts, 4, 19))
>B : Symbol(B, Decl(indirectTypeParameterReferences.ts, 0, 0))

  const combined = (fn: (combined: Combined) => void) => null
>combined : Symbol(combined, Decl(indirectTypeParameterReferences.ts, 7, 7))
>fn : Symbol(fn, Decl(indirectTypeParameterReferences.ts, 7, 20))
>combined : Symbol(combined, Decl(indirectTypeParameterReferences.ts, 7, 25))
>Combined : Symbol(Combined, Decl(indirectTypeParameterReferences.ts, 4, 32))

  const literal = (fn: (aPlusB: A & B) => void) => null
>literal : Symbol(literal, Decl(indirectTypeParameterReferences.ts, 8, 7))
>fn : Symbol(fn, Decl(indirectTypeParameterReferences.ts, 8, 19))
>aPlusB : Symbol(aPlusB, Decl(indirectTypeParameterReferences.ts, 8, 24))
>A : Symbol(A, Decl(indirectTypeParameterReferences.ts, 4, 19))
>B : Symbol(B, Decl(indirectTypeParameterReferences.ts, 0, 0))

  return {combined, literal}
>combined : Symbol(combined, Decl(indirectTypeParameterReferences.ts, 10, 10))
>literal : Symbol(literal, Decl(indirectTypeParameterReferences.ts, 10, 19))
}

const {combined, literal} = flowtypes<{a: string}>({b: 'b-value'})
>combined : Symbol(combined, Decl(indirectTypeParameterReferences.ts, 13, 7))
>literal : Symbol(literal, Decl(indirectTypeParameterReferences.ts, 13, 16))
>flowtypes : Symbol(flowtypes, Decl(indirectTypeParameterReferences.ts, 4, 5))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 13, 39))
>b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 13, 52))

literal(aPlusB => {
>literal : Symbol(literal, Decl(indirectTypeParameterReferences.ts, 13, 16))
>aPlusB : Symbol(aPlusB, Decl(indirectTypeParameterReferences.ts, 15, 8))

  aPlusB.b
>aPlusB.b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 2, 10))
>aPlusB : Symbol(aPlusB, Decl(indirectTypeParameterReferences.ts, 15, 8))
>b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 2, 10))

  aPlusB.a
>aPlusB.a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 13, 39))
>aPlusB : Symbol(aPlusB, Decl(indirectTypeParameterReferences.ts, 15, 8))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 13, 39))

})

combined(comb => {
>combined : Symbol(combined, Decl(indirectTypeParameterReferences.ts, 13, 7))
>comb : Symbol(comb, Decl(indirectTypeParameterReferences.ts, 20, 9))

  comb.b
>comb.b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 2, 10))
>comb : Symbol(comb, Decl(indirectTypeParameterReferences.ts, 20, 9))
>b : Symbol(b, Decl(indirectTypeParameterReferences.ts, 2, 10))

  comb.a
>comb.a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 13, 39))
>comb : Symbol(comb, Decl(indirectTypeParameterReferences.ts, 20, 9))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 13, 39))

})

// Repro from #19091

declare function f<T>(a: T): { a: typeof a };
>f : Symbol(f, Decl(indirectTypeParameterReferences.ts, 23, 2))
>T : Symbol(T, Decl(indirectTypeParameterReferences.ts, 27, 19))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 27, 22))
>T : Symbol(T, Decl(indirectTypeParameterReferences.ts, 27, 19))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 27, 30))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 27, 22))

let n: number = f(2).a;
>n : Symbol(n, Decl(indirectTypeParameterReferences.ts, 28, 3))
>f(2).a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 27, 30))
>f : Symbol(f, Decl(indirectTypeParameterReferences.ts, 23, 2))
>a : Symbol(a, Decl(indirectTypeParameterReferences.ts, 27, 30))

