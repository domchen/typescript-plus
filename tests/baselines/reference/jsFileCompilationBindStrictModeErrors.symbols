=== tests/cases/compiler/a.js ===
"use strict";
var a = {
>a : Symbol(a, Decl(a.js, 1, 3))

    a: "hello", // error
>a : Symbol(a, Decl(a.js, 1, 9), Decl(a.js, 3, 10))

    b: 10,
>b : Symbol(b, Decl(a.js, 2, 15))

    a: 10 // error
>a : Symbol(a, Decl(a.js, 1, 9), Decl(a.js, 3, 10))

};
var let = 10; // error
>let : Symbol(let, Decl(a.js, 6, 3))

delete a; // error
>a : Symbol(a, Decl(a.js, 1, 3))

try {
} catch (eval) { // error
>eval : Symbol(eval, Decl(a.js, 9, 9))
}
function arguments() { // error
>arguments : Symbol(arguments, Decl(a.js, 10, 1))
}

with (a) {
>a : Symbol(a, Decl(a.js, 1, 3))

    b = 10;
}

=== tests/cases/compiler/b.js ===
// this is not in strict mode but class definitions are always in strict mode
class c {
>c : Symbol(c, Decl(b.js, 0, 0))

    a(eval) { //error
>a : Symbol(c.a, Decl(b.js, 1, 9))
>eval : Symbol(eval, Decl(b.js, 2, 6))
    }
    method() {
>method : Symbol(c.method, Decl(b.js, 3, 5))

        var let = 10; // error
>let : Symbol(let, Decl(b.js, 5, 11))
    }
}

=== tests/cases/compiler/c.js ===
export var let = 10; // external modules are automatically in strict mode
>let : Symbol(let, Decl(c.js, 0, 10))

var eval = function () {
>eval : Symbol(eval, Decl(c.js, 1, 3))

};

=== tests/cases/compiler/d.js ===
"use strict";
var x = 009; // error
>x : Symbol(x, Decl(d.js, 1, 3))

