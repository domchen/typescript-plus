=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts ===
abstract class A {
>A : Symbol(A, Decl(classAbstractOverloads.ts, 0, 0))

    abstract foo();
>foo : Symbol(A.foo, Decl(classAbstractOverloads.ts, 0, 18), Decl(classAbstractOverloads.ts, 1, 19), Decl(classAbstractOverloads.ts, 2, 28))

    abstract foo() : number;
>foo : Symbol(A.foo, Decl(classAbstractOverloads.ts, 0, 18), Decl(classAbstractOverloads.ts, 1, 19), Decl(classAbstractOverloads.ts, 2, 28))

    abstract foo();
>foo : Symbol(A.foo, Decl(classAbstractOverloads.ts, 0, 18), Decl(classAbstractOverloads.ts, 1, 19), Decl(classAbstractOverloads.ts, 2, 28))
    
    abstract bar();
>bar : Symbol(A.bar, Decl(classAbstractOverloads.ts, 3, 19), Decl(classAbstractOverloads.ts, 5, 19), Decl(classAbstractOverloads.ts, 6, 10))

    bar();
>bar : Symbol(A.bar, Decl(classAbstractOverloads.ts, 3, 19), Decl(classAbstractOverloads.ts, 5, 19), Decl(classAbstractOverloads.ts, 6, 10))

    abstract bar();
>bar : Symbol(A.bar, Decl(classAbstractOverloads.ts, 3, 19), Decl(classAbstractOverloads.ts, 5, 19), Decl(classAbstractOverloads.ts, 6, 10))
    
    abstract baz();
>baz : Symbol(A.baz, Decl(classAbstractOverloads.ts, 7, 19), Decl(classAbstractOverloads.ts, 9, 19), Decl(classAbstractOverloads.ts, 10, 10), Decl(classAbstractOverloads.ts, 11, 19))

    baz();
>baz : Symbol(A.baz, Decl(classAbstractOverloads.ts, 7, 19), Decl(classAbstractOverloads.ts, 9, 19), Decl(classAbstractOverloads.ts, 10, 10), Decl(classAbstractOverloads.ts, 11, 19))

    abstract baz();
>baz : Symbol(A.baz, Decl(classAbstractOverloads.ts, 7, 19), Decl(classAbstractOverloads.ts, 9, 19), Decl(classAbstractOverloads.ts, 10, 10), Decl(classAbstractOverloads.ts, 11, 19))

    baz() {}
>baz : Symbol(A.baz, Decl(classAbstractOverloads.ts, 7, 19), Decl(classAbstractOverloads.ts, 9, 19), Decl(classAbstractOverloads.ts, 10, 10), Decl(classAbstractOverloads.ts, 11, 19))
    
    qux();
>qux : Symbol(A.qux, Decl(classAbstractOverloads.ts, 12, 12))
}

abstract class B {
>B : Symbol(B, Decl(classAbstractOverloads.ts, 15, 1))

    abstract foo() : number;
>foo : Symbol(B.foo, Decl(classAbstractOverloads.ts, 17, 18), Decl(classAbstractOverloads.ts, 18, 28), Decl(classAbstractOverloads.ts, 20, 15), Decl(classAbstractOverloads.ts, 21, 19))

    abstract foo();
>foo : Symbol(B.foo, Decl(classAbstractOverloads.ts, 17, 18), Decl(classAbstractOverloads.ts, 18, 28), Decl(classAbstractOverloads.ts, 20, 15), Decl(classAbstractOverloads.ts, 21, 19))

    x : number;
>x : Symbol(B.x, Decl(classAbstractOverloads.ts, 19, 19))

    abstract foo();
>foo : Symbol(B.foo, Decl(classAbstractOverloads.ts, 17, 18), Decl(classAbstractOverloads.ts, 18, 28), Decl(classAbstractOverloads.ts, 20, 15), Decl(classAbstractOverloads.ts, 21, 19))

    abstract foo();
>foo : Symbol(B.foo, Decl(classAbstractOverloads.ts, 17, 18), Decl(classAbstractOverloads.ts, 18, 28), Decl(classAbstractOverloads.ts, 20, 15), Decl(classAbstractOverloads.ts, 21, 19))
}
