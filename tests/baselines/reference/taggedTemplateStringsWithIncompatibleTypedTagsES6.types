=== tests/cases/conformance/es6/templates/taggedTemplateStringsWithIncompatibleTypedTagsES6.ts ===
interface I {
>I : I

    (stringParts: TemplateStringsArray, ...rest: boolean[]): I;
>stringParts : TemplateStringsArray
>TemplateStringsArray : TemplateStringsArray
>rest : boolean[]
>I : I

    g: I;
>g : I
>I : I

    h: I;
>h : I
>I : I

    member: I;
>member : I
>I : I

    thisIsNotATag(x: string): void
>thisIsNotATag : (x: string) => void
>x : string

    [x: number]: I;
>x : number
>I : I
}

var f: I;
>f : I
>I : I

f `abc`
>f `abc` : I
>f : I
>`abc` : "abc"

f `abc${1}def${2}ghi`;
>f `abc${1}def${2}ghi` : any
>f : I
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2

f `abc`.member
>f `abc`.member : I
>f `abc` : I
>f : I
>`abc` : "abc"
>member : I

f `abc${1}def${2}ghi`.member;
>f `abc${1}def${2}ghi`.member : any
>f `abc${1}def${2}ghi` : any
>f : I
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2
>member : any

f `abc`["member"];
>f `abc`["member"] : I
>f `abc` : I
>f : I
>`abc` : "abc"
>"member" : "member"

f `abc${1}def${2}ghi`["member"];
>f `abc${1}def${2}ghi`["member"] : any
>f `abc${1}def${2}ghi` : any
>f : I
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2
>"member" : "member"

f `abc`[0].member `abc${1}def${2}ghi`;
>f `abc`[0].member `abc${1}def${2}ghi` : any
>f `abc`[0].member : I
>f `abc`[0] : I
>f `abc` : I
>f : I
>`abc` : "abc"
>0 : 0
>member : I
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2

f `abc${1}def${2}ghi`["member"].member `abc${1}def${2}ghi`;
>f `abc${1}def${2}ghi`["member"].member `abc${1}def${2}ghi` : any
>f `abc${1}def${2}ghi`["member"].member : any
>f `abc${1}def${2}ghi`["member"] : any
>f `abc${1}def${2}ghi` : any
>f : I
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2
>"member" : "member"
>member : any
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2

f `abc${ true }def${ true }ghi`["member"].member `abc${ 1 }def${ 2 }ghi`;
>f `abc${ true }def${ true }ghi`["member"].member `abc${ 1 }def${ 2 }ghi` : any
>f `abc${ true }def${ true }ghi`["member"].member : I
>f `abc${ true }def${ true }ghi`["member"] : I
>f `abc${ true }def${ true }ghi` : I
>f : I
>`abc${ true }def${ true }ghi` : string
>true : true
>true : true
>"member" : "member"
>member : I
>`abc${ 1 }def${ 2 }ghi` : string
>1 : 1
>2 : 2

f.thisIsNotATag(`abc`);
>f.thisIsNotATag(`abc`) : void
>f.thisIsNotATag : (x: string) => void
>f : I
>thisIsNotATag : (x: string) => void
>`abc` : "abc"

f.thisIsNotATag(`abc${1}def${2}ghi`);
>f.thisIsNotATag(`abc${1}def${2}ghi`) : void
>f.thisIsNotATag : (x: string) => void
>f : I
>thisIsNotATag : (x: string) => void
>`abc${1}def${2}ghi` : string
>1 : 1
>2 : 2

