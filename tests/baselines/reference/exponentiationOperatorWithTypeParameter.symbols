=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithTypeParameter.ts ===
// type parameter type is not valid for arithmetic operand
function foo<T>(t: T) {
>foo : Symbol(foo, Decl(exponentiationOperatorWithTypeParameter.ts, 0, 0))
>T : Symbol(T, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 13))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>T : Symbol(T, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 13))

    var a: any;
>a : Symbol(a, Decl(exponentiationOperatorWithTypeParameter.ts, 2, 7))

    var b: boolean;
>b : Symbol(b, Decl(exponentiationOperatorWithTypeParameter.ts, 3, 7))

    var c: number;
>c : Symbol(c, Decl(exponentiationOperatorWithTypeParameter.ts, 4, 7))

    var d: string;
>d : Symbol(d, Decl(exponentiationOperatorWithTypeParameter.ts, 5, 7))

    var e: {};
>e : Symbol(e, Decl(exponentiationOperatorWithTypeParameter.ts, 6, 7))

    var r1a1 = a ** t;
>r1a1 : Symbol(r1a1, Decl(exponentiationOperatorWithTypeParameter.ts, 8, 7))
>a : Symbol(a, Decl(exponentiationOperatorWithTypeParameter.ts, 2, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))

    var r2a1 = t ** a;
>r2a1 : Symbol(r2a1, Decl(exponentiationOperatorWithTypeParameter.ts, 9, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>a : Symbol(a, Decl(exponentiationOperatorWithTypeParameter.ts, 2, 7))

    var r1b1 = b ** t;
>r1b1 : Symbol(r1b1, Decl(exponentiationOperatorWithTypeParameter.ts, 10, 7))
>b : Symbol(b, Decl(exponentiationOperatorWithTypeParameter.ts, 3, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))

    var r2b1 = t ** b;
>r2b1 : Symbol(r2b1, Decl(exponentiationOperatorWithTypeParameter.ts, 11, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>b : Symbol(b, Decl(exponentiationOperatorWithTypeParameter.ts, 3, 7))

    var r1c1 = c ** t;
>r1c1 : Symbol(r1c1, Decl(exponentiationOperatorWithTypeParameter.ts, 12, 7))
>c : Symbol(c, Decl(exponentiationOperatorWithTypeParameter.ts, 4, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))

    var r2c1 = t ** c;
>r2c1 : Symbol(r2c1, Decl(exponentiationOperatorWithTypeParameter.ts, 13, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>c : Symbol(c, Decl(exponentiationOperatorWithTypeParameter.ts, 4, 7))

    var r1d1 = d ** t;
>r1d1 : Symbol(r1d1, Decl(exponentiationOperatorWithTypeParameter.ts, 14, 7))
>d : Symbol(d, Decl(exponentiationOperatorWithTypeParameter.ts, 5, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))

    var r2d1 = t ** d;
>r2d1 : Symbol(r2d1, Decl(exponentiationOperatorWithTypeParameter.ts, 15, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>d : Symbol(d, Decl(exponentiationOperatorWithTypeParameter.ts, 5, 7))

    var r1e1 = e ** t;
>r1e1 : Symbol(r1e1, Decl(exponentiationOperatorWithTypeParameter.ts, 16, 7))
>e : Symbol(e, Decl(exponentiationOperatorWithTypeParameter.ts, 6, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))

    var r2e1 = t ** d;
>r2e1 : Symbol(r2e1, Decl(exponentiationOperatorWithTypeParameter.ts, 17, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>d : Symbol(d, Decl(exponentiationOperatorWithTypeParameter.ts, 5, 7))

    var r1f1 = t ** t;
>r1f1 : Symbol(r1f1, Decl(exponentiationOperatorWithTypeParameter.ts, 18, 7))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
>t : Symbol(t, Decl(exponentiationOperatorWithTypeParameter.ts, 1, 16))
}
