=== tests/cases/compiler/discriminatedUnionErrorMessage.ts ===
type Square = { kind: "sq", size: number }
>Square : Symbol(Square, Decl(discriminatedUnionErrorMessage.ts, 0, 0))
>kind : Symbol(kind, Decl(discriminatedUnionErrorMessage.ts, 0, 15))
>size : Symbol(size, Decl(discriminatedUnionErrorMessage.ts, 0, 27))

type Rectangle = { kind: "rt", x: number, y: number }
>Rectangle : Symbol(Rectangle, Decl(discriminatedUnionErrorMessage.ts, 0, 42))
>kind : Symbol(kind, Decl(discriminatedUnionErrorMessage.ts, 1, 18))
>x : Symbol(x, Decl(discriminatedUnionErrorMessage.ts, 1, 30))
>y : Symbol(y, Decl(discriminatedUnionErrorMessage.ts, 1, 41))

type Circle = { kind: "cr", radius: number }
>Circle : Symbol(Circle, Decl(discriminatedUnionErrorMessage.ts, 1, 53))
>kind : Symbol(kind, Decl(discriminatedUnionErrorMessage.ts, 2, 15))
>radius : Symbol(radius, Decl(discriminatedUnionErrorMessage.ts, 2, 27))

type Shape =
>Shape : Symbol(Shape, Decl(discriminatedUnionErrorMessage.ts, 2, 44))

    | Square
>Square : Symbol(Square, Decl(discriminatedUnionErrorMessage.ts, 0, 0))

    | Rectangle
>Rectangle : Symbol(Rectangle, Decl(discriminatedUnionErrorMessage.ts, 0, 42))

    | Circle;
>Circle : Symbol(Circle, Decl(discriminatedUnionErrorMessage.ts, 1, 53))

let shape: Shape = {
>shape : Symbol(shape, Decl(discriminatedUnionErrorMessage.ts, 7, 3))
>Shape : Symbol(Shape, Decl(discriminatedUnionErrorMessage.ts, 2, 44))

    kind: "sq",
>kind : Symbol(kind, Decl(discriminatedUnionErrorMessage.ts, 7, 20))

    x: 12,
>x : Symbol(x, Decl(discriminatedUnionErrorMessage.ts, 8, 15))

    y: 13,
>y : Symbol(y, Decl(discriminatedUnionErrorMessage.ts, 9, 10))
}

