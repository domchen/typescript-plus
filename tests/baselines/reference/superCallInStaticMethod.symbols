=== tests/cases/compiler/superCallInStaticMethod.ts ===
class Doing {
>Doing : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))

    public static staticMethod() {
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
    }
}

class Other extends Doing {
>Other : Symbol(Other, Decl(superCallInStaticMethod.ts, 3, 1))
>Doing : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))

    // in static method
    public static staticMethod() {
>staticMethod : Symbol(Other.staticMethod, Decl(superCallInStaticMethod.ts, 5, 27))

        super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
    }

    // in a lambda inside a static method
    public static lambdaInsideAStaticMethod() {
>lambdaInsideAStaticMethod : Symbol(Other.lambdaInsideAStaticMethod, Decl(superCallInStaticMethod.ts, 9, 5))

        () => {
            super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
        }
    }

    // in an object literal inside a static method
    public static objectLiteralInsideAStaticMethod() {
>objectLiteralInsideAStaticMethod : Symbol(Other.objectLiteralInsideAStaticMethod, Decl(superCallInStaticMethod.ts, 16, 5))

        return {
            a: () => {
>a : Symbol(a, Decl(superCallInStaticMethod.ts, 20, 16))

                super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))

            },
            b: super.staticMethod()
>b : Symbol(b, Decl(superCallInStaticMethod.ts, 23, 14))
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))

        };
    }

    // in a getter
    public static get staticGetter() {
>staticGetter : Symbol(Other.staticGetter, Decl(superCallInStaticMethod.ts, 26, 5), Decl(superCallInStaticMethod.ts, 33, 5))

        super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))

        return 0;
    }

    // in a setter
    public static set staticGetter(value: number) {
>staticGetter : Symbol(Other.staticGetter, Decl(superCallInStaticMethod.ts, 26, 5), Decl(superCallInStaticMethod.ts, 33, 5))
>value : Symbol(value, Decl(superCallInStaticMethod.ts, 36, 35))

        super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
    }

    // in static method
    public static initializerInAStaticMethod(a = super.staticMethod()) {
>initializerInAStaticMethod : Symbol(Other.initializerInAStaticMethod, Decl(superCallInStaticMethod.ts, 38, 5))
>a : Symbol(a, Decl(superCallInStaticMethod.ts, 41, 45))
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))

        super.staticMethod();
>super.staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
>super : Symbol(Doing, Decl(superCallInStaticMethod.ts, 0, 0))
>staticMethod : Symbol(Doing.staticMethod, Decl(superCallInStaticMethod.ts, 0, 13))
    }
}

