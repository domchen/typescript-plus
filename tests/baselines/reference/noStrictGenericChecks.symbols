=== tests/cases/compiler/noStrictGenericChecks.ts ===
type A = <T, U>(x: T, y: U) => [T, U];
>A : Symbol(A, Decl(noStrictGenericChecks.ts, 0, 0))
>T : Symbol(T, Decl(noStrictGenericChecks.ts, 0, 10))
>U : Symbol(U, Decl(noStrictGenericChecks.ts, 0, 12))
>x : Symbol(x, Decl(noStrictGenericChecks.ts, 0, 16))
>T : Symbol(T, Decl(noStrictGenericChecks.ts, 0, 10))
>y : Symbol(y, Decl(noStrictGenericChecks.ts, 0, 21))
>U : Symbol(U, Decl(noStrictGenericChecks.ts, 0, 12))
>T : Symbol(T, Decl(noStrictGenericChecks.ts, 0, 10))
>U : Symbol(U, Decl(noStrictGenericChecks.ts, 0, 12))

type B = <S>(x: S, y: S) => [S, S];
>B : Symbol(B, Decl(noStrictGenericChecks.ts, 0, 38))
>S : Symbol(S, Decl(noStrictGenericChecks.ts, 1, 10))
>x : Symbol(x, Decl(noStrictGenericChecks.ts, 1, 13))
>S : Symbol(S, Decl(noStrictGenericChecks.ts, 1, 10))
>y : Symbol(y, Decl(noStrictGenericChecks.ts, 1, 18))
>S : Symbol(S, Decl(noStrictGenericChecks.ts, 1, 10))
>S : Symbol(S, Decl(noStrictGenericChecks.ts, 1, 10))
>S : Symbol(S, Decl(noStrictGenericChecks.ts, 1, 10))

function f(a: A, b: B) {
>f : Symbol(f, Decl(noStrictGenericChecks.ts, 1, 35))
>a : Symbol(a, Decl(noStrictGenericChecks.ts, 3, 11))
>A : Symbol(A, Decl(noStrictGenericChecks.ts, 0, 0))
>b : Symbol(b, Decl(noStrictGenericChecks.ts, 3, 16))
>B : Symbol(B, Decl(noStrictGenericChecks.ts, 0, 38))

    a = b;  // Error disabled here
>a : Symbol(a, Decl(noStrictGenericChecks.ts, 3, 11))
>b : Symbol(b, Decl(noStrictGenericChecks.ts, 3, 16))

    b = a;  // Ok
>b : Symbol(b, Decl(noStrictGenericChecks.ts, 3, 16))
>a : Symbol(a, Decl(noStrictGenericChecks.ts, 3, 11))
}

