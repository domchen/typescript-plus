=== tests/cases/compiler/objectLiteralParameterResolution.ts ===
interface Foo{
>Foo : Symbol(Foo, Decl(objectLiteralParameterResolution.ts, 0, 0))

    extend<T>(target: T, ...objs: any[]): T;
>extend : Symbol(Foo.extend, Decl(objectLiteralParameterResolution.ts, 0, 14), Decl(objectLiteralParameterResolution.ts, 1, 44))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 1, 11))
>target : Symbol(target, Decl(objectLiteralParameterResolution.ts, 1, 14))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 1, 11))
>objs : Symbol(objs, Decl(objectLiteralParameterResolution.ts, 1, 24))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 1, 11))

    extend<T>(deep: boolean, target: T, ...objs: any[]): T;
>extend : Symbol(Foo.extend, Decl(objectLiteralParameterResolution.ts, 0, 14), Decl(objectLiteralParameterResolution.ts, 1, 44))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 2, 11))
>deep : Symbol(deep, Decl(objectLiteralParameterResolution.ts, 2, 14))
>target : Symbol(target, Decl(objectLiteralParameterResolution.ts, 2, 28))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 2, 11))
>objs : Symbol(objs, Decl(objectLiteralParameterResolution.ts, 2, 39))
>T : Symbol(T, Decl(objectLiteralParameterResolution.ts, 2, 11))
}
declare var $: Foo;
>$ : Symbol($, Decl(objectLiteralParameterResolution.ts, 4, 11))
>Foo : Symbol(Foo, Decl(objectLiteralParameterResolution.ts, 0, 0))

var s = $.extend({
>s : Symbol(s, Decl(objectLiteralParameterResolution.ts, 5, 3))
>$.extend : Symbol(Foo.extend, Decl(objectLiteralParameterResolution.ts, 0, 14), Decl(objectLiteralParameterResolution.ts, 1, 44))
>$ : Symbol($, Decl(objectLiteralParameterResolution.ts, 4, 11))
>extend : Symbol(Foo.extend, Decl(objectLiteralParameterResolution.ts, 0, 14), Decl(objectLiteralParameterResolution.ts, 1, 44))

    type: "GET" ,
>type : Symbol(type, Decl(objectLiteralParameterResolution.ts, 5, 18))

    data: "data" ,
>data : Symbol(data, Decl(objectLiteralParameterResolution.ts, 6, 17))

    success: wrapSuccessCallback(requestContext, callback) ,
>success : Symbol(success, Decl(objectLiteralParameterResolution.ts, 7, 18))

    error: wrapErrorCallback(requestContext, errorCallback) ,
>error : Symbol(error, Decl(objectLiteralParameterResolution.ts, 8, 60))

    dataType: "json" ,
>dataType : Symbol(dataType, Decl(objectLiteralParameterResolution.ts, 9, 61))

    converters: { "text json": "" },
>converters : Symbol(converters, Decl(objectLiteralParameterResolution.ts, 10, 22))
>"text json" : Symbol("text json", Decl(objectLiteralParameterResolution.ts, 11, 17))

    traditional: true ,
>traditional : Symbol(traditional, Decl(objectLiteralParameterResolution.ts, 11, 36))

    timeout: 12,
>timeout : Symbol(timeout, Decl(objectLiteralParameterResolution.ts, 12, 23))

    }, "");

