=== tests/cases/conformance/parser/ecmascriptnext/forAwait/topLevelWithDeclIsError.ts ===
for await (const x of y) {
>x : any
>y : any
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/topLevelWithExprIsError.ts ===
for await (x of y) {
>x : any
>y : any
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/forAwaitInWithDeclIsError.ts ===
for await (const x in y) {
>x : string
>y : any
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/forAwaitInWithExprIsError.ts ===
for await (x in y) {
>x : any
>y : any
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inFunctionDeclWithDeclIsError.ts ===
function f5() {
>f5 : () => void

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inFunctionDeclWithExprIsError.ts ===
function f6() {
>f6 : () => void

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inAsyncFunctionWithDeclIsOk.ts ===
async function f7() {
>f7 : () => Promise<void>

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inAsyncFunctionWithExprIsOk.ts ===
async function f8() {
>f8 : () => Promise<void>

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inAsyncGeneratorWithDeclIsOk.ts ===
async function* f9() {
>f9 : () => AsyncIterableIterator<any>

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inAsyncGeneratorWithExpressionIsOk.ts ===
async function* f10() {
>f10 : () => AsyncIterableIterator<any>

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inGeneratorWithDeclIsError.ts ===
function* f11() {
>f11 : () => IterableIterator<any>

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/forAwait/inGeneratorWithExprIsError.ts ===
function* f12() {
>f12 : () => IterableIterator<any>

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
