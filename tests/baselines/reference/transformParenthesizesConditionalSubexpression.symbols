=== tests/cases/compiler/transformParenthesizesConditionalSubexpression.ts ===
var K = 'k'
>K : Symbol(K, Decl(transformParenthesizesConditionalSubexpression.ts, 0, 3))

var a = { p  : (true ? { [K] : 'v'}        : null) }
>a : Symbol(a, Decl(transformParenthesizesConditionalSubexpression.ts, 1, 3))
>p : Symbol(p, Decl(transformParenthesizesConditionalSubexpression.ts, 1, 9))
>[K] : Symbol([K], Decl(transformParenthesizesConditionalSubexpression.ts, 1, 24))
>K : Symbol(K, Decl(transformParenthesizesConditionalSubexpression.ts, 0, 3))

var b = { p  : (true ? { [K] : 'v'} as any : null) }
>b : Symbol(b, Decl(transformParenthesizesConditionalSubexpression.ts, 2, 3))
>p : Symbol(p, Decl(transformParenthesizesConditionalSubexpression.ts, 2, 9))
>[K] : Symbol([K], Decl(transformParenthesizesConditionalSubexpression.ts, 2, 24))
>K : Symbol(K, Decl(transformParenthesizesConditionalSubexpression.ts, 0, 3))

