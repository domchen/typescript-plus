=== tests/cases/compiler/reachabilityChecks6.ts ===
function f0(x) {
>f0 : Symbol(f0, Decl(reachabilityChecks6.ts, 0, 0))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 0, 12))

    while (true);
}

function f1(x) {
>f1 : Symbol(f1, Decl(reachabilityChecks6.ts, 2, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 4, 12))

    if (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 4, 12))

        return 1
    }
}

function f2(x) {
>f2 : Symbol(f2, Decl(reachabilityChecks6.ts, 8, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 10, 12))

    while (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 10, 12))

        throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
    return 1;
}

function f3(x) {
>f3 : Symbol(f3, Decl(reachabilityChecks6.ts, 15, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 17, 12))

    while (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 17, 12))

        throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
}

function f3_1 (x) {
>f3_1 : Symbol(f3_1, Decl(reachabilityChecks6.ts, 21, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 23, 15))

    while (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 23, 15))
    }
    throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
}

function f4(x) {
>f4 : Symbol(f4, Decl(reachabilityChecks6.ts, 27, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 29, 12))

    try {
        if (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 29, 12))

            return 1;
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 35, 11))
    }
}

function f5(x) {
>f5 : Symbol(f5, Decl(reachabilityChecks6.ts, 37, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 39, 12))

    try {
        if (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 39, 12))

            return 1;
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 45, 11))

        return 2;
    }
}

function f6(x) {
>f6 : Symbol(f6, Decl(reachabilityChecks6.ts, 48, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 50, 12))

    try {
        if (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 50, 12))

            return 1;
        }
        else 
        {
            throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 60, 11))
    }
}

function f7(x) {
>f7 : Symbol(f7, Decl(reachabilityChecks6.ts, 62, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 64, 12))

    try {
        if (x) {
>x : Symbol(x, Decl(reachabilityChecks6.ts, 64, 12))

            return 1;
        }
        else {
            throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 73, 11))

        return 1;
    }
}

function f8(x) {
>f8 : Symbol(f8, Decl(reachabilityChecks6.ts, 76, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 78, 12))

    try {
        if (true) {
            x++;
>x : Symbol(x, Decl(reachabilityChecks6.ts, 78, 12))
        }
        else {
            return 1;
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 87, 11))

        return 1;
    }
}

function f9(x) {
>f9 : Symbol(f9, Decl(reachabilityChecks6.ts, 90, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 92, 12))

    try {
        while (false) {
            return 1;
        }
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 98, 11))

        return 1;
    }
}

function f10(x) {
>f10 : Symbol(f10, Decl(reachabilityChecks6.ts, 101, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 103, 13))

    try {
        do {
            x++;
>x : Symbol(x, Decl(reachabilityChecks6.ts, 103, 13))

        } while (true);
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 109, 11))

        return 1;
    }
}

function f11(x) {
>f11 : Symbol(f11, Decl(reachabilityChecks6.ts, 112, 1))
>x : Symbol(x, Decl(reachabilityChecks6.ts, 114, 13))

    test:
    try {
        do {
            do {
                break test;
            } while (true);
            x++;
>x : Symbol(x, Decl(reachabilityChecks6.ts, 114, 13))

        } while (true);
    }
    catch (e) {
>e : Symbol(e, Decl(reachabilityChecks6.ts, 124, 11))

        return 1;
    }
}
