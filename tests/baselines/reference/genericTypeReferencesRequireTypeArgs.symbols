=== tests/cases/compiler/genericTypeReferencesRequireTypeArgs.ts ===
class C<T> {
>C : Symbol(C, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 0))
>T : Symbol(T, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 8))

   foo(): T { return null }
>foo : Symbol(C.foo, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 12))
>T : Symbol(T, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 8))
}
interface I<T> {
>I : Symbol(I, Decl(genericTypeReferencesRequireTypeArgs.ts, 2, 1))
>T : Symbol(T, Decl(genericTypeReferencesRequireTypeArgs.ts, 3, 12))

   bar(): T;
>bar : Symbol(I.bar, Decl(genericTypeReferencesRequireTypeArgs.ts, 3, 16))
>T : Symbol(T, Decl(genericTypeReferencesRequireTypeArgs.ts, 3, 12))
}
var c1: C; // error
>c1 : Symbol(c1, Decl(genericTypeReferencesRequireTypeArgs.ts, 6, 3))
>C : Symbol(C, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 0))

var i1: I; // error
>i1 : Symbol(i1, Decl(genericTypeReferencesRequireTypeArgs.ts, 7, 3))
>I : Symbol(I, Decl(genericTypeReferencesRequireTypeArgs.ts, 2, 1))

var c2: C<I>; // should be an error
>c2 : Symbol(c2, Decl(genericTypeReferencesRequireTypeArgs.ts, 8, 3))
>C : Symbol(C, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 0))
>I : Symbol(I, Decl(genericTypeReferencesRequireTypeArgs.ts, 2, 1))

var i2: I<C>; // should be an error
>i2 : Symbol(i2, Decl(genericTypeReferencesRequireTypeArgs.ts, 9, 3))
>I : Symbol(I, Decl(genericTypeReferencesRequireTypeArgs.ts, 2, 1))
>C : Symbol(C, Decl(genericTypeReferencesRequireTypeArgs.ts, 0, 0))

