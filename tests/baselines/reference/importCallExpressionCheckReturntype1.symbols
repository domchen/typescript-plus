=== tests/cases/conformance/dynamicImport/anotherModule.ts ===
export class D{}
>D : Symbol(D, Decl(anotherModule.ts, 0, 0))

=== tests/cases/conformance/dynamicImport/defaultPath.ts ===
export class C {}
>C : Symbol(C, Decl(defaultPath.ts, 0, 0))

=== tests/cases/conformance/dynamicImport/1.ts ===
import * as defaultModule from "./defaultPath";
>defaultModule : Symbol(defaultModule, Decl(1.ts, 0, 6))

import * as anotherModule from "./anotherModule";
>anotherModule : Symbol(anotherModule, Decl(1.ts, 1, 6))

let p1: Promise<typeof anotherModule> = import("./defaultPath");
>p1 : Symbol(p1, Decl(1.ts, 3, 3))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>anotherModule : Symbol(anotherModule, Decl(1.ts, 1, 6))
>"./defaultPath" : Symbol(defaultModule, Decl(defaultPath.ts, 0, 0))

let p2 = import("./defaultPath") as Promise<typeof anotherModule>;
>p2 : Symbol(p2, Decl(1.ts, 4, 3))
>"./defaultPath" : Symbol(defaultModule, Decl(defaultPath.ts, 0, 0))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>anotherModule : Symbol(anotherModule, Decl(1.ts, 1, 6))

let p3: Promise<any> = import("./defaultPath");
>p3 : Symbol(p3, Decl(1.ts, 5, 3))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>"./defaultPath" : Symbol(defaultModule, Decl(defaultPath.ts, 0, 0))

