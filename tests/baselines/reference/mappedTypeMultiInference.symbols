=== tests/cases/compiler/mappedTypeMultiInference.ts ===
interface Style {
>Style : Symbol(Style, Decl(mappedTypeMultiInference.ts, 0, 0))

    flashy: any;
>flashy : Symbol(Style.flashy, Decl(mappedTypeMultiInference.ts, 0, 17))
}

declare function mergeStyleSets<K extends string>(
>mergeStyleSets : Symbol(mergeStyleSets, Decl(mappedTypeMultiInference.ts, 2, 1))
>K : Symbol(K, Decl(mappedTypeMultiInference.ts, 4, 32))

    ...cssSets: { [P in K]?: Style }[]): { [P in K]: Style };
>cssSets : Symbol(cssSets, Decl(mappedTypeMultiInference.ts, 4, 50))
>P : Symbol(P, Decl(mappedTypeMultiInference.ts, 5, 19))
>K : Symbol(K, Decl(mappedTypeMultiInference.ts, 4, 32))
>Style : Symbol(Style, Decl(mappedTypeMultiInference.ts, 0, 0))
>P : Symbol(P, Decl(mappedTypeMultiInference.ts, 5, 44))
>K : Symbol(K, Decl(mappedTypeMultiInference.ts, 4, 32))
>Style : Symbol(Style, Decl(mappedTypeMultiInference.ts, 0, 0))

// Expected:
//   let x: {
//       a: Style;
//       b: Style;
//   }
let x = mergeStyleSets(
>x : Symbol(x, Decl(mappedTypeMultiInference.ts, 12, 3))
>mergeStyleSets : Symbol(mergeStyleSets, Decl(mappedTypeMultiInference.ts, 2, 1))

    {},
    {
        a: { flashy: true },
>a : Symbol(a, Decl(mappedTypeMultiInference.ts, 14, 5))
>flashy : Symbol(flashy, Decl(mappedTypeMultiInference.ts, 15, 12))

    },
    {
        b: { flashy: true },
>b : Symbol(b, Decl(mappedTypeMultiInference.ts, 17, 5))
>flashy : Symbol(flashy, Decl(mappedTypeMultiInference.ts, 18, 12))

    },
)
