=== tests/cases/compiler/literalsInComputedProperties1.ts ===
let x = {
>x : Symbol(x, Decl(literalsInComputedProperties1.ts, 0, 3))

    1:1,
>1 : Symbol(1, Decl(literalsInComputedProperties1.ts, 0, 9))

    [2]:1,
>[2] : Symbol([2], Decl(literalsInComputedProperties1.ts, 1, 8))
>2 : Symbol([2], Decl(literalsInComputedProperties1.ts, 1, 8))

    "3":1,
>"3" : Symbol("3", Decl(literalsInComputedProperties1.ts, 2, 10))

    ["4"]:1
>["4"] : Symbol(["4"], Decl(literalsInComputedProperties1.ts, 3, 10))
>"4" : Symbol(["4"], Decl(literalsInComputedProperties1.ts, 3, 10))
}
x[1].toExponential();
>x[1].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(literalsInComputedProperties1.ts, 0, 3))
>1 : Symbol(1, Decl(literalsInComputedProperties1.ts, 0, 9))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

x[2].toExponential();
>x[2].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(literalsInComputedProperties1.ts, 0, 3))
>2 : Symbol([2], Decl(literalsInComputedProperties1.ts, 1, 8))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

x[3].toExponential();
>x[3].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(literalsInComputedProperties1.ts, 0, 3))
>3 : Symbol("3", Decl(literalsInComputedProperties1.ts, 2, 10))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

x[4].toExponential();
>x[4].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(literalsInComputedProperties1.ts, 0, 3))
>4 : Symbol(["4"], Decl(literalsInComputedProperties1.ts, 3, 10))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

interface A {
>A : Symbol(A, Decl(literalsInComputedProperties1.ts, 9, 21))

    1:number;
>1 : Symbol(A[1], Decl(literalsInComputedProperties1.ts, 11, 13))

    [2]:number;
>[2] : Symbol(A[2], Decl(literalsInComputedProperties1.ts, 12, 13))
>2 : Symbol(A[2], Decl(literalsInComputedProperties1.ts, 12, 13))

    "3":number;
>"3" : Symbol(A["3"], Decl(literalsInComputedProperties1.ts, 13, 15))

    ["4"]:number;
>["4"] : Symbol(A["4"], Decl(literalsInComputedProperties1.ts, 14, 15))
>"4" : Symbol(A["4"], Decl(literalsInComputedProperties1.ts, 14, 15))
}

let y:A;
>y : Symbol(y, Decl(literalsInComputedProperties1.ts, 18, 3))
>A : Symbol(A, Decl(literalsInComputedProperties1.ts, 9, 21))

y[1].toExponential();
>y[1].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(literalsInComputedProperties1.ts, 18, 3))
>1 : Symbol(A[1], Decl(literalsInComputedProperties1.ts, 11, 13))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

y[2].toExponential();
>y[2].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(literalsInComputedProperties1.ts, 18, 3))
>2 : Symbol(A[2], Decl(literalsInComputedProperties1.ts, 12, 13))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

y[3].toExponential();
>y[3].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(literalsInComputedProperties1.ts, 18, 3))
>3 : Symbol(A["3"], Decl(literalsInComputedProperties1.ts, 13, 15))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

y[4].toExponential();
>y[4].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(literalsInComputedProperties1.ts, 18, 3))
>4 : Symbol(A["4"], Decl(literalsInComputedProperties1.ts, 14, 15))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

class C {
>C : Symbol(C, Decl(literalsInComputedProperties1.ts, 22, 21))

    1:number;
>1 : Symbol(C[1], Decl(literalsInComputedProperties1.ts, 24, 9))

    [2]:number;
>[2] : Symbol(C[2], Decl(literalsInComputedProperties1.ts, 25, 13))
>2 : Symbol(C[2], Decl(literalsInComputedProperties1.ts, 25, 13))

    "3":number;
>"3" : Symbol(C["3"], Decl(literalsInComputedProperties1.ts, 26, 15))

    ["4"]:number;
>["4"] : Symbol(C["4"], Decl(literalsInComputedProperties1.ts, 27, 15))
>"4" : Symbol(C["4"], Decl(literalsInComputedProperties1.ts, 27, 15))
}

let z:C;
>z : Symbol(z, Decl(literalsInComputedProperties1.ts, 31, 3))
>C : Symbol(C, Decl(literalsInComputedProperties1.ts, 22, 21))

z[1].toExponential();
>z[1].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>z : Symbol(z, Decl(literalsInComputedProperties1.ts, 31, 3))
>1 : Symbol(C[1], Decl(literalsInComputedProperties1.ts, 24, 9))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

z[2].toExponential();
>z[2].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>z : Symbol(z, Decl(literalsInComputedProperties1.ts, 31, 3))
>2 : Symbol(C[2], Decl(literalsInComputedProperties1.ts, 25, 13))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

z[3].toExponential();
>z[3].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>z : Symbol(z, Decl(literalsInComputedProperties1.ts, 31, 3))
>3 : Symbol(C["3"], Decl(literalsInComputedProperties1.ts, 26, 15))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

z[4].toExponential();
>z[4].toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>z : Symbol(z, Decl(literalsInComputedProperties1.ts, 31, 3))
>4 : Symbol(C["4"], Decl(literalsInComputedProperties1.ts, 27, 15))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

enum X {
>X : Symbol(X, Decl(literalsInComputedProperties1.ts, 35, 21))

    1 = 1,
>1 : Symbol(X[1], Decl(literalsInComputedProperties1.ts, 37, 8))

    [2] = 2,
>[2] : Symbol(X[2], Decl(literalsInComputedProperties1.ts, 38, 10))
>2 : Symbol(X[2], Decl(literalsInComputedProperties1.ts, 38, 10))

    "3" = 3,
>"3" : Symbol(X["3"], Decl(literalsInComputedProperties1.ts, 39, 12))

    ["4"] = 4,
>["4"] : Symbol(X["4"], Decl(literalsInComputedProperties1.ts, 40, 12))
>"4" : Symbol(X["4"], Decl(literalsInComputedProperties1.ts, 40, 12))

    "foo" = 5,
>"foo" : Symbol(X["foo"], Decl(literalsInComputedProperties1.ts, 41, 14))

    ["bar"] = 6
>["bar"] : Symbol(X["bar"], Decl(literalsInComputedProperties1.ts, 42, 14))
>"bar" : Symbol(X["bar"], Decl(literalsInComputedProperties1.ts, 42, 14))
}

let a = X["foo"];
>a : Symbol(a, Decl(literalsInComputedProperties1.ts, 46, 3))
>X : Symbol(X, Decl(literalsInComputedProperties1.ts, 35, 21))
>"foo" : Symbol(X["foo"], Decl(literalsInComputedProperties1.ts, 41, 14))

let a0 = X["bar"];
>a0 : Symbol(a0, Decl(literalsInComputedProperties1.ts, 47, 3))
>X : Symbol(X, Decl(literalsInComputedProperties1.ts, 35, 21))
>"bar" : Symbol(X["bar"], Decl(literalsInComputedProperties1.ts, 42, 14))

// TODO: make sure that enum still disallow template literals as member names
