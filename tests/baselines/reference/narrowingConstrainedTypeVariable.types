=== tests/cases/conformance/types/typeRelationships/instanceOf/narrowingConstrainedTypeVariable.ts ===
// Repro from #20138

class C { }
>C : C

function f1<T extends C>(v: T | string): void {
>f1 : <T extends C>(v: string | T) => void
>T : T
>C : C
>v : string | T
>T : T

    if (v instanceof C) {
>v instanceof C : boolean
>v : string | T
>C : typeof C

        const x: T = v;
>x : T
>T : T
>v : T
    }
    else {
        const s: string = v;
>s : string
>v : string
    }
}

class D { }
>D : D

function f2<T extends C, U extends D>(v: T | U) {
>f2 : <T extends C, U extends D>(v: T | U) => void
>T : T
>C : C
>U : U
>D : D
>v : T | U
>T : T
>U : U

    if (v instanceof C) {
>v instanceof C : boolean
>v : T | U
>C : typeof C

        const x: T = v;
>x : T
>T : T
>v : T
    }
    else {
        const y: U = v;
>y : U
>U : U
>v : U
    }
}

class E { x: string | undefined }
>E : E
>x : string | undefined

function f3<T extends E>(v: T | { x: string }) {
>f3 : <T extends E>(v: T | { x: string; }) => void
>T : T
>E : E
>v : T | { x: string; }
>T : T
>x : string

    if (v instanceof E) {
>v instanceof E : boolean
>v : T | { x: string; }
>E : typeof E

        const x: T = v;
>x : T
>T : T
>v : T
    }
    else {
        const y: { x: string } = v;
>y : { x: string; }
>x : string
>v : { x: string; }
    }
}

