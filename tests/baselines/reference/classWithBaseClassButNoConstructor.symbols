=== tests/cases/conformance/classes/members/constructorFunctionTypes/classWithBaseClassButNoConstructor.ts ===
class Base {
>Base : Symbol(Base, Decl(classWithBaseClassButNoConstructor.ts, 0, 0))

    constructor(x: number) { }
>x : Symbol(x, Decl(classWithBaseClassButNoConstructor.ts, 1, 16))
}

class C extends Base {
>C : Symbol(C, Decl(classWithBaseClassButNoConstructor.ts, 2, 1))
>Base : Symbol(Base, Decl(classWithBaseClassButNoConstructor.ts, 0, 0))

    foo: string;
>foo : Symbol(C.foo, Decl(classWithBaseClassButNoConstructor.ts, 4, 22))
}

var r = C;
>r : Symbol(r, Decl(classWithBaseClassButNoConstructor.ts, 8, 3))
>C : Symbol(C, Decl(classWithBaseClassButNoConstructor.ts, 2, 1))

var c = new C(); // error
>c : Symbol(c, Decl(classWithBaseClassButNoConstructor.ts, 9, 3))
>C : Symbol(C, Decl(classWithBaseClassButNoConstructor.ts, 2, 1))

var c2 = new C(1); // ok
>c2 : Symbol(c2, Decl(classWithBaseClassButNoConstructor.ts, 10, 3))
>C : Symbol(C, Decl(classWithBaseClassButNoConstructor.ts, 2, 1))

class Base2<T,U> {
>Base2 : Symbol(Base2, Decl(classWithBaseClassButNoConstructor.ts, 10, 18))
>T : Symbol(T, Decl(classWithBaseClassButNoConstructor.ts, 12, 12))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 12, 14))

    constructor(x: T) { }
>x : Symbol(x, Decl(classWithBaseClassButNoConstructor.ts, 13, 16))
>T : Symbol(T, Decl(classWithBaseClassButNoConstructor.ts, 12, 12))
}

class D<T,U> extends Base2<T,U> {
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))
>T : Symbol(T, Decl(classWithBaseClassButNoConstructor.ts, 16, 8))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 16, 10))
>Base2 : Symbol(Base2, Decl(classWithBaseClassButNoConstructor.ts, 10, 18))
>T : Symbol(T, Decl(classWithBaseClassButNoConstructor.ts, 16, 8))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 16, 10))

    foo: U;
>foo : Symbol(D.foo, Decl(classWithBaseClassButNoConstructor.ts, 16, 33))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 16, 10))
}

var r2 = D;
>r2 : Symbol(r2, Decl(classWithBaseClassButNoConstructor.ts, 20, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

var d = new D(); // error
>d : Symbol(d, Decl(classWithBaseClassButNoConstructor.ts, 21, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

var d2 = new D(1); // ok
>d2 : Symbol(d2, Decl(classWithBaseClassButNoConstructor.ts, 22, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

// specialized base class
class D2<T, U> extends Base2<string, number> {
>D2 : Symbol(D2, Decl(classWithBaseClassButNoConstructor.ts, 22, 18))
>T : Symbol(T, Decl(classWithBaseClassButNoConstructor.ts, 25, 9))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 25, 11))
>Base2 : Symbol(Base2, Decl(classWithBaseClassButNoConstructor.ts, 10, 18))

    foo: U;
>foo : Symbol(D2.foo, Decl(classWithBaseClassButNoConstructor.ts, 25, 46))
>U : Symbol(U, Decl(classWithBaseClassButNoConstructor.ts, 25, 11))
}

var r3 = D2;
>r3 : Symbol(r3, Decl(classWithBaseClassButNoConstructor.ts, 29, 3))
>D2 : Symbol(D2, Decl(classWithBaseClassButNoConstructor.ts, 22, 18))

var d3 = new D(); // error
>d3 : Symbol(d3, Decl(classWithBaseClassButNoConstructor.ts, 30, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

var d4 = new D(1); // ok
>d4 : Symbol(d4, Decl(classWithBaseClassButNoConstructor.ts, 31, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

class D3 extends Base2<string, number> {
>D3 : Symbol(D3, Decl(classWithBaseClassButNoConstructor.ts, 31, 18))
>Base2 : Symbol(Base2, Decl(classWithBaseClassButNoConstructor.ts, 10, 18))

    foo: string;
>foo : Symbol(D3.foo, Decl(classWithBaseClassButNoConstructor.ts, 33, 40))
}

var r4 = D3;
>r4 : Symbol(r4, Decl(classWithBaseClassButNoConstructor.ts, 37, 3))
>D3 : Symbol(D3, Decl(classWithBaseClassButNoConstructor.ts, 31, 18))

var d5 = new D(); // error
>d5 : Symbol(d5, Decl(classWithBaseClassButNoConstructor.ts, 38, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

var d6 = new D(1); // ok
>d6 : Symbol(d6, Decl(classWithBaseClassButNoConstructor.ts, 39, 3))
>D : Symbol(D, Decl(classWithBaseClassButNoConstructor.ts, 14, 1))

