=== tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts ===
// name
class StaticName {
>StaticName : Symbol(StaticName, Decl(staticPropertyNameConflicts.ts, 0, 0))

    static name: number; // error
>name : Symbol(StaticName.name, Decl(staticPropertyNameConflicts.ts, 1, 18))

    name: string; // ok
>name : Symbol(StaticName.name, Decl(staticPropertyNameConflicts.ts, 2, 24))
}

class StaticNameFn {
>StaticNameFn : Symbol(StaticNameFn, Decl(staticPropertyNameConflicts.ts, 4, 1))

    static name() {} // error
>name : Symbol(StaticNameFn.name, Decl(staticPropertyNameConflicts.ts, 6, 20))

    name() {} // ok
>name : Symbol(StaticNameFn.name, Decl(staticPropertyNameConflicts.ts, 7, 20))
}

// length
class StaticLength {
>StaticLength : Symbol(StaticLength, Decl(staticPropertyNameConflicts.ts, 9, 1))

    static length: number; // error
>length : Symbol(StaticLength.length, Decl(staticPropertyNameConflicts.ts, 12, 20))

    length: string; // ok
>length : Symbol(StaticLength.length, Decl(staticPropertyNameConflicts.ts, 13, 26))
}

class StaticLengthFn {
>StaticLengthFn : Symbol(StaticLengthFn, Decl(staticPropertyNameConflicts.ts, 15, 1))

    static length() {} // error
>length : Symbol(StaticLengthFn.length, Decl(staticPropertyNameConflicts.ts, 17, 22))

    length() {} // ok
>length : Symbol(StaticLengthFn.length, Decl(staticPropertyNameConflicts.ts, 18, 22))
}

// prototype
class StaticPrototype {
>StaticPrototype : Symbol(StaticPrototype, Decl(staticPropertyNameConflicts.ts, 20, 1))

    static prototype: number; // error
>prototype : Symbol(StaticPrototype.prototype, Decl(staticPropertyNameConflicts.ts, 23, 23))

    prototype: string; // ok
>prototype : Symbol(StaticPrototype.prototype, Decl(staticPropertyNameConflicts.ts, 24, 29))
}

class StaticPrototypeFn {
>StaticPrototypeFn : Symbol(StaticPrototypeFn, Decl(staticPropertyNameConflicts.ts, 26, 1))

    static prototype() {} // error
>prototype : Symbol(StaticPrototypeFn.prototype, Decl(staticPropertyNameConflicts.ts, 28, 25))

    prototype() {} // ok
>prototype : Symbol(StaticPrototypeFn.prototype, Decl(staticPropertyNameConflicts.ts, 29, 25))
}

// caller
class StaticCaller {
>StaticCaller : Symbol(StaticCaller, Decl(staticPropertyNameConflicts.ts, 31, 1))

    static caller: number; // error
>caller : Symbol(StaticCaller.caller, Decl(staticPropertyNameConflicts.ts, 34, 20))

    caller: string; // ok
>caller : Symbol(StaticCaller.caller, Decl(staticPropertyNameConflicts.ts, 35, 26))
}

class StaticCallerFn {
>StaticCallerFn : Symbol(StaticCallerFn, Decl(staticPropertyNameConflicts.ts, 37, 1))

    static caller() {} // error
>caller : Symbol(StaticCallerFn.caller, Decl(staticPropertyNameConflicts.ts, 39, 22))

    caller() {} // ok
>caller : Symbol(StaticCallerFn.caller, Decl(staticPropertyNameConflicts.ts, 40, 22))
}

// arguments
class StaticArguments {
>StaticArguments : Symbol(StaticArguments, Decl(staticPropertyNameConflicts.ts, 42, 1))

    static arguments: number; // error
>arguments : Symbol(StaticArguments.arguments, Decl(staticPropertyNameConflicts.ts, 45, 23))

    arguments: string; // ok
>arguments : Symbol(StaticArguments.arguments, Decl(staticPropertyNameConflicts.ts, 46, 29))
}

class StaticArgumentsFn {
>StaticArgumentsFn : Symbol(StaticArgumentsFn, Decl(staticPropertyNameConflicts.ts, 48, 1))

    static arguments() {} // error
>arguments : Symbol(StaticArgumentsFn.arguments, Decl(staticPropertyNameConflicts.ts, 50, 25))

    arguments() {} // ok
>arguments : Symbol(StaticArgumentsFn.arguments, Decl(staticPropertyNameConflicts.ts, 51, 25))
}



// === Static properties on anonymous classes ===

// name
var StaticName_Anonymous = class {
>StaticName_Anonymous : Symbol(StaticName_Anonymous, Decl(staticPropertyNameConflicts.ts, 60, 3))

    static name: number; // error
>name : Symbol(StaticName_Anonymous.name, Decl(staticPropertyNameConflicts.ts, 60, 34))

    name: string; // ok
>name : Symbol(StaticName_Anonymous.name, Decl(staticPropertyNameConflicts.ts, 61, 24))
}

var StaticNameFn_Anonymous = class {
>StaticNameFn_Anonymous : Symbol(StaticNameFn_Anonymous, Decl(staticPropertyNameConflicts.ts, 65, 3))

    static name() {} // error
>name : Symbol(StaticNameFn_Anonymous.name, Decl(staticPropertyNameConflicts.ts, 65, 36))

    name() {} // ok
>name : Symbol(StaticNameFn_Anonymous.name, Decl(staticPropertyNameConflicts.ts, 66, 20))
}

// length
var StaticLength_Anonymous = class {
>StaticLength_Anonymous : Symbol(StaticLength_Anonymous, Decl(staticPropertyNameConflicts.ts, 71, 3))

    static length: number; // error
>length : Symbol(StaticLength_Anonymous.length, Decl(staticPropertyNameConflicts.ts, 71, 36))

    length: string; // ok
>length : Symbol(StaticLength_Anonymous.length, Decl(staticPropertyNameConflicts.ts, 72, 26))
}

var StaticLengthFn_Anonymous = class {
>StaticLengthFn_Anonymous : Symbol(StaticLengthFn_Anonymous, Decl(staticPropertyNameConflicts.ts, 76, 3))

    static length() {} // error
>length : Symbol(StaticLengthFn_Anonymous.length, Decl(staticPropertyNameConflicts.ts, 76, 38))

    length() {} // ok
>length : Symbol(StaticLengthFn_Anonymous.length, Decl(staticPropertyNameConflicts.ts, 77, 22))
}

// prototype
var StaticPrototype_Anonymous = class {
>StaticPrototype_Anonymous : Symbol(StaticPrototype_Anonymous, Decl(staticPropertyNameConflicts.ts, 82, 3))

    static prototype: number; // error
>prototype : Symbol(StaticPrototype_Anonymous.prototype, Decl(staticPropertyNameConflicts.ts, 82, 39))

    prototype: string; // ok
>prototype : Symbol(StaticPrototype_Anonymous.prototype, Decl(staticPropertyNameConflicts.ts, 83, 29))
}

var StaticPrototypeFn_Anonymous = class {
>StaticPrototypeFn_Anonymous : Symbol(StaticPrototypeFn_Anonymous, Decl(staticPropertyNameConflicts.ts, 87, 3))

    static prototype() {} // error
>prototype : Symbol(StaticPrototypeFn_Anonymous.prototype, Decl(staticPropertyNameConflicts.ts, 87, 41))

    prototype() {} // ok
>prototype : Symbol(StaticPrototypeFn_Anonymous.prototype, Decl(staticPropertyNameConflicts.ts, 88, 25))
}

// caller
var StaticCaller_Anonymous = class {
>StaticCaller_Anonymous : Symbol(StaticCaller_Anonymous, Decl(staticPropertyNameConflicts.ts, 93, 3))

    static caller: number; // error
>caller : Symbol(StaticCaller_Anonymous.caller, Decl(staticPropertyNameConflicts.ts, 93, 36))

    caller: string; // ok
>caller : Symbol(StaticCaller_Anonymous.caller, Decl(staticPropertyNameConflicts.ts, 94, 26))
}

var StaticCallerFn_Anonymous = class {
>StaticCallerFn_Anonymous : Symbol(StaticCallerFn_Anonymous, Decl(staticPropertyNameConflicts.ts, 98, 3))

    static caller() {} // error
>caller : Symbol(StaticCallerFn_Anonymous.caller, Decl(staticPropertyNameConflicts.ts, 98, 38))

    caller() {} // ok
>caller : Symbol(StaticCallerFn_Anonymous.caller, Decl(staticPropertyNameConflicts.ts, 99, 22))
}

// arguments
var StaticArguments_Anonymous = class {
>StaticArguments_Anonymous : Symbol(StaticArguments_Anonymous, Decl(staticPropertyNameConflicts.ts, 104, 3))

    static arguments: number; // error
>arguments : Symbol(StaticArguments_Anonymous.arguments, Decl(staticPropertyNameConflicts.ts, 104, 39))

    arguments: string; // ok
>arguments : Symbol(StaticArguments_Anonymous.arguments, Decl(staticPropertyNameConflicts.ts, 105, 29))
}

var StaticArgumentsFn_Anonymous = class {
>StaticArgumentsFn_Anonymous : Symbol(StaticArgumentsFn_Anonymous, Decl(staticPropertyNameConflicts.ts, 109, 3))

    static arguments() {} // error
>arguments : Symbol(StaticArgumentsFn_Anonymous.arguments, Decl(staticPropertyNameConflicts.ts, 109, 41))

    arguments() {} // ok
>arguments : Symbol(StaticArgumentsFn_Anonymous.arguments, Decl(staticPropertyNameConflicts.ts, 110, 25))
}


// === Static properties on default exported classes ===

// name
module TestOnDefaultExportedClass_1 {
>TestOnDefaultExportedClass_1 : Symbol(TestOnDefaultExportedClass_1, Decl(staticPropertyNameConflicts.ts, 112, 1))

    class StaticName {
>StaticName : Symbol(StaticName, Decl(staticPropertyNameConflicts.ts, 118, 37))

        static name: number; // error
>name : Symbol(StaticName.name, Decl(staticPropertyNameConflicts.ts, 119, 22))

        name: string; // ok
>name : Symbol(StaticName.name, Decl(staticPropertyNameConflicts.ts, 120, 28))
    }
}

module TestOnDefaultExportedClass_2 {
>TestOnDefaultExportedClass_2 : Symbol(TestOnDefaultExportedClass_2, Decl(staticPropertyNameConflicts.ts, 123, 1))

    class StaticNameFn {
>StaticNameFn : Symbol(StaticNameFn, Decl(staticPropertyNameConflicts.ts, 125, 37))

        static name() {} // error
>name : Symbol(StaticNameFn.name, Decl(staticPropertyNameConflicts.ts, 126, 24))

        name() {} // ok
>name : Symbol(StaticNameFn.name, Decl(staticPropertyNameConflicts.ts, 127, 24))
    }
}

// length
module TestOnDefaultExportedClass_3 {
>TestOnDefaultExportedClass_3 : Symbol(TestOnDefaultExportedClass_3, Decl(staticPropertyNameConflicts.ts, 130, 1))

    export default class StaticLength {
>StaticLength : Symbol(StaticLength, Decl(staticPropertyNameConflicts.ts, 133, 37))

        static length: number; // error
>length : Symbol(StaticLength.length, Decl(staticPropertyNameConflicts.ts, 134, 39))

        length: string; // ok
>length : Symbol(StaticLength.length, Decl(staticPropertyNameConflicts.ts, 135, 30))
    }
}

module TestOnDefaultExportedClass_4 {
>TestOnDefaultExportedClass_4 : Symbol(TestOnDefaultExportedClass_4, Decl(staticPropertyNameConflicts.ts, 138, 1))

    export default class StaticLengthFn {
>StaticLengthFn : Symbol(StaticLengthFn, Decl(staticPropertyNameConflicts.ts, 140, 37))

        static length() {} // error
>length : Symbol(StaticLengthFn.length, Decl(staticPropertyNameConflicts.ts, 141, 41))

        length() {} // ok
>length : Symbol(StaticLengthFn.length, Decl(staticPropertyNameConflicts.ts, 142, 26))
    }
}

// prototype
module TestOnDefaultExportedClass_5 {    
>TestOnDefaultExportedClass_5 : Symbol(TestOnDefaultExportedClass_5, Decl(staticPropertyNameConflicts.ts, 145, 1))

    export default class StaticPrototype {
>StaticPrototype : Symbol(StaticPrototype, Decl(staticPropertyNameConflicts.ts, 148, 37))

        static prototype: number; // error
>prototype : Symbol(StaticPrototype.prototype, Decl(staticPropertyNameConflicts.ts, 149, 42))

        prototype: string; // ok
>prototype : Symbol(StaticPrototype.prototype, Decl(staticPropertyNameConflicts.ts, 150, 33))
    }
}

module TestOnDefaultExportedClass_6 {
>TestOnDefaultExportedClass_6 : Symbol(TestOnDefaultExportedClass_6, Decl(staticPropertyNameConflicts.ts, 153, 1))

    export default class StaticPrototypeFn {
>StaticPrototypeFn : Symbol(StaticPrototypeFn, Decl(staticPropertyNameConflicts.ts, 155, 37))

        static prototype() {} // error
>prototype : Symbol(StaticPrototypeFn.prototype, Decl(staticPropertyNameConflicts.ts, 156, 44))

        prototype() {} // ok
>prototype : Symbol(StaticPrototypeFn.prototype, Decl(staticPropertyNameConflicts.ts, 157, 29))
    }
}

// caller
module TestOnDefaultExportedClass_7 {
>TestOnDefaultExportedClass_7 : Symbol(TestOnDefaultExportedClass_7, Decl(staticPropertyNameConflicts.ts, 160, 1))

    export default class StaticCaller {
>StaticCaller : Symbol(StaticCaller, Decl(staticPropertyNameConflicts.ts, 163, 37))

        static caller: number; // error
>caller : Symbol(StaticCaller.caller, Decl(staticPropertyNameConflicts.ts, 164, 39))

        caller: string; // ok
>caller : Symbol(StaticCaller.caller, Decl(staticPropertyNameConflicts.ts, 165, 30))
    }
}

module TestOnDefaultExportedClass_8 {
>TestOnDefaultExportedClass_8 : Symbol(TestOnDefaultExportedClass_8, Decl(staticPropertyNameConflicts.ts, 168, 1))

    export default class StaticCallerFn {
>StaticCallerFn : Symbol(StaticCallerFn, Decl(staticPropertyNameConflicts.ts, 170, 37))

        static caller() {} // error
>caller : Symbol(StaticCallerFn.caller, Decl(staticPropertyNameConflicts.ts, 171, 41))

        caller() {} // ok
>caller : Symbol(StaticCallerFn.caller, Decl(staticPropertyNameConflicts.ts, 172, 26))
    }
}

// arguments
module TestOnDefaultExportedClass_9 {
>TestOnDefaultExportedClass_9 : Symbol(TestOnDefaultExportedClass_9, Decl(staticPropertyNameConflicts.ts, 175, 1))

    export default class StaticArguments {
>StaticArguments : Symbol(StaticArguments, Decl(staticPropertyNameConflicts.ts, 178, 37))

        static arguments: number; // error
>arguments : Symbol(StaticArguments.arguments, Decl(staticPropertyNameConflicts.ts, 179, 42))

        arguments: string; // ok
>arguments : Symbol(StaticArguments.arguments, Decl(staticPropertyNameConflicts.ts, 180, 33))
    }
}

module TestOnDefaultExportedClass_10 {
>TestOnDefaultExportedClass_10 : Symbol(TestOnDefaultExportedClass_10, Decl(staticPropertyNameConflicts.ts, 183, 1))

    export default class StaticArgumentsFn {
>StaticArgumentsFn : Symbol(StaticArgumentsFn, Decl(staticPropertyNameConflicts.ts, 185, 38))

        static arguments() {} // error
>arguments : Symbol(StaticArgumentsFn.arguments, Decl(staticPropertyNameConflicts.ts, 186, 44))

        arguments() {} // ok
>arguments : Symbol(StaticArgumentsFn.arguments, Decl(staticPropertyNameConflicts.ts, 187, 29))
    }
}
