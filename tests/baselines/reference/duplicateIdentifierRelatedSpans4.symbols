=== tests/cases/compiler/file1.ts ===
interface TopLevel {
>TopLevel : Symbol(TopLevel, Decl(file1.ts, 0, 0), Decl(file2.ts, 0, 0))

    duplicate1: () => string;
>duplicate1 : Symbol(TopLevel.duplicate1, Decl(file1.ts, 0, 20))

    duplicate2: () => string;
>duplicate2 : Symbol(TopLevel.duplicate2, Decl(file1.ts, 1, 29))

    duplicate3: () => string;
>duplicate3 : Symbol(TopLevel.duplicate3, Decl(file1.ts, 2, 29))

    duplicate4: () => string;
>duplicate4 : Symbol(TopLevel.duplicate4, Decl(file1.ts, 3, 29))

    duplicate5: () => string;
>duplicate5 : Symbol(TopLevel.duplicate5, Decl(file1.ts, 4, 29))

    duplicate6: () => string;
>duplicate6 : Symbol(TopLevel.duplicate6, Decl(file1.ts, 5, 29))

    duplicate7: () => string;
>duplicate7 : Symbol(TopLevel.duplicate7, Decl(file1.ts, 6, 29))

    duplicate8: () => string;
>duplicate8 : Symbol(TopLevel.duplicate8, Decl(file1.ts, 7, 29))
}
=== tests/cases/compiler/file2.ts ===
interface TopLevel {
>TopLevel : Symbol(TopLevel, Decl(file1.ts, 0, 0), Decl(file2.ts, 0, 0))

    duplicate1(): number;
>duplicate1 : Symbol(TopLevel.duplicate1, Decl(file2.ts, 0, 20))

    duplicate2(): number;
>duplicate2 : Symbol(TopLevel.duplicate2, Decl(file2.ts, 1, 25))

    duplicate3(): number;
>duplicate3 : Symbol(TopLevel.duplicate3, Decl(file2.ts, 2, 25))

    duplicate4(): number;
>duplicate4 : Symbol(TopLevel.duplicate4, Decl(file2.ts, 3, 25))

    duplicate5(): number;
>duplicate5 : Symbol(TopLevel.duplicate5, Decl(file2.ts, 4, 25))

    duplicate6(): number;
>duplicate6 : Symbol(TopLevel.duplicate6, Decl(file2.ts, 5, 25))

    duplicate7(): number;
>duplicate7 : Symbol(TopLevel.duplicate7, Decl(file2.ts, 6, 25))

    duplicate8(): number;
>duplicate8 : Symbol(TopLevel.duplicate8, Decl(file2.ts, 7, 25))
}

