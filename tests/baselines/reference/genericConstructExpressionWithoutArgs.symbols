=== tests/cases/compiler/genericConstructExpressionWithoutArgs.ts ===
class B { }
>B : Symbol(B, Decl(genericConstructExpressionWithoutArgs.ts, 0, 0))

var b = new B; // no error
>b : Symbol(b, Decl(genericConstructExpressionWithoutArgs.ts, 1, 3))
>B : Symbol(B, Decl(genericConstructExpressionWithoutArgs.ts, 0, 0))
 
class C<T> {
>C : Symbol(C, Decl(genericConstructExpressionWithoutArgs.ts, 1, 14))
>T : Symbol(T, Decl(genericConstructExpressionWithoutArgs.ts, 3, 8))

   x: T;
>x : Symbol(C.x, Decl(genericConstructExpressionWithoutArgs.ts, 3, 12))
>T : Symbol(T, Decl(genericConstructExpressionWithoutArgs.ts, 3, 8))
}

var c = new C // C<any>
>c : Symbol(c, Decl(genericConstructExpressionWithoutArgs.ts, 7, 3))
>C : Symbol(C, Decl(genericConstructExpressionWithoutArgs.ts, 1, 14))

var c2 = new C<number> // error, type params are actually part of the arg list so you need both
>c2 : Symbol(c2, Decl(genericConstructExpressionWithoutArgs.ts, 8, 3))
>C : Symbol(C, Decl(genericConstructExpressionWithoutArgs.ts, 1, 14))

