=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer.ts ===
// index signatures must be compatible in assignments

interface Base { foo: string; }
>Base : Base
>foo : string

interface Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : string

interface Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : string

class A {
>A : A

    [x: string]: Base;
>x : string
>Base : Base
}

var a: A;
>a : A
>A : A

var b: { [x: string]: Derived; }
>b : { [x: string]: Derived; }
>x : string
>Derived : Derived

a = b; // ok
>a = b : { [x: string]: Derived; }
>a : A
>b : { [x: string]: Derived; }

b = a; // error
>b = a : A
>b : { [x: string]: Derived; }
>a : A

var b2: { [x: string]: Derived2; }
>b2 : { [x: string]: Derived2; }
>x : string
>Derived2 : Derived2

a = b2; // ok
>a = b2 : { [x: string]: Derived2; }
>a : A
>b2 : { [x: string]: Derived2; }

b2 = a; // error
>b2 = a : A
>b2 : { [x: string]: Derived2; }
>a : A

module Generics {
>Generics : typeof Generics

    class A<T extends Base> {
>A : A<T>
>T : T
>Base : Base

        [x: string]: T;
>x : string
>T : T
    }

    class B extends A<Base> {
>B : B
>A : A<Base>
>Base : Base

        [x: string]: Derived; // ok
>x : string
>Derived : Derived
    }

    var b1: { [x: string]: Derived; };
>b1 : { [x: string]: Derived; }
>x : string
>Derived : Derived

    var a1: A<Base>;
>a1 : A<Base>
>A : A<T>
>Base : Base

    a1 = b1; // ok
>a1 = b1 : { [x: string]: Derived; }
>a1 : A<Base>
>b1 : { [x: string]: Derived; }

    b1 = a1; // error
>b1 = a1 : A<Base>
>b1 : { [x: string]: Derived; }
>a1 : A<Base>

    class B2 extends A<Base> {
>B2 : B2
>A : A<Base>
>Base : Base

        [x: string]: Derived2; // ok
>x : string
>Derived2 : Derived2
    }

    var b2: { [x: string]: Derived2; };
>b2 : { [x: string]: Derived2; }
>x : string
>Derived2 : Derived2

    a1 = b2; // ok
>a1 = b2 : { [x: string]: Derived2; }
>a1 : A<Base>
>b2 : { [x: string]: Derived2; }

    b2 = a1; // error
>b2 = a1 : A<Base>
>b2 : { [x: string]: Derived2; }
>a1 : A<Base>

    function foo<T extends Base>() {
>foo : <T extends Base>() => void
>T : T
>Base : Base

        var b3: { [x: string]: Derived; };
>b3 : { [x: string]: Derived; }
>x : string
>Derived : Derived

        var a3: A<T>;
>a3 : A<T>
>A : A<T>
>T : T

        a3 = b3; // error
>a3 = b3 : { [x: string]: Derived; }
>a3 : A<T>
>b3 : { [x: string]: Derived; }

        b3 = a3; // error
>b3 = a3 : A<T>
>b3 : { [x: string]: Derived; }
>a3 : A<T>

        var b4: { [x: string]: Derived2; };
>b4 : { [x: string]: Derived2; }
>x : string
>Derived2 : Derived2

        a3 = b4; // error
>a3 = b4 : { [x: string]: Derived2; }
>a3 : A<T>
>b4 : { [x: string]: Derived2; }

        b4 = a3; // error
>b4 = a3 : A<T>
>b4 : { [x: string]: Derived2; }
>a3 : A<T>
    }
}
