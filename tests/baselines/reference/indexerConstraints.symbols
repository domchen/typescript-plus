=== tests/cases/compiler/indexerConstraints.ts ===
interface A { a: number; }
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
>a : Symbol(A.a, Decl(indexerConstraints.ts, 0, 13))

interface B extends A { b: number; }
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
>b : Symbol(B.b, Decl(indexerConstraints.ts, 1, 23))

// Good case
interface D {
>D : Symbol(D, Decl(indexerConstraints.ts, 1, 36), Decl(indexerConstraints.ts, 6, 1))

    [s: string]: A;
>s : Symbol(s, Decl(indexerConstraints.ts, 5, 5))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
}
interface D {
>D : Symbol(D, Decl(indexerConstraints.ts, 1, 36), Decl(indexerConstraints.ts, 6, 1))

    [n: number]: B;
>n : Symbol(n, Decl(indexerConstraints.ts, 8, 5))
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
}

// Bad case
interface E {
>E : Symbol(E, Decl(indexerConstraints.ts, 9, 1), Decl(indexerConstraints.ts, 14, 1))

    [s: string]: B;
>s : Symbol(s, Decl(indexerConstraints.ts, 13, 5))
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
}
interface E {
>E : Symbol(E, Decl(indexerConstraints.ts, 9, 1), Decl(indexerConstraints.ts, 14, 1))

    [n: number]: A;
>n : Symbol(n, Decl(indexerConstraints.ts, 16, 5))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
}

// Inheritance
interface F {
>F : Symbol(F, Decl(indexerConstraints.ts, 17, 1))

    [s: string]: B;
>s : Symbol(s, Decl(indexerConstraints.ts, 21, 5))
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
}
interface G extends F {
>G : Symbol(G, Decl(indexerConstraints.ts, 22, 1))
>F : Symbol(F, Decl(indexerConstraints.ts, 17, 1))

    [n: number]: A;
>n : Symbol(n, Decl(indexerConstraints.ts, 24, 5))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
}

// Other way
interface H {
>H : Symbol(H, Decl(indexerConstraints.ts, 25, 1))

    [n: number]: A;
>n : Symbol(n, Decl(indexerConstraints.ts, 29, 5))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))
}
interface I extends H {
>I : Symbol(I, Decl(indexerConstraints.ts, 30, 1))
>H : Symbol(H, Decl(indexerConstraints.ts, 25, 1))

    [s: string]: B;
>s : Symbol(s, Decl(indexerConstraints.ts, 32, 5))
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
}

// With hidden indexer
interface J {
>J : Symbol(J, Decl(indexerConstraints.ts, 33, 1))

    [n: number]: {};
>n : Symbol(n, Decl(indexerConstraints.ts, 37, 5))
}
interface K extends J {
>K : Symbol(K, Decl(indexerConstraints.ts, 38, 1))
>J : Symbol(J, Decl(indexerConstraints.ts, 33, 1))

    [n: number]: A;
>n : Symbol(n, Decl(indexerConstraints.ts, 40, 5))
>A : Symbol(A, Decl(indexerConstraints.ts, 0, 0))

    [s: string]: B;
>s : Symbol(s, Decl(indexerConstraints.ts, 41, 5))
>B : Symbol(B, Decl(indexerConstraints.ts, 0, 26))
}
