=== tests/cases/compiler/decoratorsOnComputedProperties.ts ===
function x(o: object, k: PropertyKey) { }
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>o : Symbol(o, Decl(decoratorsOnComputedProperties.ts, 0, 11))
>k : Symbol(k, Decl(decoratorsOnComputedProperties.ts, 0, 21))
>PropertyKey : Symbol(PropertyKey, Decl(lib.es2015.core.d.ts, --, --))

let i = 0;
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

function foo(): string { return ++i + ""; }
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

const fieldNameA: string = "fieldName1";
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

const fieldNameB: string = "fieldName2";
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

const fieldNameC: string = "fieldName3";
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

class A {
>A : Symbol(A, Decl(decoratorsOnComputedProperties.ts, 6, 40))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(A["property"], Decl(decoratorsOnComputedProperties.ts, 8, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(A["property2"], Decl(decoratorsOnComputedProperties.ts, 10, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(A["property3"], Decl(decoratorsOnComputedProperties.ts, 12, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(A["property4"], Decl(decoratorsOnComputedProperties.ts, 14, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class B {
>B : Symbol(B, Decl(decoratorsOnComputedProperties.ts, 25, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(B["property"], Decl(decoratorsOnComputedProperties.ts, 25, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(B["property2"], Decl(decoratorsOnComputedProperties.ts, 27, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(B["property3"], Decl(decoratorsOnComputedProperties.ts, 29, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(B["property4"], Decl(decoratorsOnComputedProperties.ts, 31, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class C {
>C : Symbol(C, Decl(decoratorsOnComputedProperties.ts, 40, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(C["property"], Decl(decoratorsOnComputedProperties.ts, 42, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(C["property2"], Decl(decoratorsOnComputedProperties.ts, 44, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(C["property3"], Decl(decoratorsOnComputedProperties.ts, 46, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(C["property4"], Decl(decoratorsOnComputedProperties.ts, 48, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

    ["some" + "method"]() {}
}

void class D {
>D : Symbol(D, Decl(decoratorsOnComputedProperties.ts, 60, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(D["property"], Decl(decoratorsOnComputedProperties.ts, 60, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(D["property2"], Decl(decoratorsOnComputedProperties.ts, 62, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(D["property3"], Decl(decoratorsOnComputedProperties.ts, 64, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(D["property4"], Decl(decoratorsOnComputedProperties.ts, 66, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

    ["some" + "method"]() {}
};

class E {
>E : Symbol(E, Decl(decoratorsOnComputedProperties.ts, 76, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(E["property"], Decl(decoratorsOnComputedProperties.ts, 78, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(E["property2"], Decl(decoratorsOnComputedProperties.ts, 80, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(E["property3"], Decl(decoratorsOnComputedProperties.ts, 82, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(E["property4"], Decl(decoratorsOnComputedProperties.ts, 84, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class F {
>F : Symbol(F, Decl(decoratorsOnComputedProperties.ts, 96, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(F["property"], Decl(decoratorsOnComputedProperties.ts, 96, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(F["property2"], Decl(decoratorsOnComputedProperties.ts, 98, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(F["property3"], Decl(decoratorsOnComputedProperties.ts, 100, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(F["property4"], Decl(decoratorsOnComputedProperties.ts, 102, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class G {
>G : Symbol(G, Decl(decoratorsOnComputedProperties.ts, 112, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(G["property"], Decl(decoratorsOnComputedProperties.ts, 114, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(G["property2"], Decl(decoratorsOnComputedProperties.ts, 116, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(G["property3"], Decl(decoratorsOnComputedProperties.ts, 118, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(G["property4"], Decl(decoratorsOnComputedProperties.ts, 120, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class H {
>H : Symbol(H, Decl(decoratorsOnComputedProperties.ts, 133, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(H["property"], Decl(decoratorsOnComputedProperties.ts, 133, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(H["property2"], Decl(decoratorsOnComputedProperties.ts, 135, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(H["property3"], Decl(decoratorsOnComputedProperties.ts, 137, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(H["property4"], Decl(decoratorsOnComputedProperties.ts, 139, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class I {
>I : Symbol(I, Decl(decoratorsOnComputedProperties.ts, 150, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(I["property"], Decl(decoratorsOnComputedProperties.ts, 152, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(I["property2"], Decl(decoratorsOnComputedProperties.ts, 154, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(I["property3"], Decl(decoratorsOnComputedProperties.ts, 156, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(I["property4"], Decl(decoratorsOnComputedProperties.ts, 158, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x ["some" + "method"]() {}
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class J {
>J : Symbol(J, Decl(decoratorsOnComputedProperties.ts, 171, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(J["property"], Decl(decoratorsOnComputedProperties.ts, 171, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(J["property2"], Decl(decoratorsOnComputedProperties.ts, 173, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(J["property3"], Decl(decoratorsOnComputedProperties.ts, 175, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(J["property4"], Decl(decoratorsOnComputedProperties.ts, 177, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x ["some" + "method"]() {}
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};
