=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersOptionality2.ts ===
// M is optional and S contains no property with the same name as M
// N is optional and T contains no property with the same name as N

class Base { foo: string; }
>Base : Base
>foo : string

class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : string

class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : string

module TargetHasOptional {
>TargetHasOptional : typeof TargetHasOptional

    // targets
    interface C {
>C : C

        opt?: Base
>opt : Base
>Base : Base
    }
    var c: C;
>c : C
>C : C

    var a: { opt?: Base; }
>a : { opt?: Base; }
>opt : Base
>Base : Base

    var b: typeof a = { opt: new Base() }
>b : { opt?: Base; }
>a : { opt?: Base; }
>{ opt: new Base() } : { opt: Base; }
>opt : Base
>new Base() : Base
>Base : typeof Base

    // sources
    interface D {
>D : D

        other: Base;
>other : Base
>Base : Base
    }
    interface E {
>E : E

        other: Derived;
>other : Derived
>Derived : Derived
    }
    interface F {
>F : F

        other?: Derived;
>other : Derived
>Derived : Derived
    }
    var d: D;
>d : D
>D : D

    var e: E;
>e : E
>E : E

    var f: F;
>f : F
>F : F

    // disallowed by weak type checking
    c = d;
>c = d : D
>c : C
>d : D

    c = e;
>c = e : E
>c : C
>e : E

    c = f;
>c = f : F
>c : C
>f : F

    a = d;
>a = d : D
>a : { opt?: Base; }
>d : D

    a = e;
>a = e : E
>a : { opt?: Base; }
>e : E

    a = f;
>a = f : F
>a : { opt?: Base; }
>f : F

    b = d;
>b = d : D
>b : { opt?: Base; }
>d : D

    b = e;
>b = e : E
>b : { opt?: Base; }
>e : E

    b = f;
>b = f : F
>b : { opt?: Base; }
>f : F

    // ok
    c = a;
>c = a : { opt?: Base; }
>c : C
>a : { opt?: Base; }

    a = c;
>a = c : C
>a : { opt?: Base; }
>c : C

    b = a;
>b = a : { opt?: Base; }
>b : { opt?: Base; }
>a : { opt?: Base; }

    b = c;
>b = c : C
>b : { opt?: Base; }
>c : C
}

module SourceHasOptional {
>SourceHasOptional : typeof SourceHasOptional

    // targets
    interface C {
>C : C

        opt: Base
>opt : Base
>Base : Base
    }
    var c: C;
>c : C
>C : C

    var a: { opt: Base; }
>a : { opt: Base; }
>opt : Base
>Base : Base

    var b = { opt: new Base() }
>b : { opt: Base; }
>{ opt: new Base() } : { opt: Base; }
>opt : Base
>new Base() : Base
>Base : typeof Base

    // sources
    interface D {
>D : D

        other?: Base;
>other : Base
>Base : Base
    }
    interface E {
>E : E

        other?: Derived;
>other : Derived
>Derived : Derived
    }
    interface F {
>F : F

        other: Derived;
>other : Derived
>Derived : Derived
    }
    var d: D;
>d : D
>D : D

    var e: E;
>e : E
>E : E

    var f: F;
>f : F
>F : F

    c = d; // error
>c = d : D
>c : C
>d : D

    c = e; // error
>c = e : E
>c : C
>e : E

    c = f; // error
>c = f : F
>c : C
>f : F

    c = a; // ok
>c = a : { opt: Base; }
>c : C
>a : { opt: Base; }

    a = d; // error
>a = d : D
>a : { opt: Base; }
>d : D

    a = e; // error
>a = e : E
>a : { opt: Base; }
>e : E

    a = f; // error
>a = f : F
>a : { opt: Base; }
>f : F

    a = c; // ok
>a = c : C
>a : { opt: Base; }
>c : C

    b = d; // error
>b = d : D
>b : { opt: Base; }
>d : D

    b = e; // error
>b = e : E
>b : { opt: Base; }
>e : E

    b = f; // error
>b = f : F
>b : { opt: Base; }
>f : F

    b = a; // ok
>b = a : { opt: Base; }
>b : { opt: Base; }
>a : { opt: Base; }

    b = c; // ok
>b = c : C
>b : { opt: Base; }
>c : C
}

