=== tests/cases/conformance/types/intersection/intersectionTypeReadonly.ts ===
interface Base {
>Base : Base

    readonly value: number;
>value : number
}
interface Identical {
>Identical : Identical

    readonly value: number;
>value : number
}
interface Mutable {
>Mutable : Mutable

    value: number;
>value : number
}
interface DifferentType {
>DifferentType : DifferentType

    readonly value: string;
>value : string
}
interface DifferentName {
>DifferentName : DifferentName

    readonly other: number;
>other : number
}
let base: Base;
>base : Base
>Base : Base

base.value = 12 // error, lhs can't be a readonly property
>base.value = 12 : 12
>base.value : any
>base : Base
>value : any
>12 : 12

let identical: Base & Identical;
>identical : Base & Identical
>Base : Base
>Identical : Identical

identical.value = 12; // error, lhs can't be a readonly property
>identical.value = 12 : 12
>identical.value : any
>identical : Base & Identical
>value : any
>12 : 12

let mutable: Base & Mutable;
>mutable : Base & Mutable
>Base : Base
>Mutable : Mutable

mutable.value = 12; // error, lhs can't be a readonly property
>mutable.value = 12 : 12
>mutable.value : any
>mutable : Base & Mutable
>value : any
>12 : 12

let differentType: Base & DifferentType;
>differentType : Base & DifferentType
>Base : Base
>DifferentType : DifferentType

differentType.value = 12; // error, lhs can't be a readonly property
>differentType.value = 12 : 12
>differentType.value : any
>differentType : Base & DifferentType
>value : any
>12 : 12

let differentName: Base & DifferentName;
>differentName : Base & DifferentName
>Base : Base
>DifferentName : DifferentName

differentName.value = 12; // error, property 'value' doesn't exist
>differentName.value = 12 : 12
>differentName.value : any
>differentName : Base & DifferentName
>value : any
>12 : 12

