=== tests/cases/compiler/chainedAssignment3.ts ===
class A {
>A : Symbol(A, Decl(chainedAssignment3.ts, 0, 0))

    id: number;
>id : Symbol(A.id, Decl(chainedAssignment3.ts, 0, 9))
}

class B extends A {
>B : Symbol(B, Decl(chainedAssignment3.ts, 2, 1))
>A : Symbol(A, Decl(chainedAssignment3.ts, 0, 0))

    value: string;
>value : Symbol(B.value, Decl(chainedAssignment3.ts, 4, 19))
}

var a: A;
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>A : Symbol(A, Decl(chainedAssignment3.ts, 0, 0))

var b: B;
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>B : Symbol(B, Decl(chainedAssignment3.ts, 2, 1))

a = b = null;
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))

a = b = new B();
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>B : Symbol(B, Decl(chainedAssignment3.ts, 2, 1))

b = a = new B();
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>B : Symbol(B, Decl(chainedAssignment3.ts, 2, 1))

a.id = b.value = null;
>a.id : Symbol(A.id, Decl(chainedAssignment3.ts, 0, 9))
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>id : Symbol(A.id, Decl(chainedAssignment3.ts, 0, 9))
>b.value : Symbol(B.value, Decl(chainedAssignment3.ts, 4, 19))
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>value : Symbol(B.value, Decl(chainedAssignment3.ts, 4, 19))

// error cases
b = a = new A();
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>A : Symbol(A, Decl(chainedAssignment3.ts, 0, 0))

a = b = new A();
>a : Symbol(a, Decl(chainedAssignment3.ts, 8, 3))
>b : Symbol(b, Decl(chainedAssignment3.ts, 9, 3))
>A : Symbol(A, Decl(chainedAssignment3.ts, 0, 0))



