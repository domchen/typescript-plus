=== tests/cases/compiler/jsxElementClassTooManyParams.tsx ===
namespace JSX {
>JSX : any

    export interface Element {}
>Element : Element

    export interface IntrinsicClassAttributes<TClass, TOther=never> {
>IntrinsicClassAttributes : IntrinsicClassAttributes<TClass, TOther>
>TClass : TClass
>TOther : TOther

        ref?: TClass;
>ref : TClass | undefined
>TClass : TClass

        item?: TOther;
>item : TOther | undefined
>TOther : TOther
    }
    export interface ElementClass extends Element {}
>ElementClass : ElementClass
>Element : Element

    export interface ElementAttributesProperty { props: {}; }
>ElementAttributesProperty : ElementAttributesProperty
>props : {}

    export interface ElementChildrenAttribute { children: {}; }
>ElementChildrenAttribute : ElementChildrenAttribute
>children : {}

    export interface IntrinsicAttributes {}
>IntrinsicAttributes : IntrinsicAttributes

    export interface IntrinsicElements { [key: string]: Element }
>IntrinsicElements : IntrinsicElements
>key : string
>Element : Element
}
class ElemClass<T extends {x: number}> implements JSX.ElementClass {
>ElemClass : ElemClass<T>
>T : T
>x : number
>JSX.ElementClass : any
>JSX : any
>ElementClass : JSX.ElementClass

    constructor(public props: T) {}
>props : T
>T : T
}
const elem = <ElemClass x={12} y={24} />
>elem : JSX.Element
><ElemClass x={12} y={24} /> : JSX.Element
>ElemClass : typeof ElemClass
>x : number
>12 : 12
>y : number
>24 : 24

