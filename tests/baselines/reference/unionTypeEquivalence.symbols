=== tests/cases/conformance/types/union/unionTypeEquivalence.ts ===
// A | B is equivalent to A if B is a subtype of A
class C { }
>C : Symbol(C, Decl(unionTypeEquivalence.ts, 0, 0))

class D extends C { foo() { } }
>D : Symbol(D, Decl(unionTypeEquivalence.ts, 1, 11))
>C : Symbol(C, Decl(unionTypeEquivalence.ts, 0, 0))
>foo : Symbol(D.foo, Decl(unionTypeEquivalence.ts, 2, 19))

var x: C;
>x : Symbol(x, Decl(unionTypeEquivalence.ts, 3, 3), Decl(unionTypeEquivalence.ts, 4, 3))
>C : Symbol(C, Decl(unionTypeEquivalence.ts, 0, 0))

var x : C | D;
>x : Symbol(x, Decl(unionTypeEquivalence.ts, 3, 3), Decl(unionTypeEquivalence.ts, 4, 3))
>C : Symbol(C, Decl(unionTypeEquivalence.ts, 0, 0))
>D : Symbol(D, Decl(unionTypeEquivalence.ts, 1, 11))

// A | B is equivalent to B | A.
var y: string | number;
>y : Symbol(y, Decl(unionTypeEquivalence.ts, 7, 3), Decl(unionTypeEquivalence.ts, 8, 3))

var y : number | string;
>y : Symbol(y, Decl(unionTypeEquivalence.ts, 7, 3), Decl(unionTypeEquivalence.ts, 8, 3))

// AB | C is equivalent to A | BC, where AB is A | B and BC is B | C.
var z : string | number | boolean;
>z : Symbol(z, Decl(unionTypeEquivalence.ts, 11, 3), Decl(unionTypeEquivalence.ts, 12, 3), Decl(unionTypeEquivalence.ts, 13, 3))

var z : (string | number) | boolean;
>z : Symbol(z, Decl(unionTypeEquivalence.ts, 11, 3), Decl(unionTypeEquivalence.ts, 12, 3), Decl(unionTypeEquivalence.ts, 13, 3))

var z : string | (number | boolean);
>z : Symbol(z, Decl(unionTypeEquivalence.ts, 11, 3), Decl(unionTypeEquivalence.ts, 12, 3), Decl(unionTypeEquivalence.ts, 13, 3))

var AB : string | number;
>AB : Symbol(AB, Decl(unionTypeEquivalence.ts, 14, 3))

var BC : number | boolean;
>BC : Symbol(BC, Decl(unionTypeEquivalence.ts, 15, 3))

var z1: typeof AB | boolean;
>z1 : Symbol(z1, Decl(unionTypeEquivalence.ts, 16, 3), Decl(unionTypeEquivalence.ts, 17, 3))
>AB : Symbol(AB, Decl(unionTypeEquivalence.ts, 14, 3))

var z1: string | typeof BC;
>z1 : Symbol(z1, Decl(unionTypeEquivalence.ts, 16, 3), Decl(unionTypeEquivalence.ts, 17, 3))
>BC : Symbol(BC, Decl(unionTypeEquivalence.ts, 15, 3))

