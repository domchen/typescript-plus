=== tests/cases/compiler/identityForSignaturesWithTypeParametersAndAny.ts ===
var f: <T, U>(x: T, y: U) => T;
>f : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var f: <T, U>(x: any, y: any) => any;
>f : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : any
>y : any

var g: <T, U>(x: T, y: U) => T;
>g : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var g: <T>(x: any, y: any) => any;
>g : <T, U>(x: T, y: U) => T
>T : T
>x : any
>y : any

var h: <T, U>(x: T, y: U) => T;
>h : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var h: (x: any, y: any) => any;
>h : <T, U>(x: T, y: U) => T
>x : any
>y : any

var i: <T, U>(x: T, y: U) => T;
>i : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var i: <T, U>(x: any, y: string) => any;
>i : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : any
>y : string

var j: <T, U>(x: T, y: U) => T;
>j : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var j: <T, U>(x: any, y: any) => string;
>j : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : any
>y : any

