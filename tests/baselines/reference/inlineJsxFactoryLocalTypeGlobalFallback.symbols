=== tests/cases/conformance/jsx/inline/renderer.d.ts ===
declare global {
>global : Symbol(global, Decl(renderer.d.ts, 0, 0))

    namespace JSX {
>JSX : Symbol(JSX, Decl(renderer.d.ts, 0, 16))

        interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(renderer.d.ts, 1, 19))

            [e: string]: {};
>e : Symbol(e, Decl(renderer.d.ts, 3, 13))
        }
        interface Element {
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))

            __domBrand: void;
>__domBrand : Symbol(Element.__domBrand, Decl(renderer.d.ts, 5, 27))

            children: Element[];
>children : Symbol(Element.children, Decl(renderer.d.ts, 6, 29))
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))

            props: {};
>props : Symbol(Element.props, Decl(renderer.d.ts, 7, 32))
        }
        interface ElementAttributesProperty { props: any; }
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(renderer.d.ts, 9, 9))
>props : Symbol(ElementAttributesProperty.props, Decl(renderer.d.ts, 10, 45))

        interface ElementChildrenAttribute { children: any; }
>ElementChildrenAttribute : Symbol(ElementChildrenAttribute, Decl(renderer.d.ts, 10, 59))
>children : Symbol(ElementChildrenAttribute.children, Decl(renderer.d.ts, 11, 44))
    }
}
export function dom(): JSX.Element;
>dom : Symbol(dom, Decl(renderer.d.ts, 13, 1))
>JSX : Symbol(JSX, Decl(renderer.d.ts, 0, 16))
>Element : Symbol(JSX.Element, Decl(renderer.d.ts, 4, 9))

=== tests/cases/conformance/jsx/inline/renderer2.d.ts ===
export namespace predom {
>predom : Symbol(predom, Decl(renderer2.d.ts, 13, 1), Decl(renderer2.d.ts, 0, 0))

    namespace JSX {
>JSX : Symbol(JSX, Decl(renderer2.d.ts, 0, 25))

        interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

            [e: string]: {};
>e : Symbol(e, Decl(renderer2.d.ts, 3, 13))
        }
        interface Element {
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))

            __predomBrand: void;
>__predomBrand : Symbol(Element.__predomBrand, Decl(renderer2.d.ts, 5, 27))

            children: Element[];
>children : Symbol(Element.children, Decl(renderer2.d.ts, 6, 32))
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))

            props: {};
>props : Symbol(Element.props, Decl(renderer2.d.ts, 7, 32))
        }
        interface ElementAttributesProperty { props: any; }
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(renderer2.d.ts, 9, 9))
>props : Symbol(ElementAttributesProperty.props, Decl(renderer2.d.ts, 10, 45))

        interface ElementChildrenAttribute { children: any; }
>ElementChildrenAttribute : Symbol(ElementChildrenAttribute, Decl(renderer2.d.ts, 10, 59))
>children : Symbol(ElementChildrenAttribute.children, Decl(renderer2.d.ts, 11, 44))
    }
}
export function predom(): predom.JSX.Element;
>predom : Symbol(predom, Decl(renderer2.d.ts, 13, 1), Decl(renderer2.d.ts, 0, 0))
>predom : Symbol(predom, Decl(renderer2.d.ts, 13, 1), Decl(renderer2.d.ts, 0, 0))
>JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))

=== tests/cases/conformance/jsx/inline/component.tsx ===
/** @jsx predom */
import { predom } from "./renderer2"
>predom : Symbol(predom, Decl(component.tsx, 1, 8))

export default <h></h>
>h : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))
>h : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

=== tests/cases/conformance/jsx/inline/index.tsx ===
/** @jsx dom */
import { dom } from "./renderer"
>dom : Symbol(dom, Decl(index.tsx, 1, 8))

import prerendered from "./component";
>prerendered : Symbol(prerendered, Decl(index.tsx, 2, 6))

let elem = prerendered;
>elem : Symbol(elem, Decl(index.tsx, 3, 3))
>prerendered : Symbol(prerendered, Decl(index.tsx, 2, 6))

elem = <h></h>; // Expect assignability error here
>elem : Symbol(elem, Decl(index.tsx, 3, 3))
>h : Symbol(JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))
>h : Symbol(JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))

