=== tests/cases/compiler/implicitAnyInAmbientDeclaration2.d.ts ===
declare function foo(x);  // this should be an error
>foo : Symbol(foo, Decl(implicitAnyInAmbientDeclaration2.d.ts, 0, 0))
>x : Symbol(x, Decl(implicitAnyInAmbientDeclaration2.d.ts, 0, 21))

declare var bar;  // this should be be an erro
>bar : Symbol(bar, Decl(implicitAnyInAmbientDeclaration2.d.ts, 1, 11))

declare class C {
>C : Symbol(C, Decl(implicitAnyInAmbientDeclaration2.d.ts, 1, 16))

    public publicMember;  // this should be an error
>publicMember : Symbol(C.publicMember, Decl(implicitAnyInAmbientDeclaration2.d.ts, 2, 17))

    private privateMember;  // this should not be an error
>privateMember : Symbol(C.privateMember, Decl(implicitAnyInAmbientDeclaration2.d.ts, 3, 24))

    public publicFunction(x);  // this should be an error
>publicFunction : Symbol(C.publicFunction, Decl(implicitAnyInAmbientDeclaration2.d.ts, 4, 26))
>x : Symbol(x, Decl(implicitAnyInAmbientDeclaration2.d.ts, 6, 26))

    private privateFunction(privateParam);  // this should not be an error
>privateFunction : Symbol(C.privateFunction, Decl(implicitAnyInAmbientDeclaration2.d.ts, 6, 29))
>privateParam : Symbol(privateParam, Decl(implicitAnyInAmbientDeclaration2.d.ts, 7, 28))

    private constructor(privateParam);  // this should not be an error
>privateParam : Symbol(privateParam, Decl(implicitAnyInAmbientDeclaration2.d.ts, 8, 24))
}

declare class D {
>D : Symbol(D, Decl(implicitAnyInAmbientDeclaration2.d.ts, 9, 1))

    public constructor(publicConsParam, int: number);  // this should be an error
>publicConsParam : Symbol(publicConsParam, Decl(implicitAnyInAmbientDeclaration2.d.ts, 12, 23))
>int : Symbol(int, Decl(implicitAnyInAmbientDeclaration2.d.ts, 12, 39))
}
