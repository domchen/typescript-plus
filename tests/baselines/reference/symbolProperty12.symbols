=== tests/cases/conformance/es6/Symbols/symbolProperty12.ts ===
class C {
>C : Symbol(C, Decl(symbolProperty12.ts, 0, 0))

    private [Symbol.iterator]: { x };
>[Symbol.iterator] : Symbol(C[Symbol.iterator], Decl(symbolProperty12.ts, 0, 9))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>x : Symbol(x, Decl(symbolProperty12.ts, 1, 32))
}
interface I {
>I : Symbol(I, Decl(symbolProperty12.ts, 2, 1))

    [Symbol.iterator]: { x };
>[Symbol.iterator] : Symbol(I[Symbol.iterator], Decl(symbolProperty12.ts, 3, 13))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>x : Symbol(x, Decl(symbolProperty12.ts, 4, 24))
}

var i: I;
>i : Symbol(i, Decl(symbolProperty12.ts, 7, 3))
>I : Symbol(I, Decl(symbolProperty12.ts, 2, 1))

i = new C;
>i : Symbol(i, Decl(symbolProperty12.ts, 7, 3))
>C : Symbol(C, Decl(symbolProperty12.ts, 0, 0))

var c: C = i;
>c : Symbol(c, Decl(symbolProperty12.ts, 9, 3))
>C : Symbol(C, Decl(symbolProperty12.ts, 0, 0))
>i : Symbol(i, Decl(symbolProperty12.ts, 7, 3))

