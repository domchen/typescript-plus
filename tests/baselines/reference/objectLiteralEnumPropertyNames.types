=== tests/cases/compiler/objectLiteralEnumPropertyNames.ts ===
// Fixes #16887
enum Strs {
>Strs : Strs

    A = 'a',
>A : Strs.A
>'a' : "a"

    B = 'b'
>B : Strs.B
>'b' : "b"
}
type TestStrs = { [key in Strs]: string }
>TestStrs : TestStrs
>key : key
>Strs : Strs

const x: TestStrs = {
>x : TestStrs
>TestStrs : TestStrs
>{    [Strs.A]: 'xo',    [Strs.B]: 'xe'} : { [Strs.A]: string; [Strs.B]: string; }

    [Strs.A]: 'xo',
>Strs.A : Strs.A
>Strs : typeof Strs
>A : Strs.A
>'xo' : "xo"

    [Strs.B]: 'xe'
>Strs.B : Strs.B
>Strs : typeof Strs
>B : Strs.B
>'xe' : "xe"
}
const ux = {
>ux : { [Strs.A]: string; [Strs.B]: string; }
>{    [Strs.A]: 'xo',    [Strs.B]: 'xe'} : { [Strs.A]: string; [Strs.B]: string; }

    [Strs.A]: 'xo',
>Strs.A : Strs.A
>Strs : typeof Strs
>A : Strs.A
>'xo' : "xo"

    [Strs.B]: 'xe'
>Strs.B : Strs.B
>Strs : typeof Strs
>B : Strs.B
>'xe' : "xe"
}
const y: TestStrs = {
>y : TestStrs
>TestStrs : TestStrs
>{    ['a']: 'yo',    ['b']: 'ye'} : { ['a']: string; ['b']: string; }

    ['a']: 'yo',
>'a' : "a"
>'yo' : "yo"

    ['b']: 'ye'
>'b' : "b"
>'ye' : "ye"
}
const a = 'a';
>a : "a"
>'a' : "a"

const b = 'b';
>b : "b"
>'b' : "b"

const z: TestStrs = {
>z : TestStrs
>TestStrs : TestStrs
>{    [a]: 'zo',    [b]: 'ze'} : { [a]: string; [b]: string; }

    [a]: 'zo',
>a : "a"
>'zo' : "zo"

    [b]: 'ze'
>b : "b"
>'ze' : "ze"
}
const uz = {
>uz : { [a]: string; [b]: string; }
>{    [a]: 'zo',    [b]: 'ze'} : { [a]: string; [b]: string; }

    [a]: 'zo',
>a : "a"
>'zo' : "zo"

    [b]: 'ze'
>b : "b"
>'ze' : "ze"
}

enum Nums {
>Nums : Nums

    A,
>A : Nums.A

    B
>B : Nums.B
}
type TestNums = { 0: number, 1: number }
>TestNums : TestNums

const n: TestNums = {
>n : TestNums
>TestNums : TestNums
>{    [Nums.A]: 1,    [Nums.B]: 2} : { [Nums.A]: number; [Nums.B]: number; }

    [Nums.A]: 1,
>Nums.A : Nums.A
>Nums : typeof Nums
>A : Nums.A
>1 : 1

    [Nums.B]: 2
>Nums.B : Nums.B
>Nums : typeof Nums
>B : Nums.B
>2 : 2
}
const un = {
>un : { [Nums.A]: number; [Nums.B]: number; }
>{    [Nums.A]: 3,    [Nums.B]: 4} : { [Nums.A]: number; [Nums.B]: number; }

    [Nums.A]: 3,
>Nums.A : Nums.A
>Nums : typeof Nums
>A : Nums.A
>3 : 3

    [Nums.B]: 4
>Nums.B : Nums.B
>Nums : typeof Nums
>B : Nums.B
>4 : 4
}
const an = 0;
>an : 0
>0 : 0

const bn = 1;
>bn : 1
>1 : 1

const m: TestNums = {
>m : TestNums
>TestNums : TestNums
>{    [an]: 5,    [bn]: 6} : { [an]: number; [bn]: number; }

    [an]: 5,
>an : 0
>5 : 5

    [bn]: 6
>bn : 1
>6 : 6
}
const um = {
>um : { [an]: number; [bn]: number; }
>{    [an]: 7,    [bn]: 8} : { [an]: number; [bn]: number; }

    [an]: 7,
>an : 0
>7 : 7

    [bn]: 8
>bn : 1
>8 : 8
}

