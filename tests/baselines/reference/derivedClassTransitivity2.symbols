=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity2.ts ===
// subclassing is not transitive when you can remove required parameters and add optional parameters

class C {
>C : Symbol(C, Decl(derivedClassTransitivity2.ts, 0, 0))

    foo(x: number, y: number) { }
>foo : Symbol(C.foo, Decl(derivedClassTransitivity2.ts, 2, 9))
>x : Symbol(x, Decl(derivedClassTransitivity2.ts, 3, 8))
>y : Symbol(y, Decl(derivedClassTransitivity2.ts, 3, 18))
}

class D extends C {
>D : Symbol(D, Decl(derivedClassTransitivity2.ts, 4, 1))
>C : Symbol(C, Decl(derivedClassTransitivity2.ts, 0, 0))

    foo(x: number) { } // ok to drop parameters
>foo : Symbol(D.foo, Decl(derivedClassTransitivity2.ts, 6, 19))
>x : Symbol(x, Decl(derivedClassTransitivity2.ts, 7, 8))
}

class E extends D {
>E : Symbol(E, Decl(derivedClassTransitivity2.ts, 8, 1))
>D : Symbol(D, Decl(derivedClassTransitivity2.ts, 4, 1))

    foo(x: number, y?: string) { } // ok to add optional parameters
>foo : Symbol(E.foo, Decl(derivedClassTransitivity2.ts, 10, 19))
>x : Symbol(x, Decl(derivedClassTransitivity2.ts, 11, 8))
>y : Symbol(y, Decl(derivedClassTransitivity2.ts, 11, 18))
}

var c: C;
>c : Symbol(c, Decl(derivedClassTransitivity2.ts, 14, 3))
>C : Symbol(C, Decl(derivedClassTransitivity2.ts, 0, 0))

var d: D;
>d : Symbol(d, Decl(derivedClassTransitivity2.ts, 15, 3))
>D : Symbol(D, Decl(derivedClassTransitivity2.ts, 4, 1))

var e: E;
>e : Symbol(e, Decl(derivedClassTransitivity2.ts, 16, 3))
>E : Symbol(E, Decl(derivedClassTransitivity2.ts, 8, 1))

c = e;
>c : Symbol(c, Decl(derivedClassTransitivity2.ts, 14, 3))
>e : Symbol(e, Decl(derivedClassTransitivity2.ts, 16, 3))

var r = c.foo(1, 1);
>r : Symbol(r, Decl(derivedClassTransitivity2.ts, 18, 3))
>c.foo : Symbol(C.foo, Decl(derivedClassTransitivity2.ts, 2, 9))
>c : Symbol(c, Decl(derivedClassTransitivity2.ts, 14, 3))
>foo : Symbol(C.foo, Decl(derivedClassTransitivity2.ts, 2, 9))

var r2 = e.foo(1, '');
>r2 : Symbol(r2, Decl(derivedClassTransitivity2.ts, 19, 3))
>e.foo : Symbol(E.foo, Decl(derivedClassTransitivity2.ts, 10, 19))
>e : Symbol(e, Decl(derivedClassTransitivity2.ts, 16, 3))
>foo : Symbol(E.foo, Decl(derivedClassTransitivity2.ts, 10, 19))

