=== tests/cases/conformance/types/thisType/thisTypeAccessibility.ts ===
class MyClass {
>MyClass : MyClass

    private p: number = 123;
>p : number
>123 : 123

    protected pp: number = 123;
>pp : number
>123 : 123

    public ppp: number = 123;
>ppp : number
>123 : 123

    private static sp: number = 123;
>sp : number
>123 : 123

    protected static spp: number = 123;
>spp : number
>123 : 123

    public static sppp: number = 123;
>sppp : number
>123 : 123
}

interface MyClass {
    extension1(p: number): void;
>extension1 : (p: number) => void
>p : number

    extension2(p: number): void;
>extension2 : (p: number) => void
>p : number

    extension3(p: number): void;
>extension3 : (p: number) => void
>p : number
}

MyClass.prototype.extension1 = function (this: MyClass, p: number) { 
>MyClass.prototype.extension1 = function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (this: MyClass, p: number) => void
>MyClass.prototype.extension1 : (p: number) => void
>MyClass.prototype : MyClass
>MyClass : typeof MyClass
>prototype : MyClass
>extension1 : (p: number) => void
>function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (this: MyClass, p: number) => void
>this : MyClass
>p : number

    this.p = p;
>this.p = p : number
>this.p : number
>this : MyClass
>p : number
>p : number

    this.pp = p;
>this.pp = p : number
>this.pp : number
>this : MyClass
>pp : number
>p : number

    this.ppp = p;
>this.ppp = p : number
>this.ppp : number
>this : MyClass
>ppp : number
>p : number

    MyClass.sp = p;
>MyClass.sp = p : number
>MyClass.sp : number
>MyClass : typeof MyClass
>sp : number
>p : number

    MyClass.spp = p;
>MyClass.spp = p : number
>MyClass.spp : number
>MyClass : typeof MyClass
>spp : number
>p : number

    MyClass.sppp = p;
>MyClass.sppp = p : number
>MyClass.sppp : number
>MyClass : typeof MyClass
>sppp : number
>p : number
}

MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) { 
>MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(this: T, p: number) => void
>MyClass.prototype.extension2 : (p: number) => void
>MyClass.prototype : MyClass
>MyClass : typeof MyClass
>prototype : MyClass
>extension2 : (p: number) => void
>function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(this: T, p: number) => void
>this : T
>p : number

    this.p = p;
>this.p = p : number
>this.p : number
>this : T
>p : number
>p : number

    this.pp = p;
>this.pp = p : number
>this.pp : number
>this : T
>pp : number
>p : number

    this.ppp = p;
>this.ppp = p : number
>this.ppp : number
>this : T
>ppp : number
>p : number

    MyClass.sp = p;
>MyClass.sp = p : number
>MyClass.sp : number
>MyClass : typeof MyClass
>sp : number
>p : number

    MyClass.spp = p;
>MyClass.spp = p : number
>MyClass.spp : number
>MyClass : typeof MyClass
>spp : number
>p : number

    MyClass.sppp = p;
>MyClass.sppp = p : number
>MyClass.sppp : number
>MyClass : typeof MyClass
>sppp : number
>p : number
}

function extension3<T extends MyClass> (this: T, p: number) { 
>extension3 : <T extends MyClass>(this: T, p: number) => void
>this : T
>p : number

    this.p = p;
>this.p = p : number
>this.p : number
>this : T
>p : number
>p : number

    this.pp = p;
>this.pp = p : number
>this.pp : number
>this : T
>pp : number
>p : number

    this.ppp = p;
>this.ppp = p : number
>this.ppp : number
>this : T
>ppp : number
>p : number

    MyClass.sp = p;
>MyClass.sp = p : number
>MyClass.sp : number
>MyClass : typeof MyClass
>sp : number
>p : number

    MyClass.spp = p;
>MyClass.spp = p : number
>MyClass.spp : number
>MyClass : typeof MyClass
>spp : number
>p : number

    MyClass.sppp = p;
>MyClass.sppp = p : number
>MyClass.sppp : number
>MyClass : typeof MyClass
>sppp : number
>p : number
}

MyClass.prototype.extension3 = extension3;
>MyClass.prototype.extension3 = extension3 : <T extends MyClass>(this: T, p: number) => void
>MyClass.prototype.extension3 : (p: number) => void
>MyClass.prototype : MyClass
>MyClass : typeof MyClass
>prototype : MyClass
>extension3 : (p: number) => void
>extension3 : <T extends MyClass>(this: T, p: number) => void

