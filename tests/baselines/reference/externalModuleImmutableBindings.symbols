=== tests/cases/compiler/f1.ts ===
export var x = 1;
>x : Symbol(x, Decl(f1.ts, 0, 10))

=== tests/cases/compiler/f2.ts ===
// all mutations below are illegal and should be fixed
import * as stuff from './f1';
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

var n = 'baz';
>n : Symbol(n, Decl(f2.ts, 3, 3))

stuff.x = 0;
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

stuff['x'] = 1;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

stuff.blah = 2;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

stuff[n] = 3;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

stuff.x++;
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

stuff['x']++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

stuff['blah']++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

stuff[n]++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

(stuff.x) = 0;
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

(stuff['x']) = 1;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

(stuff.blah) = 2;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

(stuff[n]) = 3;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

(stuff.x)++;
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

(stuff['x'])++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

(stuff['blah'])++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

(stuff[n])++;
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

for (stuff.x in []) {}
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for (stuff.x of []) {}
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for (stuff['x'] in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for (stuff['x'] of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for (stuff.blah in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

for (stuff.blah of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

for (stuff[n] in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

for (stuff[n] of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

for ((stuff.x) in []) {}
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for ((stuff.x) of []) {}
>stuff.x : Symbol(stuff.x, Decl(f1.ts, 0, 10))
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>x : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for ((stuff['x']) in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for ((stuff['x']) of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>'x' : Symbol(stuff.x, Decl(f1.ts, 0, 10))

for ((stuff.blah) in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

for ((stuff.blah) of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))

for ((stuff[n]) in []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))

for ((stuff[n]) of []) {}
>stuff : Symbol(stuff, Decl(f2.ts, 1, 6))
>n : Symbol(n, Decl(f2.ts, 3, 3))



