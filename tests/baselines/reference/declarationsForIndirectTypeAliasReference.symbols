=== tests/cases/compiler/b.ts ===
export {
    Hash,
>Hash : Symbol(Hash, Decl(b.ts, 0, 8))

    StringHash, StringHash2
>StringHash : Symbol(StringHash, Decl(b.ts, 1, 9))
>StringHash2 : Symbol(StringHash2, Decl(b.ts, 2, 15))

};

interface Hash<T> {
>Hash : Symbol(Hash, Decl(b.ts, 3, 2))
>T : Symbol(T, Decl(b.ts, 5, 15))

    [key: string]: T;
>key : Symbol(key, Decl(b.ts, 6, 5))
>T : Symbol(T, Decl(b.ts, 5, 15))
}

type StringHash = Hash<string>;
>StringHash : Symbol(StringHash, Decl(b.ts, 7, 1))
>Hash : Symbol(Hash, Decl(b.ts, 3, 2))

interface StringHash2 extends Hash<string> {}
>StringHash2 : Symbol(StringHash2, Decl(b.ts, 9, 31))
>Hash : Symbol(Hash, Decl(b.ts, 3, 2))

=== tests/cases/compiler/a.ts ===
import {StringHash, StringHash2} from "./b";
>StringHash : Symbol(StringHash, Decl(a.ts, 0, 8))
>StringHash2 : Symbol(StringHash2, Decl(a.ts, 0, 19))

export {
    doSome
>doSome : Symbol(doSome, Decl(a.ts, 2, 8))
}

const MAP: StringHash = {
>MAP : Symbol(MAP, Decl(a.ts, 6, 5))
>StringHash : Symbol(StringHash, Decl(a.ts, 0, 8))

    a: "a"
>a : Symbol(a, Decl(a.ts, 6, 25))

};

const MAP2: StringHash2 = {
>MAP2 : Symbol(MAP2, Decl(a.ts, 10, 5))
>StringHash2 : Symbol(StringHash2, Decl(a.ts, 0, 19))

    a: "a"
>a : Symbol(a, Decl(a.ts, 10, 27))

};

function doSome(arg1: string,
>doSome : Symbol(doSome, Decl(a.ts, 12, 2))
>arg1 : Symbol(arg1, Decl(a.ts, 14, 16))

                arg2 = MAP,
>arg2 : Symbol(arg2, Decl(a.ts, 14, 29))
>MAP : Symbol(MAP, Decl(a.ts, 6, 5))

                arg3 = MAP2) {
>arg3 : Symbol(arg3, Decl(a.ts, 15, 27))
>MAP2 : Symbol(MAP2, Decl(a.ts, 10, 5))
}
