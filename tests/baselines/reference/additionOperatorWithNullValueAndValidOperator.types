=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNullValueAndValidOperator.ts ===
// If one operand is the null or undefined value, it is treated as having the type of the other operand.

enum E { a, b, c }
>E : E
>a : E.a
>b : E.b
>c : E.c

var a: any;
>a : any

var b: number;
>b : number

var c: E;
>c : E

var d: string;
>d : string

// null + any
var r1: any = null + a;
>r1 : any
>null + a : any
>null : null
>a : any

var r2: any = a + null;
>r2 : any
>a + null : any
>a : any
>null : null

// null + number/enum
var r3 = null + b;
>r3 : any
>null + b : any
>null : null
>b : number

var r4 = null + 1;
>r4 : any
>null + 1 : any
>null : null
>1 : 1

var r5 = null + c;
>r5 : any
>null + c : any
>null : null
>c : E

var r6 = null + E.a;
>r6 : any
>null + E.a : any
>null : null
>E.a : E.a
>E : typeof E
>a : E.a

var r7 = null + E['a'];
>r7 : any
>null + E['a'] : any
>null : null
>E['a'] : E.a
>E : typeof E
>'a' : "a"

var r8 = b + null;
>r8 : any
>b + null : any
>b : number
>null : null

var r9 = 1 + null;
>r9 : any
>1 + null : any
>1 : 1
>null : null

var r10 = c + null
>r10 : any
>c + null : any
>c : E
>null : null

var r11 = E.a + null;
>r11 : any
>E.a + null : any
>E.a : E.a
>E : typeof E
>a : E.a
>null : null

var r12 = E['a'] + null;
>r12 : any
>E['a'] + null : any
>E['a'] : E.a
>E : typeof E
>'a' : "a"
>null : null

// null + string
var r13 = null + d;
>r13 : string
>null + d : string
>null : null
>d : string

var r14 = null + '';
>r14 : string
>null + '' : string
>null : null
>'' : ""

var r15 = d + null;
>r15 : string
>d + null : string
>d : string
>null : null

var r16 = '' + null;
>r16 : string
>'' + null : string
>'' : ""
>null : null

