=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts ===
// Rest parameters must be an array type if they have a type annotation, errors only for the functions with 2 rest params

function foo(...x: number[]) { }
>foo : (...x: number[]) => void
>x : number[]

var f = function foo(...x: number[]) { }
>f : (...x: number[]) => void
>function foo(...x: number[]) { } : (...x: number[]) => void
>foo : (...x: number[]) => void
>x : number[]

var f2 = (...x: number[], ...y: number[]) => { }
>f2 : (...x: number[], ...y: number[]) => void
>(...x: number[], ...y: number[]) => { } : (...x: number[], ...y: number[]) => void
>x : number[]
>y : number[]

class C {
>C : C

    foo(...x: number[]) { }
>foo : (...x: number[]) => void
>x : number[]
}

interface I {
>I : I

    (...x: number[]);
>x : number[]

    foo(...x: number[], ...y: number[]);
>foo : (...x: number[], ...y: number[]) => any
>x : number[]
>y : number[]
}

var a: {
>a : { (...x: number[]): any; foo(...x: number[]): any; }

    (...x: number[]);
>x : number[]

    foo(...x: number[]);
>foo : (...x: number[]) => any
>x : number[]
}

var b = {
>b : { foo(...x: number[]): void; a: (...x: number[], ...y: number[]) => void; b: (...x: number[]) => void; }
>{    foo(...x: number[]) { },    a: function foo(...x: number[], ...y: number[]) { },    b: (...x: number[]) => { }} : { foo(...x: number[]): void; a: (...x: number[], ...y: number[]) => void; b: (...x: number[]) => void; }

    foo(...x: number[]) { },
>foo : (...x: number[]) => void
>x : number[]

    a: function foo(...x: number[], ...y: number[]) { },
>a : (...x: number[], ...y: number[]) => void
>function foo(...x: number[], ...y: number[]) { } : (...x: number[], ...y: number[]) => void
>foo : (...x: number[], ...y: number[]) => void
>x : number[]
>y : number[]

    b: (...x: number[]) => { }
>b : (...x: number[]) => void
>(...x: number[]) => { } : (...x: number[]) => void
>x : number[]
}




function foo2(...x: Array<string>) { }
>foo2 : (...x: string[]) => void
>x : string[]
>Array : T[]

var f3 = function foo(...x: Array<string>) { }
>f3 : (...x: string[]) => void
>function foo(...x: Array<string>) { } : (...x: string[]) => void
>foo : (...x: string[]) => void
>x : string[]
>Array : T[]

var f4 = (...x: Array<string>, ...y: Array<string>) => { }
>f4 : (...x: string[], ...y: string[]) => void
>(...x: Array<string>, ...y: Array<string>) => { } : (...x: string[], ...y: string[]) => void
>x : string[]
>Array : T[]
>y : string[]
>Array : T[]

class C2 {
>C2 : C2

    foo(...x: Array<string>) { }
>foo : (...x: string[]) => void
>x : string[]
>Array : T[]
}

interface I2 {
>I2 : I2

    (...x: Array<string>);
>x : string[]
>Array : T[]

    foo(...x: Array<string>, ...y: Array<string>);
>foo : (...x: string[], ...y: string[]) => any
>x : string[]
>Array : T[]
>y : string[]
>Array : T[]
}

var a2: {
>a2 : { (...x: string[]): any; foo(...x: string[]): any; }

    (...x: Array<string>);
>x : string[]
>Array : T[]

    foo(...x: Array<string>);
>foo : (...x: string[]) => any
>x : string[]
>Array : T[]
}

var b2 = {
>b2 : { foo(...x: string[]): void; a: (...x: string[], ...y: string[]) => void; b: (...x: string[]) => void; }
>{    foo(...x: Array<string>) { },    a: function foo(...x: Array<string>, ...y: Array<string>) { },    b: (...x: Array<string>) => { }} : { foo(...x: string[]): void; a: (...x: string[], ...y: string[]) => void; b: (...x: string[]) => void; }

    foo(...x: Array<string>) { },
>foo : (...x: string[]) => void
>x : string[]
>Array : T[]

    a: function foo(...x: Array<string>, ...y: Array<string>) { },
>a : (...x: string[], ...y: string[]) => void
>function foo(...x: Array<string>, ...y: Array<string>) { } : (...x: string[], ...y: string[]) => void
>foo : (...x: string[], ...y: string[]) => void
>x : string[]
>Array : T[]
>y : string[]
>Array : T[]

    b: (...x: Array<string>) => { }
>b : (...x: string[]) => void
>(...x: Array<string>) => { } : (...x: string[]) => void
>x : string[]
>Array : T[]
}
