=== tests/cases/compiler/nestedBlockScopedBindings5.ts ===
function a0() {
>a0 : Symbol(a0, Decl(nestedBlockScopedBindings5.ts, 0, 0))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 1, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 1, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 1, 12))
    }
    for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 4, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 4, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 4, 12))
    }
}

function a1() {
>a1 : Symbol(a1, Decl(nestedBlockScopedBindings5.ts, 7, 1))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 10, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 10, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 10, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 10, 12))
    }
    for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 14, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 14, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 14, 12))
    }
}

function a2() {
>a2 : Symbol(a2, Decl(nestedBlockScopedBindings5.ts, 17, 1))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 20, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 20, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 20, 12))
    }
    for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 23, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 23, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 23, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 23, 12))
    }
}


function a3() {
>a3 : Symbol(a3, Decl(nestedBlockScopedBindings5.ts, 27, 1))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 31, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 31, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 31, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 31, 12))
    }
    for (let x;false;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 35, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 35, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 35, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 35, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 41, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 41, 15))

            break;
    }
    
}

function a4() {
>a4 : Symbol(a4, Decl(nestedBlockScopedBindings5.ts, 46, 1))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 49, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 49, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 49, 12))
    }
    for (let x;false;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 52, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 52, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 52, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 57, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 57, 15))

            break;
    }
    
}

function a5() {
>a5 : Symbol(a5, Decl(nestedBlockScopedBindings5.ts, 62, 1))

    let y;
>y : Symbol(y, Decl(nestedBlockScopedBindings5.ts, 65, 7))

    for (let x in []) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 66, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 66, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 66, 12))
    }
    for (let x;false;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 69, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 69, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 69, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 69, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings5.ts, 75, 15))

            break;
    }
    
}
