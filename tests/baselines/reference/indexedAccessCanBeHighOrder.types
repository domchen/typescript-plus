=== tests/cases/compiler/indexedAccessCanBeHighOrder.ts ===
declare function get<U, Y extends keyof U>(x: U, y: Y): U[Y];
>get : <U, Y extends keyof U>(x: U, y: Y) => U[Y]
>U : U
>Y : Y
>U : U
>x : U
>U : U
>y : Y
>Y : Y
>U : U
>Y : Y

declare function find<T, K extends keyof T>(o: T[K]): [T, K];
>find : <T, K extends keyof T>(o: T[K]) => [T, K]
>T : T
>K : K
>T : T
>o : T[K]
>T : T
>K : K
>T : T
>K : K

function impl<A, B extends keyof A>(a: A, b: B) {
>impl : <A, B extends keyof A>(a: A, b: B) => [A, B]
>A : A
>B : B
>A : A
>a : A
>A : A
>b : B
>B : B

    const item = get(a, b);
>item : A[B]
>get(a, b) : A[B]
>get : <U, Y extends keyof U>(x: U, y: Y) => U[Y]
>a : A
>b : B

    return find(item);
>find(item) : [A, B]
>find : <T, K extends keyof T>(o: T[K]) => [T, K]
>item : A[B]
}

const o = {x: 42};
>o : { x: number; }
>{x: 42} : { x: number; }
>x : number
>42 : 42

const r = impl(o, "x");
>r : [{ x: number; }, "x"]
>impl(o, "x") : [{ x: number; }, "x"]
>impl : <A, B extends keyof A>(a: A, b: B) => [A, B]
>o : { x: number; }
>"x" : "x"

r[0][r[1]] = o[r[1]];
>r[0][r[1]] = o[r[1]] : number
>r[0][r[1]] : number
>r[0] : { x: number; }
>r : [{ x: number; }, "x"]
>0 : 0
>r[1] : "x"
>r : [{ x: number; }, "x"]
>1 : 1
>o[r[1]] : number
>o : { x: number; }
>r[1] : "x"
>r : [{ x: number; }, "x"]
>1 : 1

