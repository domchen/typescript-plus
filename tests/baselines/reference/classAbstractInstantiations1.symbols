=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations1.ts ===
//
// Calling new with (non)abstract classes.
//

abstract class A {}
>A : Symbol(A, Decl(classAbstractInstantiations1.ts, 0, 0))

class B extends A {}
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))
>A : Symbol(A, Decl(classAbstractInstantiations1.ts, 0, 0))

abstract class C extends B {}
>C : Symbol(C, Decl(classAbstractInstantiations1.ts, 6, 20))
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

new A;
>A : Symbol(A, Decl(classAbstractInstantiations1.ts, 0, 0))

new A(1); // should report 1 error
>A : Symbol(A, Decl(classAbstractInstantiations1.ts, 0, 0))

new B;
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

new C;
>C : Symbol(C, Decl(classAbstractInstantiations1.ts, 6, 20))

var a : A;
>a : Symbol(a, Decl(classAbstractInstantiations1.ts, 15, 3))
>A : Symbol(A, Decl(classAbstractInstantiations1.ts, 0, 0))

var b : B;
>b : Symbol(b, Decl(classAbstractInstantiations1.ts, 16, 3))
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

var c : C;
>c : Symbol(c, Decl(classAbstractInstantiations1.ts, 17, 3))
>C : Symbol(C, Decl(classAbstractInstantiations1.ts, 6, 20))

a = new B;
>a : Symbol(a, Decl(classAbstractInstantiations1.ts, 15, 3))
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

b = new B;
>b : Symbol(b, Decl(classAbstractInstantiations1.ts, 16, 3))
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

c = new B;
>c : Symbol(c, Decl(classAbstractInstantiations1.ts, 17, 3))
>B : Symbol(B, Decl(classAbstractInstantiations1.ts, 4, 19))

