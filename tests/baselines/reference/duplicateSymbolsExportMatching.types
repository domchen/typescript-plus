=== tests/cases/compiler/duplicateSymbolsExportMatching.ts ===
module M {
>M : typeof M

    export interface E { }
>E : E

    interface I { }
>I : I
}
module M {
>M : typeof M

    export interface E { } // ok
>E : E

    interface I { } // ok
>I : I
}

// Doesn't match export visibility, but it's in a different parent, so it's ok
module M {
>M : typeof M

    interface E { } // ok
>E : E

    export interface I { } // ok
>I : I
}

module N {
>N : any

    interface I { }
>I : I

    interface I { } // ok
>I : I

    export interface E { }
>E : E

    export interface E { } // ok
>E : E
}

module N2 {
>N2 : any

    interface I { }
>I : I

    export interface I { } // error
>I : N2.I

    export interface E { }
>E : N2.E

    interface E { } // error
>E : E
}

// Should report error only once for instantiated module
module M {
>M : typeof M

    module inst {
>inst : typeof inst

        var t;
>t : any
    }
    export module inst { // one error
>inst : typeof M.inst

        var t;
>t : any
    }
}

// Variables of the same / different type
module M2 {
>M2 : typeof M2

    var v: string;
>v : string

    export var v: string; // one error (visibility)
>v : string

    var w: number;
>w : number

    export var w: string; // two errors (visibility and type mismatch)
>w : string
}

module M {
>M : typeof M

    module F {
>F : typeof F

        var t;
>t : any
    }
    export function F() { } // Only one error for duplicate identifier (don't consider visibility)
>F : () => void
}

module M {
>M : typeof M

    class C { }
>C : C

    module C { }
>C : typeof C

    export module C { // Two visibility errors (one for the clodule symbol, and one for the merged container symbol)
>C : typeof M.C

        var t;
>t : any
    }
}

// Top level
interface D { }
>D : D

export interface D { }
>D : D

