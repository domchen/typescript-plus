=== tests/cases/compiler/implicitAnyFunctionReturnNullOrUndefined.ts ===
// this should be an error
function nullWidenFunction() { return null;}             // error at "nullWidenFunction"
>nullWidenFunction : Symbol(nullWidenFunction, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 0, 0))

function undefinedWidenFunction() { return undefined; }  // error at "undefinedWidenFunction"
>undefinedWidenFunction : Symbol(undefinedWidenFunction, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 1, 44))
>undefined : Symbol(undefined)

class C {
>C : Symbol(C, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 2, 55))

    nullWidenFuncOfC() {  // error at "nullWidenFuncOfC"
>nullWidenFuncOfC : Symbol(C.nullWidenFuncOfC, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 4, 9))

        return null;
    }

    underfinedWidenFuncOfC() {  // error at "underfinedWidenFuncOfC"
>underfinedWidenFuncOfC : Symbol(C.underfinedWidenFuncOfC, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 7, 5))

        return undefined;
>undefined : Symbol(undefined)
    }
}

// this should not be an error
function foo1(): any { return null; }
>foo1 : Symbol(foo1, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 12, 1))

function bar1(): any { return undefined; }
>bar1 : Symbol(bar1, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 15, 37))
>undefined : Symbol(undefined)

function fooBar(): number { return 1; }
>fooBar : Symbol(fooBar, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 16, 42))

function fooFoo() { return 5; }
>fooFoo : Symbol(fooFoo, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 17, 39))

// this should not be an error as the error is raised by expr above
nullWidenFunction();
>nullWidenFunction : Symbol(nullWidenFunction, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 0, 0))

undefinedWidenFunction();
>undefinedWidenFunction : Symbol(undefinedWidenFunction, Decl(implicitAnyFunctionReturnNullOrUndefined.ts, 1, 44))

