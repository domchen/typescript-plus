=== tests/cases/compiler/multipleExportAssignments.ts ===
interface connectModule {
>connectModule : Symbol(connectModule, Decl(multipleExportAssignments.ts, 0, 0))

    (res, req, next): void;
>res : Symbol(res, Decl(multipleExportAssignments.ts, 1, 5))
>req : Symbol(req, Decl(multipleExportAssignments.ts, 1, 9))
>next : Symbol(next, Decl(multipleExportAssignments.ts, 1, 14))
}
interface connectExport {
>connectExport : Symbol(connectExport, Decl(multipleExportAssignments.ts, 2, 1))

    use: (mod: connectModule) => connectExport;
>use : Symbol(connectExport.use, Decl(multipleExportAssignments.ts, 3, 25))
>mod : Symbol(mod, Decl(multipleExportAssignments.ts, 4, 10))
>connectModule : Symbol(connectModule, Decl(multipleExportAssignments.ts, 0, 0))
>connectExport : Symbol(connectExport, Decl(multipleExportAssignments.ts, 2, 1))

    listen: (port: number) => void;
>listen : Symbol(connectExport.listen, Decl(multipleExportAssignments.ts, 4, 47))
>port : Symbol(port, Decl(multipleExportAssignments.ts, 5, 13))
}
var server: {
>server : Symbol(server, Decl(multipleExportAssignments.ts, 7, 3))

    (): connectExport;
>connectExport : Symbol(connectExport, Decl(multipleExportAssignments.ts, 2, 1))

    test1: connectModule;
>test1 : Symbol(test1, Decl(multipleExportAssignments.ts, 8, 22))
>connectModule : Symbol(connectModule, Decl(multipleExportAssignments.ts, 0, 0))

    test2(): connectModule;
>test2 : Symbol(test2, Decl(multipleExportAssignments.ts, 9, 25))
>connectModule : Symbol(connectModule, Decl(multipleExportAssignments.ts, 0, 0))

};
export = server;
>server : Symbol(server, Decl(multipleExportAssignments.ts, 7, 3))

export = connectExport;
>connectExport : Symbol(connectExport, Decl(multipleExportAssignments.ts, 2, 1))
 

