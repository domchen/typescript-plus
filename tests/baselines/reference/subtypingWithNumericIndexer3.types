=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer3.ts ===
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
>Base : Base
>foo : string

interface Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : string

interface Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : string

class A {
>A : A

    [x: number]: Derived;
>x : number
>Derived : Derived
}

class B extends A {
>B : B
>A : A

    [x: number]: Base; // error
>x : number
>Base : Base
}

class B2 extends A {
>B2 : B2
>A : A

    [x: number]: Derived2; // ok
>x : number
>Derived2 : Derived2
}

module Generics {
>Generics : typeof Generics

    class A<T extends Derived> {
>A : A<T>
>T : T
>Derived : Derived

        [x: number]: T;
>x : number
>T : T
    }

    class B extends A<Base> {
>B : B
>A : A<Base>
>Base : Base

        [x: number]: Derived; // error
>x : number
>Derived : Derived
    }

    class B2 extends A<Derived> {
>B2 : B2
>A : A<Derived>
>Derived : Derived

        [x: number]: Derived2; // ok
>x : number
>Derived2 : Derived2
    }

    class B3<T extends Derived> extends A<T> {
>B3 : B3<T>
>T : T
>Derived : Derived
>A : A<T>
>T : T

        [x: number]: Base; // error
>x : number
>Base : Base
    }

    class B4<T extends Derived> extends A<T> {
>B4 : B4<T>
>T : T
>Derived : Derived
>A : A<T>
>T : T

        [x: number]: Derived; // error
>x : number
>Derived : Derived
    }

    class B5<T extends Derived2> extends A<T> {
>B5 : B5<T>
>T : T
>Derived2 : Derived2
>A : A<T>
>T : T

        [x: number]: Derived2; // error
>x : number
>Derived2 : Derived2
    }
}
