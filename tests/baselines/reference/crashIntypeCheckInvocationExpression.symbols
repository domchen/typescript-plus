=== tests/cases/compiler/crashIntypeCheckInvocationExpression.ts ===
var nake;
>nake : Symbol(nake, Decl(crashIntypeCheckInvocationExpression.ts, 0, 3))

function doCompile<P0, P1, P2>(fileset: P0, moduleType: P1) {
>doCompile : Symbol(doCompile, Decl(crashIntypeCheckInvocationExpression.ts, 0, 9))
>P0 : Symbol(P0, Decl(crashIntypeCheckInvocationExpression.ts, 1, 19))
>P1 : Symbol(P1, Decl(crashIntypeCheckInvocationExpression.ts, 1, 22))
>P2 : Symbol(P2, Decl(crashIntypeCheckInvocationExpression.ts, 1, 26))
>fileset : Symbol(fileset, Decl(crashIntypeCheckInvocationExpression.ts, 1, 31))
>P0 : Symbol(P0, Decl(crashIntypeCheckInvocationExpression.ts, 1, 19))
>moduleType : Symbol(moduleType, Decl(crashIntypeCheckInvocationExpression.ts, 1, 43))
>P1 : Symbol(P1, Decl(crashIntypeCheckInvocationExpression.ts, 1, 22))

    return undefined;
>undefined : Symbol(undefined)
}
export var compileServer = task<number, number, any>(<P0, P1, P2>() => {
>compileServer : Symbol(compileServer, Decl(crashIntypeCheckInvocationExpression.ts, 5, 10))
>P0 : Symbol(P0, Decl(crashIntypeCheckInvocationExpression.ts, 5, 54))
>P1 : Symbol(P1, Decl(crashIntypeCheckInvocationExpression.ts, 5, 57))
>P2 : Symbol(P2, Decl(crashIntypeCheckInvocationExpression.ts, 5, 61))

    var folder = path.join(),
>folder : Symbol(folder, Decl(crashIntypeCheckInvocationExpression.ts, 7, 7))

        fileset = nake.fileSetSync<number, number, any>(folder)
>fileset : Symbol(fileset, Decl(crashIntypeCheckInvocationExpression.ts, 7, 29))
>nake : Symbol(nake, Decl(crashIntypeCheckInvocationExpression.ts, 0, 3))
>folder : Symbol(folder, Decl(crashIntypeCheckInvocationExpression.ts, 7, 7))

  return doCompile<number, number, any>(fileset, moduleType);
>doCompile : Symbol(doCompile, Decl(crashIntypeCheckInvocationExpression.ts, 0, 9))
>fileset : Symbol(fileset, Decl(crashIntypeCheckInvocationExpression.ts, 7, 29))

});

