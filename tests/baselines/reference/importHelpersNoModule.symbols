=== tests/cases/compiler/external.ts ===
export class A { }
>A : Symbol(A, Decl(external.ts, 0, 0))

export class B extends A { }
>B : Symbol(B, Decl(external.ts, 0, 18))
>A : Symbol(A, Decl(external.ts, 0, 0))

declare var dec: any;
>dec : Symbol(dec, Decl(external.ts, 3, 11))

@dec
>dec : Symbol(dec, Decl(external.ts, 3, 11))

class C {
>C : Symbol(C, Decl(external.ts, 3, 21))

    method(@dec x: number) {
>method : Symbol(C.method, Decl(external.ts, 6, 9))
>dec : Symbol(dec, Decl(external.ts, 3, 11))
>x : Symbol(x, Decl(external.ts, 7, 11))
    }
}

=== tests/cases/compiler/script.ts ===
class A { }
>A : Symbol(A, Decl(script.ts, 0, 0))

class B extends A { }
>B : Symbol(B, Decl(script.ts, 0, 11))
>A : Symbol(A, Decl(script.ts, 0, 0))

declare var dec: any;
>dec : Symbol(dec, Decl(script.ts, 3, 11))

@dec
>dec : Symbol(dec, Decl(script.ts, 3, 11))

class C {
>C : Symbol(C, Decl(script.ts, 3, 21))

    method(@dec x: number) {
>method : Symbol(C.method, Decl(script.ts, 6, 9))
>dec : Symbol(dec, Decl(script.ts, 3, 11))
>x : Symbol(x, Decl(script.ts, 7, 11))
    }
}

