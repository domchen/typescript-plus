=== tests/cases/conformance/types/typeRelationships/instanceOf/narrowingConstrainedTypeVariable.ts ===
// Repro from #20138

class C { }
>C : Symbol(C, Decl(narrowingConstrainedTypeVariable.ts, 0, 0))

function f1<T extends C>(v: T | string): void {
>f1 : Symbol(f1, Decl(narrowingConstrainedTypeVariable.ts, 2, 11))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 4, 12))
>C : Symbol(C, Decl(narrowingConstrainedTypeVariable.ts, 0, 0))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 4, 25))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 4, 12))

    if (v instanceof C) {
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 4, 25))
>C : Symbol(C, Decl(narrowingConstrainedTypeVariable.ts, 0, 0))

        const x: T = v;
>x : Symbol(x, Decl(narrowingConstrainedTypeVariable.ts, 6, 13))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 4, 12))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 4, 25))
    }
    else {
        const s: string = v;
>s : Symbol(s, Decl(narrowingConstrainedTypeVariable.ts, 9, 13))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 4, 25))
    }
}

class D { }
>D : Symbol(D, Decl(narrowingConstrainedTypeVariable.ts, 11, 1))

function f2<T extends C, U extends D>(v: T | U) {
>f2 : Symbol(f2, Decl(narrowingConstrainedTypeVariable.ts, 13, 11))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 15, 12))
>C : Symbol(C, Decl(narrowingConstrainedTypeVariable.ts, 0, 0))
>U : Symbol(U, Decl(narrowingConstrainedTypeVariable.ts, 15, 24))
>D : Symbol(D, Decl(narrowingConstrainedTypeVariable.ts, 11, 1))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 15, 38))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 15, 12))
>U : Symbol(U, Decl(narrowingConstrainedTypeVariable.ts, 15, 24))

    if (v instanceof C) {
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 15, 38))
>C : Symbol(C, Decl(narrowingConstrainedTypeVariable.ts, 0, 0))

        const x: T = v;
>x : Symbol(x, Decl(narrowingConstrainedTypeVariable.ts, 17, 13))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 15, 12))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 15, 38))
    }
    else {
        const y: U = v;
>y : Symbol(y, Decl(narrowingConstrainedTypeVariable.ts, 20, 13))
>U : Symbol(U, Decl(narrowingConstrainedTypeVariable.ts, 15, 24))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 15, 38))
    }
}

class E { x: string | undefined }
>E : Symbol(E, Decl(narrowingConstrainedTypeVariable.ts, 22, 1))
>x : Symbol(E.x, Decl(narrowingConstrainedTypeVariable.ts, 24, 9))

function f3<T extends E>(v: T | { x: string }) {
>f3 : Symbol(f3, Decl(narrowingConstrainedTypeVariable.ts, 24, 33))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 26, 12))
>E : Symbol(E, Decl(narrowingConstrainedTypeVariable.ts, 22, 1))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 26, 25))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 26, 12))
>x : Symbol(x, Decl(narrowingConstrainedTypeVariable.ts, 26, 33))

    if (v instanceof E) {
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 26, 25))
>E : Symbol(E, Decl(narrowingConstrainedTypeVariable.ts, 22, 1))

        const x: T = v;
>x : Symbol(x, Decl(narrowingConstrainedTypeVariable.ts, 28, 13))
>T : Symbol(T, Decl(narrowingConstrainedTypeVariable.ts, 26, 12))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 26, 25))
    }
    else {
        const y: { x: string } = v;
>y : Symbol(y, Decl(narrowingConstrainedTypeVariable.ts, 31, 13))
>x : Symbol(x, Decl(narrowingConstrainedTypeVariable.ts, 31, 18))
>v : Symbol(v, Decl(narrowingConstrainedTypeVariable.ts, 26, 25))
    }
}

