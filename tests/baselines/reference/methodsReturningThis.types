=== tests/cases/conformance/salsa/input.js ===
function Class()
>Class : typeof Class
{
}

// error: 'Class' doesn't have property 'notPresent'
Class.prototype.containsError = function () { return this.notPresent; };
>Class.prototype.containsError = function () { return this.notPresent; } : () => any
>Class.prototype.containsError : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>containsError : any
>function () { return this.notPresent; } : () => any
>this.notPresent : error
>this : Class
>notPresent : any

// lots of methods that return this, which caused out-of-memory in #9527
Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; };
>Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => Class
>Class.prototype.m1 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m1 : any
>function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => Class
>a : any
>b : any
>c : any
>d : any
>tx : any
>ty : any
>this : Class

Class.prototype.m2 = function (x, y) { return this; };
>Class.prototype.m2 = function (x, y) { return this; } : (x: any, y: any) => Class
>Class.prototype.m2 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m2 : any
>function (x, y) { return this; } : (x: any, y: any) => Class
>x : any
>y : any
>this : Class

Class.prototype.m3 = function (x, y) { return this; };
>Class.prototype.m3 = function (x, y) { return this; } : (x: any, y: any) => Class
>Class.prototype.m3 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m3 : any
>function (x, y) { return this; } : (x: any, y: any) => Class
>x : any
>y : any
>this : Class

Class.prototype.m4 = function (angle) { return this; };
>Class.prototype.m4 = function (angle) { return this; } : (angle: any) => Class
>Class.prototype.m4 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m4 : any
>function (angle) { return this; } : (angle: any) => Class
>angle : any
>this : Class

Class.prototype.m5 = function (matrix) { return this; };
>Class.prototype.m5 = function (matrix) { return this; } : (matrix: any) => Class
>Class.prototype.m5 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m5 : any
>function (matrix) { return this; } : (matrix: any) => Class
>matrix : any
>this : Class

Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; };
>Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => Class
>Class.prototype.m6 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m6 : any
>function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => Class
>x : any
>y : any
>pivotX : any
>pivotY : any
>scaleX : any
>scaleY : any
>rotation : any
>skewX : any
>skewY : any
>this : Class

Class.prototype.m7 = function(matrix) { return this; };
>Class.prototype.m7 = function(matrix) { return this; } : (matrix: any) => Class
>Class.prototype.m7 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m7 : any
>function(matrix) { return this; } : (matrix: any) => Class
>matrix : any
>this : Class

Class.prototype.m8 = function() { return this; };
>Class.prototype.m8 = function() { return this; } : () => Class
>Class.prototype.m8 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m8 : any
>function() { return this; } : () => Class
>this : Class

Class.prototype.m9 = function () { return this; };
>Class.prototype.m9 = function () { return this; } : () => Class
>Class.prototype.m9 : any
>Class.prototype : any
>Class : typeof Class
>prototype : any
>m9 : any
>function () { return this; } : () => Class
>this : Class


