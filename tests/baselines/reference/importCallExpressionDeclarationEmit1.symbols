=== tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit1.ts ===
declare function getSpecifier(): string;
>getSpecifier : Symbol(getSpecifier, Decl(importCallExpressionDeclarationEmit1.ts, 0, 0))

declare var whatToLoad: boolean;
>whatToLoad : Symbol(whatToLoad, Decl(importCallExpressionDeclarationEmit1.ts, 1, 11))

declare const directory: string;
>directory : Symbol(directory, Decl(importCallExpressionDeclarationEmit1.ts, 2, 13))

declare const moduleFile: number;
>moduleFile : Symbol(moduleFile, Decl(importCallExpressionDeclarationEmit1.ts, 3, 13))

import(getSpecifier());
>getSpecifier : Symbol(getSpecifier, Decl(importCallExpressionDeclarationEmit1.ts, 0, 0))

var p0 = import(`${directory}\${moduleFile}`);
>p0 : Symbol(p0, Decl(importCallExpressionDeclarationEmit1.ts, 7, 3))
>directory : Symbol(directory, Decl(importCallExpressionDeclarationEmit1.ts, 2, 13))

var p1 = import(getSpecifier());
>p1 : Symbol(p1, Decl(importCallExpressionDeclarationEmit1.ts, 8, 3))
>getSpecifier : Symbol(getSpecifier, Decl(importCallExpressionDeclarationEmit1.ts, 0, 0))

const p2 = import(whatToLoad ? getSpecifier() : "defaulPath")
>p2 : Symbol(p2, Decl(importCallExpressionDeclarationEmit1.ts, 9, 5))
>whatToLoad : Symbol(whatToLoad, Decl(importCallExpressionDeclarationEmit1.ts, 1, 11))
>getSpecifier : Symbol(getSpecifier, Decl(importCallExpressionDeclarationEmit1.ts, 0, 0))

function returnDynamicLoad(path: string) {
>returnDynamicLoad : Symbol(returnDynamicLoad, Decl(importCallExpressionDeclarationEmit1.ts, 9, 61))
>path : Symbol(path, Decl(importCallExpressionDeclarationEmit1.ts, 11, 27))

    return import(path);
>path : Symbol(path, Decl(importCallExpressionDeclarationEmit1.ts, 11, 27))
}
