=== tests/cases/compiler/cloduleGenericOnSelfMember.ts ===
class ServiceBase<T> {
>ServiceBase : Symbol(ServiceBase, Decl(cloduleGenericOnSelfMember.ts, 0, 0))
>T : Symbol(T, Decl(cloduleGenericOnSelfMember.ts, 0, 18))

    field: T;
>field : Symbol(ServiceBase.field, Decl(cloduleGenericOnSelfMember.ts, 0, 22))
>T : Symbol(T, Decl(cloduleGenericOnSelfMember.ts, 0, 18))
}
class Service extends ServiceBase<typeof Service.Base> {
>Service : Symbol(Service, Decl(cloduleGenericOnSelfMember.ts, 2, 1), Decl(cloduleGenericOnSelfMember.ts, 4, 1))
>ServiceBase : Symbol(ServiceBase, Decl(cloduleGenericOnSelfMember.ts, 0, 0))
>Service.Base : Symbol(Service.Base, Decl(cloduleGenericOnSelfMember.ts, 6, 16))
>Service : Symbol(Service, Decl(cloduleGenericOnSelfMember.ts, 2, 1), Decl(cloduleGenericOnSelfMember.ts, 4, 1))
>Base : Symbol(Service.Base, Decl(cloduleGenericOnSelfMember.ts, 6, 16))
}
namespace Service {
>Service : Symbol(Service, Decl(cloduleGenericOnSelfMember.ts, 2, 1), Decl(cloduleGenericOnSelfMember.ts, 4, 1))

    export const Base = {
>Base : Symbol(Base, Decl(cloduleGenericOnSelfMember.ts, 6, 16))

        name: "1",
>name : Symbol(name, Decl(cloduleGenericOnSelfMember.ts, 6, 25))

        value: 5
>value : Symbol(value, Decl(cloduleGenericOnSelfMember.ts, 7, 18))

    };
}
