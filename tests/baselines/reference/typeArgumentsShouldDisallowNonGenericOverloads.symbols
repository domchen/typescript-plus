=== tests/cases/compiler/typeArgumentsShouldDisallowNonGenericOverloads.ts ===
function foo(a: string): string;
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))
>a : Symbol(a, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 13))

function foo<T>(a: T): number;
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))
>T : Symbol(T, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 13))
>a : Symbol(a, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 16))
>T : Symbol(T, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 13))

function foo(a: any): any {
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))
>a : Symbol(a, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 2, 13))

    return "hi";
}

var x: number = foo<string>("hi"); // return type should be 'number'
>x : Symbol(x, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 6, 3))
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))

var y: string = foo("hi"); // return type should be 'string'
>y : Symbol(y, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 7, 3))
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))

var w: string = foo<string>("hi"); // should error
>w : Symbol(w, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 9, 3))
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))

var z: number = foo("hi"); // should error
>z : Symbol(z, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 10, 3))
>foo : Symbol(foo, Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 0), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 0, 32), Decl(typeArgumentsShouldDisallowNonGenericOverloads.ts, 1, 30))

