=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithRecursiveConstraints.ts ===
// checking whether other types are subtypes of type parameters with constraints

class Foo<T> { foo: T; }
>Foo : Foo<T>
>T : T
>foo : T
>T : T

function f<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>>(t: T, u: U, v: V) {
>f : <T extends Foo<U>, U extends Foo<T>, V extends Foo<V>>(t: T, u: U, v: V) => void
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V

    // ok
    var r1 = true ? t : u;
>r1 : U | T
>true ? t : u : U | T
>true : true
>t : T
>u : U

    var r1 = true ? u : t;
>r1 : U | T
>true ? u : t : U | T
>true : true
>u : U
>t : T

    // ok
    var r2 = true ? t : v;
>r2 : T | V
>true ? t : v : T | V
>true : true
>t : T
>v : V

    var r2 = true ? v : t;
>r2 : T | V
>true ? v : t : T | V
>true : true
>v : V
>t : T

    // ok
    var r3 = true ? v : u;
>r3 : U | V
>true ? v : u : U | V
>true : true
>v : V
>u : U

    var r3 = true ? u : v;
>r3 : U | V
>true ? u : v : U | V
>true : true
>u : U
>v : V

    // ok
    var r4 = true ? t : new Foo<T>();
>r4 : T | Foo<T>
>true ? t : new Foo<T>() : T | Foo<T>
>true : true
>t : T
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T

    var r4 = true ? new Foo<T>() : t;
>r4 : T | Foo<T>
>true ? new Foo<T>() : t : T | Foo<T>
>true : true
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T
>t : T

    // ok
    var r5 = true ? u : new Foo<T>();
>r5 : Foo<T>
>true ? u : new Foo<T>() : Foo<T>
>true : true
>u : U
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T

    var r5 = true ? new Foo<T>() : u;
>r5 : Foo<T>
>true ? new Foo<T>() : u : Foo<T>
>true : true
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T
>u : U

    // ok
    var r6 = true ? v : new Foo<T>();
>r6 : Foo<T> | V
>true ? v : new Foo<T>() : Foo<T> | V
>true : true
>v : V
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T

    var r6 = true ? new Foo<T>() : v;
>r6 : Foo<T> | V
>true ? new Foo<T>() : v : Foo<T> | V
>true : true
>new Foo<T>() : Foo<T>
>Foo : typeof Foo
>T : T
>v : V


    // ok
    var r7 = true ? t : new Foo<U>();
>r7 : Foo<U>
>true ? t : new Foo<U>() : Foo<U>
>true : true
>t : T
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U

    var r7 = true ? new Foo<U>() : t;
>r7 : Foo<U>
>true ? new Foo<U>() : t : Foo<U>
>true : true
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U
>t : T

    // ok
    var r8 = true ? u : new Foo<U>();
>r8 : U | Foo<U>
>true ? u : new Foo<U>() : U | Foo<U>
>true : true
>u : U
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U

    var r8 = true ? new Foo<U>() : u;
>r8 : U | Foo<U>
>true ? new Foo<U>() : u : U | Foo<U>
>true : true
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U
>u : U

    // ok
    var r9 = true ? v : new Foo<U>();
>r9 : Foo<U> | V
>true ? v : new Foo<U>() : Foo<U> | V
>true : true
>v : V
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U

    var r9 = true ? new Foo<U>() : v;
>r9 : Foo<U> | V
>true ? new Foo<U>() : v : Foo<U> | V
>true : true
>new Foo<U>() : Foo<U>
>Foo : typeof Foo
>U : U
>v : V


    // ok
    var r10 = true ? t : new Foo<V>();
>r10 : T | Foo<V>
>true ? t : new Foo<V>() : T | Foo<V>
>true : true
>t : T
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V

    var r10 = true ? new Foo<V>() : t;
>r10 : T | Foo<V>
>true ? new Foo<V>() : t : T | Foo<V>
>true : true
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V
>t : T

    // ok
    var r11 = true ? u : new Foo<V>();
>r11 : U | Foo<V>
>true ? u : new Foo<V>() : U | Foo<V>
>true : true
>u : U
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V

    var r11 = true ? new Foo<V>() : u;
>r11 : U | Foo<V>
>true ? new Foo<V>() : u : U | Foo<V>
>true : true
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V
>u : U

    // ok
    var r12 = true ? v : new Foo<V>();
>r12 : Foo<V>
>true ? v : new Foo<V>() : Foo<V>
>true : true
>v : V
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V

    var r12 = true ? new Foo<V>() : v;
>r12 : Foo<V>
>true ? new Foo<V>() : v : Foo<V>
>true : true
>new Foo<V>() : Foo<V>
>Foo : typeof Foo
>V : V
>v : V
}

module M1 {
>M1 : typeof M1

    class Base<T> {
>Base : Base<T>
>T : T

        foo: T;
>foo : T
>T : T
    }

    class D1<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D1 : D1<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: T
>foo : T
>T : T
    }

    class D2<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D2 : D2<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: U
>foo : U
>U : U
    }

    class D3<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D3 : D3<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: V
>foo : V
>V : V
    }

    class D4<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D4 : D4<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: T
>foo : T
>T : T
    }

    class D5<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D5 : D5<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: U
>foo : U
>U : U
    }

    class D6<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D6 : D6<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: V
>foo : V
>V : V
    }

    class D7<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D7 : D7<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: T
>foo : T
>T : T
    }

    class D8<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D8 : D8<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: U
>foo : U
>U : U
    }

    class D9<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D9 : D9<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base : Base<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: V
>foo : V
>V : V
    }
}


module M2 {
>M2 : typeof M2

    class Base2<T> {
>Base2 : Base2<T>
>T : T

        foo: Foo<T>;
>foo : Foo<T>
>Foo : Foo<T>
>T : T
    }

    class D1<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D1 : D1<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: T
>foo : T
>T : T
    }

    class D2<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D2 : D2<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: U
>foo : U
>U : U
    }

    class D3<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D3 : D3<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<T>
>T : T

        [x: string]: T;
>x : string
>T : T

        foo: V
>foo : V
>V : V
    }

    class D4<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D4 : D4<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: T
>foo : T
>T : T
    }

    class D5<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D5 : D5<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: U
>foo : U
>U : U
    }

    class D6<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D6 : D6<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<U>
>U : U

        [x: string]: U;
>x : string
>U : U

        foo: V
>foo : V
>V : V
    }

    class D7<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D7 : D7<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: T
>foo : T
>T : T
    }

    class D8<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D8 : D8<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: U
>foo : U
>U : U
    }

    class D9<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D9 : D9<T, U, V>
>T : T
>Foo : Foo<T>
>U : U
>U : U
>Foo : Foo<T>
>T : T
>V : V
>Foo : Foo<T>
>V : V
>Base2 : Base2<V>
>V : V

        [x: string]: V;
>x : string
>V : V

        foo: V
>foo : V
>V : V
    }
}
