=== tests/cases/compiler/infinitelyExpandingTypes2.ts ===
interface Foo<T> {
>Foo : Symbol(Foo, Decl(infinitelyExpandingTypes2.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes2.ts, 0, 14))

    x: Foo<Foo<T>>;
>x : Symbol(Foo.x, Decl(infinitelyExpandingTypes2.ts, 0, 18))
>Foo : Symbol(Foo, Decl(infinitelyExpandingTypes2.ts, 0, 0))
>Foo : Symbol(Foo, Decl(infinitelyExpandingTypes2.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes2.ts, 0, 14))
} 

interface Bar<T> extends Foo<T> {
>Bar : Symbol(Bar, Decl(infinitelyExpandingTypes2.ts, 2, 1))
>T : Symbol(T, Decl(infinitelyExpandingTypes2.ts, 4, 14))
>Foo : Symbol(Foo, Decl(infinitelyExpandingTypes2.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes2.ts, 4, 14))

    y: string;
>y : Symbol(Bar.y, Decl(infinitelyExpandingTypes2.ts, 4, 33))
}

function f(p: Foo<number>) {
>f : Symbol(f, Decl(infinitelyExpandingTypes2.ts, 6, 1))
>p : Symbol(p, Decl(infinitelyExpandingTypes2.ts, 8, 11))
>Foo : Symbol(Foo, Decl(infinitelyExpandingTypes2.ts, 0, 0))

    console.log(p);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>p : Symbol(p, Decl(infinitelyExpandingTypes2.ts, 8, 11))
}

var v: Bar<number> = null;
>v : Symbol(v, Decl(infinitelyExpandingTypes2.ts, 12, 3))
>Bar : Symbol(Bar, Decl(infinitelyExpandingTypes2.ts, 2, 1))

f(v); // should not error
>f : Symbol(f, Decl(infinitelyExpandingTypes2.ts, 6, 1))
>v : Symbol(v, Decl(infinitelyExpandingTypes2.ts, 12, 3))

