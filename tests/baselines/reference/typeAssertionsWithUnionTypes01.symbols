=== tests/cases/conformance/types/typeRelationships/comparable/typeAssertionsWithUnionTypes01.ts ===
interface I1 {
>I1 : Symbol(I1, Decl(typeAssertionsWithUnionTypes01.ts, 0, 0))

    p1: number
>p1 : Symbol(I1.p1, Decl(typeAssertionsWithUnionTypes01.ts, 0, 14))
}

interface I2 extends I1 {
>I2 : Symbol(I2, Decl(typeAssertionsWithUnionTypes01.ts, 2, 1))
>I1 : Symbol(I1, Decl(typeAssertionsWithUnionTypes01.ts, 0, 0))

    p2: number;
>p2 : Symbol(I2.p2, Decl(typeAssertionsWithUnionTypes01.ts, 4, 25))
}

var x = { p1: 10, p2: 20 };
>x : Symbol(x, Decl(typeAssertionsWithUnionTypes01.ts, 8, 3))
>p1 : Symbol(p1, Decl(typeAssertionsWithUnionTypes01.ts, 8, 9))
>p2 : Symbol(p2, Decl(typeAssertionsWithUnionTypes01.ts, 8, 17))

var y: number | I2 = x;
>y : Symbol(y, Decl(typeAssertionsWithUnionTypes01.ts, 9, 3))
>I2 : Symbol(I2, Decl(typeAssertionsWithUnionTypes01.ts, 2, 1))
>x : Symbol(x, Decl(typeAssertionsWithUnionTypes01.ts, 8, 3))

var z: I1 = x;
>z : Symbol(z, Decl(typeAssertionsWithUnionTypes01.ts, 10, 3))
>I1 : Symbol(I1, Decl(typeAssertionsWithUnionTypes01.ts, 0, 0))
>x : Symbol(x, Decl(typeAssertionsWithUnionTypes01.ts, 8, 3))

var a = <number | I2>z;
>a : Symbol(a, Decl(typeAssertionsWithUnionTypes01.ts, 12, 3))
>I2 : Symbol(I2, Decl(typeAssertionsWithUnionTypes01.ts, 2, 1))
>z : Symbol(z, Decl(typeAssertionsWithUnionTypes01.ts, 10, 3))

var b = <number>z;
>b : Symbol(b, Decl(typeAssertionsWithUnionTypes01.ts, 13, 3))
>z : Symbol(z, Decl(typeAssertionsWithUnionTypes01.ts, 10, 3))

var c = <I2>z;
>c : Symbol(c, Decl(typeAssertionsWithUnionTypes01.ts, 14, 3))
>I2 : Symbol(I2, Decl(typeAssertionsWithUnionTypes01.ts, 2, 1))
>z : Symbol(z, Decl(typeAssertionsWithUnionTypes01.ts, 10, 3))

var d = <I1>y;
>d : Symbol(d, Decl(typeAssertionsWithUnionTypes01.ts, 15, 3))
>I1 : Symbol(I1, Decl(typeAssertionsWithUnionTypes01.ts, 0, 0))
>y : Symbol(y, Decl(typeAssertionsWithUnionTypes01.ts, 9, 3))

