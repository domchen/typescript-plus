=== tests/cases/compiler/maxConstraints.ts ===
interface Comparable<T> {
>Comparable : Comparable<T>
>T : T

    compareTo(other: T): number;
>compareTo : (other: T) => number
>other : T
>T : T
}
interface Comparer {
>Comparer : Comparer

    <T extends Comparable<T>>(x: T, y: T): T;
>T : T
>Comparable : Comparable<T>
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
}
var max2: Comparer = (x, y) => { return (x.compareTo(y) > 0) ? x : y };
>max2 : Comparer
>Comparer : Comparer
>(x, y) => { return (x.compareTo(y) > 0) ? x : y } : <T extends Comparable<T>>(x: T, y: T) => T
>x : T
>y : T
>(x.compareTo(y) > 0) ? x : y : T
>(x.compareTo(y) > 0) : boolean
>x.compareTo(y) > 0 : boolean
>x.compareTo(y) : number
>x.compareTo : (other: T) => number
>x : T
>compareTo : (other: T) => number
>y : T
>0 : 0
>x : T
>y : T

var maxResult = max2(1, 2);
>maxResult : any
>max2(1, 2) : any
>max2 : Comparer
>1 : 1
>2 : 2

