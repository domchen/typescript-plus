=== tests/cases/compiler/functionOverloadsOutOfOrder.ts ===
class d {
>d : Symbol(d, Decl(functionOverloadsOutOfOrder.ts, 0, 0))

    private foo(n: number): string;
>foo : Symbol(d.foo, Decl(functionOverloadsOutOfOrder.ts, 0, 9), Decl(functionOverloadsOutOfOrder.ts, 1, 35), Decl(functionOverloadsOutOfOrder.ts, 4, 5))
>n : Symbol(n, Decl(functionOverloadsOutOfOrder.ts, 1, 16))

    private foo(ns: any) {
>foo : Symbol(d.foo, Decl(functionOverloadsOutOfOrder.ts, 0, 9), Decl(functionOverloadsOutOfOrder.ts, 1, 35), Decl(functionOverloadsOutOfOrder.ts, 4, 5))
>ns : Symbol(ns, Decl(functionOverloadsOutOfOrder.ts, 2, 16))

        return ns.toString();
>ns : Symbol(ns, Decl(functionOverloadsOutOfOrder.ts, 2, 16))
    }
    private foo(s: string): string;
>foo : Symbol(d.foo, Decl(functionOverloadsOutOfOrder.ts, 0, 9), Decl(functionOverloadsOutOfOrder.ts, 1, 35), Decl(functionOverloadsOutOfOrder.ts, 4, 5))
>s : Symbol(s, Decl(functionOverloadsOutOfOrder.ts, 5, 16))
}

class e {
>e : Symbol(e, Decl(functionOverloadsOutOfOrder.ts, 6, 1))

    private foo(ns: any) {
>foo : Symbol(e.foo, Decl(functionOverloadsOutOfOrder.ts, 8, 9), Decl(functionOverloadsOutOfOrder.ts, 11, 5), Decl(functionOverloadsOutOfOrder.ts, 12, 35))
>ns : Symbol(ns, Decl(functionOverloadsOutOfOrder.ts, 9, 16))

        return ns.toString();
>ns : Symbol(ns, Decl(functionOverloadsOutOfOrder.ts, 9, 16))
    }
    private foo(s: string): string;
>foo : Symbol(e.foo, Decl(functionOverloadsOutOfOrder.ts, 8, 9), Decl(functionOverloadsOutOfOrder.ts, 11, 5), Decl(functionOverloadsOutOfOrder.ts, 12, 35))
>s : Symbol(s, Decl(functionOverloadsOutOfOrder.ts, 12, 16))

    private foo(n: number): string;
>foo : Symbol(e.foo, Decl(functionOverloadsOutOfOrder.ts, 8, 9), Decl(functionOverloadsOutOfOrder.ts, 11, 5), Decl(functionOverloadsOutOfOrder.ts, 12, 35))
>n : Symbol(n, Decl(functionOverloadsOutOfOrder.ts, 13, 16))
}
