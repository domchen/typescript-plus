=== tests/cases/compiler/overloadConsecutiveness.ts ===
// Making sure compiler won't break with declarations that are consecutive in the AST but not consecutive in the source. Syntax errors intentional.

function f1(), function f1();
>f1 : Symbol(f1, Decl(overloadConsecutiveness.ts, 0, 0), Decl(overloadConsecutiveness.ts, 2, 14))
>f1 : Symbol(f1, Decl(overloadConsecutiveness.ts, 0, 0), Decl(overloadConsecutiveness.ts, 2, 14))

function f2(), function f2() {}
>f2 : Symbol(f2, Decl(overloadConsecutiveness.ts, 2, 29), Decl(overloadConsecutiveness.ts, 3, 14))
>f2 : Symbol(f2, Decl(overloadConsecutiveness.ts, 2, 29), Decl(overloadConsecutiveness.ts, 3, 14))

function f3() {}, function f3();
>f3 : Symbol(f3, Decl(overloadConsecutiveness.ts, 3, 31), Decl(overloadConsecutiveness.ts, 4, 17))
>f3 : Symbol(f3, Decl(overloadConsecutiveness.ts, 3, 31), Decl(overloadConsecutiveness.ts, 4, 17))

class C {
>C : Symbol(C, Decl(overloadConsecutiveness.ts, 4, 32))

	m1(), m1();
>m1 : Symbol(C.m1, Decl(overloadConsecutiveness.ts, 6, 9), Decl(overloadConsecutiveness.ts, 7, 6))
>m1 : Symbol(C.m1, Decl(overloadConsecutiveness.ts, 6, 9), Decl(overloadConsecutiveness.ts, 7, 6))

	m2(), m2() {}
>m2 : Symbol(C.m2, Decl(overloadConsecutiveness.ts, 7, 12), Decl(overloadConsecutiveness.ts, 8, 6))
>m2 : Symbol(C.m2, Decl(overloadConsecutiveness.ts, 7, 12), Decl(overloadConsecutiveness.ts, 8, 6))

	m3() {}, m3();
>m3 : Symbol(C.m3, Decl(overloadConsecutiveness.ts, 8, 14), Decl(overloadConsecutiveness.ts, 9, 9))
>m3 : Symbol(C.m3, Decl(overloadConsecutiveness.ts, 8, 14), Decl(overloadConsecutiveness.ts, 9, 9))
}

