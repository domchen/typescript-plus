=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers5.ts ===
interface Base {
>Base : Base

    foo: string;
>foo : string
}

interface Derived extends Base {
>Derived : Derived
>Base : Base

    bar: string;
>bar : string
}

// N and M have the same name, same accessibility, same optionality, and N is a subtype of M
// foo properties are valid, bar properties cause errors in the derived class declarations
module NotOptional {
>NotOptional : typeof NotOptional

    interface A {
>A : A

        foo: Base;
>foo : Base
>Base : Base
    }

    class B implements A {
>B : B
>A : A

        fooo: Derived; // error
>fooo : Derived
>Derived : Derived
    }

    interface A2 {
>A2 : A2

        1: Base;
>Base : Base
    }

    class B2 implements A2 {
>B2 : B2
>A2 : A2

        2: Derived; // error
>Derived : Derived
    }

    interface A3 {
>A3 : A3

        '1': Base;
>Base : Base
    }

    class B3 implements A3 {
>B3 : B3
>A3 : A3

        '1.0': Derived; // error
>Derived : Derived
    }
}

// same cases as above but with optional
module Optional {
>Optional : typeof Optional

    interface A {
>A : A

        foo?: Base;
>foo : Base
>Base : Base
    }

    class B implements A {
>B : B
>A : A

        fooo: Derived; // weak type error
>fooo : Derived
>Derived : Derived
    }

    interface A2 {
>A2 : A2

        1?: Base;
>Base : Base
    }

    class B2 implements A2 {
>B2 : B2
>A2 : A2

        2: Derived; // weak type error
>Derived : Derived
    }

    interface A3 {
>A3 : A3

        '1'?: Base;
>Base : Base
    }

    class B3 implements A3 {
>B3 : B3
>A3 : A3

        '1.0': Derived; // weak type error
>Derived : Derived
    }
}

