=== tests/cases/compiler/recursiveTypeRelations.ts ===
// Repro from #14896

type Attributes<Keys extends string> = {
>Attributes : { [Key in Keys]: string; }
>Keys : Keys

    [Key in Keys]: string;
>Key : Key
>Keys : Keys
}

class Query<A extends Attributes<keyof A>> {
>Query : Query<A>
>A : A
>Attributes : { [Key in Keys]: string; }
>A : A

    multiply<B extends Attributes<keyof B>>(x: B): Query<A & B>;
>multiply : <B extends { [Key in keyof B]: string; }>(x: B) => Query<A & B>
>B : B
>Attributes : { [Key in Keys]: string; }
>B : B
>x : B
>B : B
>Query : Query<A>
>A : A
>B : B
}

// Repro from #14940

type ClassName<S> = keyof S;
>ClassName : keyof S
>S : S
>S : S

type ClassNameMap<S> = { [K in keyof S]?: boolean }
>ClassNameMap : { [K in keyof S]?: boolean; }
>S : S
>K : K
>S : S

type ClassNameObjectMap<S> = object & ClassNameMap<S>;
>ClassNameObjectMap : object & { [K in keyof S]?: boolean; }
>S : S
>ClassNameMap : { [K in keyof S]?: boolean; }
>S : S

type ClassNameArg<S> = ClassName<S> | ClassNameObjectMap<S>;
>ClassNameArg : keyof S | (object & { [K in keyof S]?: boolean; })
>S : S
>ClassName : keyof S
>S : S
>ClassNameObjectMap : object & { [K in keyof S]?: boolean; }
>S : S

export function css<S extends { [K in keyof S]: string }>(styles: S, ...classNames: ClassNameArg<S>[]): string {
>css : <S extends { [K in keyof S]: string; }>(styles: S, ...classNames: (keyof S | (object & { [K in keyof S]?: boolean; }))[]) => string
>S : S
>K : K
>S : S
>styles : S
>S : S
>classNames : (keyof S | (object & { [K in keyof S]?: boolean; }))[]
>ClassNameArg : keyof S | (object & { [K in keyof S]?: boolean; })
>S : S

  const args = classNames.map(arg => {
>args : any[]
>classNames.map(arg => {    if (arg == null) {      return null;    }    if (typeof arg == "string") {      return styles[arg];    }    if (typeof arg == "object") {      return Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      }, {});    }  }) : any[]
>classNames.map : <U>(callbackfn: (value: keyof S | (object & { [K in keyof S]?: boolean; }), index: number, array: (keyof S | (object & { [K in keyof S]?: boolean; }))[]) => U, thisArg?: any) => U[]
>classNames : (keyof S | (object & { [K in keyof S]?: boolean; }))[]
>map : <U>(callbackfn: (value: keyof S | (object & { [K in keyof S]?: boolean; }), index: number, array: (keyof S | (object & { [K in keyof S]?: boolean; }))[]) => U, thisArg?: any) => U[]
>arg => {    if (arg == null) {      return null;    }    if (typeof arg == "string") {      return styles[arg];    }    if (typeof arg == "object") {      return Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      }, {});    }  } : (arg: keyof S | (object & { [K in keyof S]?: boolean; })) => any
>arg : keyof S | (object & { [K in keyof S]?: boolean; })

    if (arg == null) {
>arg == null : boolean
>arg : keyof S | (object & { [K in keyof S]?: boolean; })
>null : null

      return null;
>null : null
    }
    if (typeof arg == "string") {
>typeof arg == "string" : boolean
>typeof arg : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function"
>arg : keyof S | (object & { [K in keyof S]?: boolean; })
>"string" : "string"

      return styles[arg];
>styles[arg] : S[keyof S]
>styles : S
>arg : keyof S
    }
    if (typeof arg == "object") {
>typeof arg == "object" : boolean
>typeof arg : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function"
>arg : keyof S | (object & { [K in keyof S]?: boolean; })
>"object" : "object"

      return Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {
>Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      }, {}) : any
>Object.keys(arg).reduce : { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }
>Object.keys(arg) : string[]
>Object.keys : (o: {}) => string[]
>Object : ObjectConstructor
>keys : (o: {}) => string[]
>arg : keyof S | (object & { [K in keyof S]?: boolean; })
>reduce : { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }
>ClassNameObject : No type information available!
>(obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      } : (obj: any, key: keyof S) => any
>obj : any
>ClassNameObject : No type information available!
>key : keyof S
>S : S

        const exportedClassName = styles[key];
>exportedClassName : S[keyof S]
>styles[key] : S[keyof S]
>styles : S
>key : keyof S

        obj[exportedClassName] = (arg as ClassNameMap<S>)[key]; 
>obj[exportedClassName] = (arg as ClassNameMap<S>)[key] : { [K in keyof S]?: boolean; }[keyof S]
>obj[exportedClassName] : any
>obj : any
>exportedClassName : S[keyof S]
>(arg as ClassNameMap<S>)[key] : { [K in keyof S]?: boolean; }[keyof S]
>(arg as ClassNameMap<S>) : { [K in keyof S]?: boolean; }
>arg as ClassNameMap<S> : { [K in keyof S]?: boolean; }
>arg : keyof S | (object & { [K in keyof S]?: boolean; })
>ClassNameMap : { [K in keyof S]?: boolean; }
>S : S
>key : keyof S

        return obj;
>obj : any

      }, {});
>{} : {}
    }
  });
  return "";
>"" : ""
}

