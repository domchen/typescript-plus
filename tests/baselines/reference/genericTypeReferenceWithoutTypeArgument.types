=== tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

class C<T> {
>C : C<T>
>T : T

    foo: T;
>foo : T
>T : T
}

var c: C;
>c : any
>C : C<T>

var a: { x: C };
>a : { x: any; }
>x : any
>C : C<T>

var b: { (x: C): C };
>b : (x: any) => any
>x : any
>C : C<T>
>C : C<T>

var d: { [x: C]: C };
>d : {}
>x : any
>C : C<T>
>C : C<T>

var e = (x: C) => { var y: C; return y; }
>e : (x: any) => any
>(x: C) => { var y: C; return y; } : (x: any) => any
>x : any
>C : C<T>
>y : any
>C : C<T>
>y : any

function f(x: C): C { var y: C; return y; }
>f : (x: any) => any
>x : any
>C : C<T>
>C : C<T>
>y : any
>C : C<T>
>y : any

var g = function f(x: C): C { var y: C; return y; }
>g : (x: any) => any
>function f(x: C): C { var y: C; return y; } : (x: any) => any
>f : (x: any) => any
>x : any
>C : C<T>
>C : C<T>
>y : any
>C : C<T>
>y : any

class D extends C {
>D : D
>C : typeof C
}

interface I extends C {}
>I : I
>C : C<T>

module M {
>M : typeof M

    export class E<T> { foo: T }
>E : E<T>
>T : T
>foo : T
>T : T
}

class D2 extends M.E { }
>D2 : D2
>M.E : typeof M.E
>M : typeof M
>E : typeof M.E

class D3<T extends M.E> { }
>D3 : D3<T>
>T : T
>M : any
>E : M.E<T>

interface I2 extends M.E { }
>I2 : I2
>M.E : any
>M : typeof M
>E : M.E<T>

function h<T extends C>(x: T) { }
>h : <T extends any>(x: T) => void
>T : T
>C : C<T>
>x : T
>T : T

function i<T extends M.E>(x: T) { }
>i : <T extends any>(x: T) => void
>T : T
>M : any
>E : M.E<T>
>x : T
>T : T

var j = <C>null;
>j : any
><C>null : any
>C : C<T>
>null : null

var k = <M.E>null;
>k : any
><M.E>null : any
>M : any
>E : M.E<T>
>null : null

