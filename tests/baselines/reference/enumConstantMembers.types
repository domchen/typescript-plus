=== tests/cases/conformance/enums/enumConstantMembers.ts ===
// Constant members allow negatives, but not decimals. Also hex literals are allowed
enum E1 {
>E1 : E1

    a = 1,
>a : E1.a
>1 : 1

    b
>b : E1.b
}
enum E2 {
>E2 : E2

    a = - 1,
>a : E2.a
>- 1 : -1
>1 : 1

    b
>b : E2.b
}
enum E3 {
>E3 : E3

    a = 0.1,
>a : E3.a
>0.1 : 0.1

    b // Error because 0.1 is not a constant
>b : E3.b
}

declare enum E4 {
>E4 : E4

    a = 1,
>a : E4.a
>1 : 1

    b = -1,
>b : E4.b
>-1 : -1
>1 : 1

    c = 0.1 // Not a constant
>c : E4.c
>0.1 : 0.1
}

enum E5 {
>E5 : E5

    a = 1 / 0,
>a : E5
>1 / 0 : number
>1 : 1
>0 : 0

    b = 2 / 0.0,
>b : E5
>2 / 0.0 : number
>2 : 2
>0.0 : 0

    c = 1.0 / 0.0,
>c : E5
>1.0 / 0.0 : number
>1.0 : 1
>0.0 : 0

    d = 0.0 / 0.0,
>d : E5
>0.0 / 0.0 : number
>0.0 : 0
>0.0 : 0

    e = NaN,
>e : E5
>NaN : number

    f = Infinity,
>f : E5
>Infinity : number

    g = -Infinity
>g : E5
>-Infinity : number
>Infinity : number
}

const enum E6 {
>E6 : E6

    a = 1 / 0,
>a : E6
>1 / 0 : number
>1 : 1
>0 : 0

    b = 2 / 0.0,
>b : E6
>2 / 0.0 : number
>2 : 2
>0.0 : 0

    c = 1.0 / 0.0,
>c : E6
>1.0 / 0.0 : number
>1.0 : 1
>0.0 : 0

    d = 0.0 / 0.0,
>d : E6
>0.0 / 0.0 : number
>0.0 : 0
>0.0 : 0

    e = NaN,
>e : E6
>NaN : number

    f = Infinity,
>f : E6
>Infinity : number

    g = -Infinity
>g : E6
>-Infinity : number
>Infinity : number
}

