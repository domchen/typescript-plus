=== tests/cases/compiler/interfacePropertiesWithSameName2.ts ===
interface Mover {
>Mover : Mover

    move(): void;
>move : () => void

    getStatus(): { speed: number; };
>getStatus : () => { speed: number; }
>speed : number
}
interface Shaker {
>Shaker : Shaker

    shake(): void;
>shake : () => void

    getStatus(): { frequency: number; };
>getStatus : () => { frequency: number; }
>frequency : number
}

interface MoverShaker extends Mover, Shaker {
>MoverShaker : MoverShaker
>Mover : Mover
>Shaker : Shaker

}

// Inside a module
declare module MoversAndShakers {
>MoversAndShakers : typeof MoversAndShakers

    export class Mover {
>Mover : Mover

        move(): void;
>move : () => void

        getStatus(): { speed: number; };
>getStatus : () => { speed: number; }
>speed : number
    }
    export interface Shaker {
>Shaker : Shaker

        shake(): void;
>shake : () => void

        getStatus(): { frequency: number; };
>getStatus : () => { frequency: number; }
>frequency : number
    }
}

interface MoverShaker2 extends MoversAndShakers.Mover, MoversAndShakers.Shaker { } // error
>MoverShaker2 : MoverShaker2
>MoversAndShakers.Mover : any
>MoversAndShakers : typeof MoversAndShakers
>Mover : MoversAndShakers.Mover
>MoversAndShakers.Shaker : any
>MoversAndShakers : typeof MoversAndShakers
>Shaker : MoversAndShakers.Shaker

interface MoverShaker3 extends MoversAndShakers.Mover, MoversAndShakers.Shaker {
>MoverShaker3 : MoverShaker3
>MoversAndShakers.Mover : any
>MoversAndShakers : typeof MoversAndShakers
>Mover : MoversAndShakers.Mover
>MoversAndShakers.Shaker : any
>MoversAndShakers : typeof MoversAndShakers
>Shaker : MoversAndShakers.Shaker

    getStatus(): { speed: number; frequency: number; }; // ok because this getStatus overrides the conflicting ones above
>getStatus : () => { speed: number; frequency: number; }
>speed : number
>frequency : number
}
