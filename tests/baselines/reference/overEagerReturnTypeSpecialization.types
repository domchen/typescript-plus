=== tests/cases/compiler/overEagerReturnTypeSpecialization.ts ===
//Note: Below simpler repro

interface I1<T> {
>I1 : I1<T>
>T : T

    func<U>(callback: (value: T) => U): I1<U>;
>func : <U>(callback: (value: T) => U) => I1<U>
>U : U
>callback : (value: T) => U
>value : T
>T : T
>U : U
>I1 : I1<T>
>U : U
}
 
declare var v1: I1<number>;
>v1 : I1<number>
>I1 : I1<T>

var r1: I1<string> = v1.func(num => num.toString()) // Correctly returns an I1<string>
>r1 : I1<string>
>I1 : I1<T>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func(str => str.length) : I1<number>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func : <U>(callback: (value: string) => U) => I1<U>
>v1.func(num => num.toString()) : I1<string>
>v1.func : <U>(callback: (value: number) => U) => I1<U>
>v1 : I1<number>
>func : <U>(callback: (value: number) => U) => I1<U>
>num => num.toString() : (num: number) => string
>num : number
>num.toString() : string
>num.toString : (radix?: number) => string
>num : number
>toString : (radix?: number) => string

           .func(str => str.length);    // should error
>func : <U>(callback: (value: string) => U) => I1<U>
>str => str.length : (str: string) => number
>str : string
>str.length : number
>str : string
>length : number

var r2: I1<number> = v1.func(num => num.toString()) // Correctly returns an I1<string>
>r2 : I1<number>
>I1 : I1<T>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func(str => str.length) : I1<number>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func : <U>(callback: (value: string) => U) => I1<U>
>v1.func(num => num.toString()) : I1<string>
>v1.func : <U>(callback: (value: number) => U) => I1<U>
>v1 : I1<number>
>func : <U>(callback: (value: number) => U) => I1<U>
>num => num.toString() : (num: number) => string
>num : number
>num.toString() : string
>num.toString : (radix?: number) => string
>num : number
>toString : (radix?: number) => string

           .func(str => str.length);    // should be ok 
>func : <U>(callback: (value: string) => U) => I1<U>
>str => str.length : (str: string) => number
>str : string
>str.length : number
>str : string
>length : number
 
 
