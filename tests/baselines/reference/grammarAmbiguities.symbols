=== tests/cases/conformance/expressions/functionCalls/grammarAmbiguities.ts ===
function f(n: any) { return null; }
>f : Symbol(f, Decl(grammarAmbiguities.ts, 0, 0))
>n : Symbol(n, Decl(grammarAmbiguities.ts, 0, 11))

function g<A, B>(x: any) { return null; }
>g : Symbol(g, Decl(grammarAmbiguities.ts, 0, 35))
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 11))
>B : Symbol(B, Decl(grammarAmbiguities.ts, 1, 13))
>x : Symbol(x, Decl(grammarAmbiguities.ts, 1, 17))

interface A { }
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 41), Decl(grammarAmbiguities.ts, 4, 3))

interface B { }
>B : Symbol(B, Decl(grammarAmbiguities.ts, 2, 15), Decl(grammarAmbiguities.ts, 4, 6))

var A, B;
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 41), Decl(grammarAmbiguities.ts, 4, 3))
>B : Symbol(B, Decl(grammarAmbiguities.ts, 2, 15), Decl(grammarAmbiguities.ts, 4, 6))

f(g<A, B>(7));
>f : Symbol(f, Decl(grammarAmbiguities.ts, 0, 0))
>g : Symbol(g, Decl(grammarAmbiguities.ts, 0, 35))
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 41), Decl(grammarAmbiguities.ts, 4, 3))
>B : Symbol(B, Decl(grammarAmbiguities.ts, 2, 15), Decl(grammarAmbiguities.ts, 4, 6))

f(g < A, B > 7); // Should error
>f : Symbol(f, Decl(grammarAmbiguities.ts, 0, 0))
>g : Symbol(g, Decl(grammarAmbiguities.ts, 0, 35))
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 41), Decl(grammarAmbiguities.ts, 4, 3))
>B : Symbol(B, Decl(grammarAmbiguities.ts, 2, 15), Decl(grammarAmbiguities.ts, 4, 6))

f(g < A, B > +(7)); // Should error
>f : Symbol(f, Decl(grammarAmbiguities.ts, 0, 0))
>g : Symbol(g, Decl(grammarAmbiguities.ts, 0, 35))
>A : Symbol(A, Decl(grammarAmbiguities.ts, 1, 41), Decl(grammarAmbiguities.ts, 4, 3))
>B : Symbol(B, Decl(grammarAmbiguities.ts, 2, 15), Decl(grammarAmbiguities.ts, 4, 6))


