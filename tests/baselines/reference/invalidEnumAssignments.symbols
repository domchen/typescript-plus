=== tests/cases/conformance/types/primitives/enum/invalidEnumAssignments.ts ===
enum E {
>E : Symbol(E, Decl(invalidEnumAssignments.ts, 0, 0))

    A,
>A : Symbol(E.A, Decl(invalidEnumAssignments.ts, 0, 8))

    B
>B : Symbol(E.B, Decl(invalidEnumAssignments.ts, 1, 6))
}

enum E2 {
>E2 : Symbol(E2, Decl(invalidEnumAssignments.ts, 3, 1))

    A,
>A : Symbol(E2.A, Decl(invalidEnumAssignments.ts, 5, 9))

    B
>B : Symbol(E2.B, Decl(invalidEnumAssignments.ts, 6, 6))
}

var e: E;
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))
>E : Symbol(E, Decl(invalidEnumAssignments.ts, 0, 0))

var e2: E2;
>e2 : Symbol(e2, Decl(invalidEnumAssignments.ts, 11, 3))
>E2 : Symbol(E2, Decl(invalidEnumAssignments.ts, 3, 1))

e = E2.A;
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))
>E2.A : Symbol(E2.A, Decl(invalidEnumAssignments.ts, 5, 9))
>E2 : Symbol(E2, Decl(invalidEnumAssignments.ts, 3, 1))
>A : Symbol(E2.A, Decl(invalidEnumAssignments.ts, 5, 9))

e2 = E.A;
>e2 : Symbol(e2, Decl(invalidEnumAssignments.ts, 11, 3))
>E.A : Symbol(E.A, Decl(invalidEnumAssignments.ts, 0, 8))
>E : Symbol(E, Decl(invalidEnumAssignments.ts, 0, 0))
>A : Symbol(E.A, Decl(invalidEnumAssignments.ts, 0, 8))

e = <void>null;
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))

e = {};
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))

e = '';
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))

function f<T>(a: T) {
>f : Symbol(f, Decl(invalidEnumAssignments.ts, 17, 7))
>T : Symbol(T, Decl(invalidEnumAssignments.ts, 19, 11))
>a : Symbol(a, Decl(invalidEnumAssignments.ts, 19, 14))
>T : Symbol(T, Decl(invalidEnumAssignments.ts, 19, 11))

    e = a;
>e : Symbol(e, Decl(invalidEnumAssignments.ts, 10, 3))
>a : Symbol(a, Decl(invalidEnumAssignments.ts, 19, 14))
}
