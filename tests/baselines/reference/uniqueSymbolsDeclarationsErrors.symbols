=== tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarationsErrors.ts ===
declare const s: unique symbol;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

interface I { readonly readonlyType: unique symbol; }
>I : Symbol(I, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 31))
>readonlyType : Symbol(I.readonlyType, Decl(uniqueSymbolsDeclarationsErrors.ts, 1, 13))

// not allowed when emitting declarations

export const obj = {
>obj : Symbol(obj, Decl(uniqueSymbolsDeclarationsErrors.ts, 5, 12))

    method1(p: typeof s): typeof s {
>method1 : Symbol(method1, Decl(uniqueSymbolsDeclarationsErrors.ts, 5, 20))
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 6, 12))
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

        return p;
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 6, 12))

    },
    method2(p: I["readonlyType"]): I["readonlyType"] {
>method2 : Symbol(method2, Decl(uniqueSymbolsDeclarationsErrors.ts, 8, 6))
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 9, 12))
>I : Symbol(I, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 31))
>I : Symbol(I, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 31))

        return p;
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 9, 12))
    }
};

export const classExpression = class {
>classExpression : Symbol(classExpression, Decl(uniqueSymbolsDeclarationsErrors.ts, 14, 12))

    method1(p: typeof s): typeof s {
>method1 : Symbol(classExpression.method1, Decl(uniqueSymbolsDeclarationsErrors.ts, 14, 38))
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 15, 12))
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

        return p;
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 15, 12))
    }
    method2(p: I["readonlyType"]): I["readonlyType"] {
>method2 : Symbol(classExpression.method2, Decl(uniqueSymbolsDeclarationsErrors.ts, 17, 5))
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 18, 12))
>I : Symbol(I, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 31))
>I : Symbol(I, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 31))

        return p;
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 18, 12))
    }
};

export function funcInferredReturnType(obj: { method(p: typeof s): void }) {
>funcInferredReturnType : Symbol(funcInferredReturnType, Decl(uniqueSymbolsDeclarationsErrors.ts, 21, 2))
>obj : Symbol(obj, Decl(uniqueSymbolsDeclarationsErrors.ts, 23, 39))
>method : Symbol(method, Decl(uniqueSymbolsDeclarationsErrors.ts, 23, 45))
>p : Symbol(p, Decl(uniqueSymbolsDeclarationsErrors.ts, 23, 53))
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

    return obj;
>obj : Symbol(obj, Decl(uniqueSymbolsDeclarationsErrors.ts, 23, 39))
}

export interface InterfaceWithPrivateNamedProperties {
>InterfaceWithPrivateNamedProperties : Symbol(InterfaceWithPrivateNamedProperties, Decl(uniqueSymbolsDeclarationsErrors.ts, 25, 1))

    [s]: any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export interface InterfaceWithPrivateNamedMethods {
>InterfaceWithPrivateNamedMethods : Symbol(InterfaceWithPrivateNamedMethods, Decl(uniqueSymbolsDeclarationsErrors.ts, 29, 1))

    [s](): any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export type TypeLiteralWithPrivateNamedProperties = {
>TypeLiteralWithPrivateNamedProperties : Symbol(TypeLiteralWithPrivateNamedProperties, Decl(uniqueSymbolsDeclarationsErrors.ts, 33, 1))

    [s]: any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export type TypeLiteralWithPrivateNamedMethods = {
>TypeLiteralWithPrivateNamedMethods : Symbol(TypeLiteralWithPrivateNamedMethods, Decl(uniqueSymbolsDeclarationsErrors.ts, 37, 1))

    [s](): any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export class ClassWithPrivateNamedProperties {
>ClassWithPrivateNamedProperties : Symbol(ClassWithPrivateNamedProperties, Decl(uniqueSymbolsDeclarationsErrors.ts, 41, 1))

    [s]: any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

    static [s]: any;
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export class ClassWithPrivateNamedMethods {
>ClassWithPrivateNamedMethods : Symbol(ClassWithPrivateNamedMethods, Decl(uniqueSymbolsDeclarationsErrors.ts, 46, 1))

    [s]() {}
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))

    static [s]() {}
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
}

export class ClassWithPrivateNamedAccessors {
>ClassWithPrivateNamedAccessors : Symbol(ClassWithPrivateNamedAccessors, Decl(uniqueSymbolsDeclarationsErrors.ts, 51, 1))

    get [s](): any { return undefined; }
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>undefined : Symbol(undefined)

    set [s](v: any) { }
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>v : Symbol(v, Decl(uniqueSymbolsDeclarationsErrors.ts, 55, 12))

    static get [s](): any { return undefined; }
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>undefined : Symbol(undefined)

    static set [s](v: any) { }
>s : Symbol(s, Decl(uniqueSymbolsDeclarationsErrors.ts, 0, 13))
>v : Symbol(v, Decl(uniqueSymbolsDeclarationsErrors.ts, 57, 19))
}
