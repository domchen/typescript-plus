=== tests/cases/compiler/readonlyMembers.ts ===
interface X {
>X : Symbol(X, Decl(readonlyMembers.ts, 0, 0))

    readonly a: number;
>a : Symbol(X.a, Decl(readonlyMembers.ts, 0, 13))

    readonly b?: number;
>b : Symbol(X.b, Decl(readonlyMembers.ts, 1, 23))
}
var x: X = { a: 0 };
>x : Symbol(x, Decl(readonlyMembers.ts, 4, 3))
>X : Symbol(X, Decl(readonlyMembers.ts, 0, 0))
>a : Symbol(a, Decl(readonlyMembers.ts, 4, 12))

x.a = 1;  // Error
>x.a : Symbol(X.a, Decl(readonlyMembers.ts, 0, 13))
>x : Symbol(x, Decl(readonlyMembers.ts, 4, 3))
>a : Symbol(X.a, Decl(readonlyMembers.ts, 0, 13))

x.b = 1;  // Error
>x.b : Symbol(X.b, Decl(readonlyMembers.ts, 1, 23))
>x : Symbol(x, Decl(readonlyMembers.ts, 4, 3))
>b : Symbol(X.b, Decl(readonlyMembers.ts, 1, 23))

class C {
>C : Symbol(C, Decl(readonlyMembers.ts, 6, 8))

    readonly a: number;
>a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))

    readonly b = 1;
>b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))

    get c() { return 1 }
>c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))

    constructor() {
        this.a = 1;  // Ok
>this.a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))

        this.b = 1;  // Ok
>this.b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))

        this.c = 1;  // Error
>this.c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))

        const f = () => {
>f : Symbol(f, Decl(readonlyMembers.ts, 16, 13))

            this.a = 1;  // Error
>this.a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))

            this.b = 1;  // Error
>this.b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))

            this.c = 1;  // Error
>this.c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))
        }
    }
    foo() {
>foo : Symbol(C.foo, Decl(readonlyMembers.ts, 21, 5))

        this.a = 1;  // Error
>this.a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>a : Symbol(C.a, Decl(readonlyMembers.ts, 8, 9))

        this.b = 1;  // Error
>this.b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>b : Symbol(C.b, Decl(readonlyMembers.ts, 9, 23))

        this.c = 1;  // Error
>this.c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))
>this : Symbol(C, Decl(readonlyMembers.ts, 6, 8))
>c : Symbol(C.c, Decl(readonlyMembers.ts, 10, 19))
    }
}

var o = {
>o : Symbol(o, Decl(readonlyMembers.ts, 29, 3))

    get a() { return 1 },
>a : Symbol(a, Decl(readonlyMembers.ts, 29, 9))

    get b() { return 1 },
>b : Symbol(b, Decl(readonlyMembers.ts, 30, 25), Decl(readonlyMembers.ts, 31, 25))

    set b(value) { }
>b : Symbol(b, Decl(readonlyMembers.ts, 30, 25), Decl(readonlyMembers.ts, 31, 25))
>value : Symbol(value, Decl(readonlyMembers.ts, 32, 10))

};
o.a = 1;  // Error
>o.a : Symbol(a, Decl(readonlyMembers.ts, 29, 9))
>o : Symbol(o, Decl(readonlyMembers.ts, 29, 3))
>a : Symbol(a, Decl(readonlyMembers.ts, 29, 9))

o.b = 1;
>o.b : Symbol(b, Decl(readonlyMembers.ts, 30, 25), Decl(readonlyMembers.ts, 31, 25))
>o : Symbol(o, Decl(readonlyMembers.ts, 29, 3))
>b : Symbol(b, Decl(readonlyMembers.ts, 30, 25), Decl(readonlyMembers.ts, 31, 25))

var p: { readonly a: number, b: number } = { a: 1, b: 1 };
>p : Symbol(p, Decl(readonlyMembers.ts, 37, 3))
>a : Symbol(a, Decl(readonlyMembers.ts, 37, 8))
>b : Symbol(b, Decl(readonlyMembers.ts, 37, 28))
>a : Symbol(a, Decl(readonlyMembers.ts, 37, 44))
>b : Symbol(b, Decl(readonlyMembers.ts, 37, 50))

p.a = 1;  // Error
>p.a : Symbol(a, Decl(readonlyMembers.ts, 37, 8))
>p : Symbol(p, Decl(readonlyMembers.ts, 37, 3))
>a : Symbol(a, Decl(readonlyMembers.ts, 37, 8))

p.b = 1;
>p.b : Symbol(b, Decl(readonlyMembers.ts, 37, 28))
>p : Symbol(p, Decl(readonlyMembers.ts, 37, 3))
>b : Symbol(b, Decl(readonlyMembers.ts, 37, 28))

var q: { a: number, b: number } = p;
>q : Symbol(q, Decl(readonlyMembers.ts, 40, 3))
>a : Symbol(a, Decl(readonlyMembers.ts, 40, 8))
>b : Symbol(b, Decl(readonlyMembers.ts, 40, 19))
>p : Symbol(p, Decl(readonlyMembers.ts, 37, 3))

q.a = 1;
>q.a : Symbol(a, Decl(readonlyMembers.ts, 40, 8))
>q : Symbol(q, Decl(readonlyMembers.ts, 40, 3))
>a : Symbol(a, Decl(readonlyMembers.ts, 40, 8))

q.b = 1;
>q.b : Symbol(b, Decl(readonlyMembers.ts, 40, 19))
>q : Symbol(q, Decl(readonlyMembers.ts, 40, 3))
>b : Symbol(b, Decl(readonlyMembers.ts, 40, 19))

enum E {
>E : Symbol(E, Decl(readonlyMembers.ts, 42, 8))

    A, B, C
>A : Symbol(E.A, Decl(readonlyMembers.ts, 44, 8))
>B : Symbol(E.B, Decl(readonlyMembers.ts, 45, 6))
>C : Symbol(E.C, Decl(readonlyMembers.ts, 45, 9))
}
E.A = 1;  // Error
>E.A : Symbol(E.A, Decl(readonlyMembers.ts, 44, 8))
>E : Symbol(E, Decl(readonlyMembers.ts, 42, 8))
>A : Symbol(E.A, Decl(readonlyMembers.ts, 44, 8))

namespace N {
>N : Symbol(N, Decl(readonlyMembers.ts, 47, 8))

    export const a = 1;
>a : Symbol(a, Decl(readonlyMembers.ts, 50, 16))

    export let b = 1;
>b : Symbol(b, Decl(readonlyMembers.ts, 51, 14))

    export var c = 1;
>c : Symbol(c, Decl(readonlyMembers.ts, 52, 14))
}
N.a = 1;  // Error
>N.a : Symbol(N.a, Decl(readonlyMembers.ts, 50, 16))
>N : Symbol(N, Decl(readonlyMembers.ts, 47, 8))
>a : Symbol(N.a, Decl(readonlyMembers.ts, 50, 16))

N.b = 1;
>N.b : Symbol(N.b, Decl(readonlyMembers.ts, 51, 14))
>N : Symbol(N, Decl(readonlyMembers.ts, 47, 8))
>b : Symbol(N.b, Decl(readonlyMembers.ts, 51, 14))

N.c = 1;
>N.c : Symbol(N.c, Decl(readonlyMembers.ts, 52, 14))
>N : Symbol(N, Decl(readonlyMembers.ts, 47, 8))
>c : Symbol(N.c, Decl(readonlyMembers.ts, 52, 14))

let xx: { readonly [x: string]: string };
>xx : Symbol(xx, Decl(readonlyMembers.ts, 58, 3))
>x : Symbol(x, Decl(readonlyMembers.ts, 58, 20))

let s = xx["foo"];
>s : Symbol(s, Decl(readonlyMembers.ts, 59, 3))
>xx : Symbol(xx, Decl(readonlyMembers.ts, 58, 3))

xx["foo"] = "abc";  // Error
>xx : Symbol(xx, Decl(readonlyMembers.ts, 58, 3))

let yy: { readonly [x: number]: string, [x: string]: string };
>yy : Symbol(yy, Decl(readonlyMembers.ts, 62, 3))
>x : Symbol(x, Decl(readonlyMembers.ts, 62, 20))
>x : Symbol(x, Decl(readonlyMembers.ts, 62, 41))

yy[1] = "abc";  // Error
>yy : Symbol(yy, Decl(readonlyMembers.ts, 62, 3))

yy["foo"] = "abc";
>yy : Symbol(yy, Decl(readonlyMembers.ts, 62, 3))

