=== tests/cases/conformance/expressions/typeGuards/typeGuardsInIfStatement.ts ===
// In the true branch statement of an 'if' statement, 
// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when true.
// In the false branch statement of an 'if' statement, 
// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when false.
function foo(x: number | string) {
>foo : Symbol(foo, Decl(typeGuardsInIfStatement.ts, 0, 0))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 4, 13))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 4, 13))

        return x.length; // string
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 4, 13))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
    }
    else {
        return x++; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 4, 13))
    }
}
function foo2(x: number | string) {
>foo2 : Symbol(foo2, Decl(typeGuardsInIfStatement.ts, 11, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 12, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 12, 14))

        x = 10;
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 12, 14))

        return x; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 12, 14))
    }
    else {
        return x; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 12, 14))
    }
}
function foo3(x: number | string) {
>foo3 : Symbol(foo3, Decl(typeGuardsInIfStatement.ts, 20, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 21, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 21, 14))

        x = "Hello";
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 21, 14))

        return x; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 21, 14))
    }
    else {
        return x; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 21, 14))
    }
}
function foo4(x: number | string) {
>foo4 : Symbol(foo4, Decl(typeGuardsInIfStatement.ts, 29, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 30, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 30, 14))

        return x; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 30, 14))
    }
    else {
        x = 10;
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 30, 14))

        return x; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 30, 14))
    }
}
function foo5(x: number | string) {
>foo5 : Symbol(foo5, Decl(typeGuardsInIfStatement.ts, 38, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 39, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 39, 14))

        return x; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 39, 14))
    }
    else {
        x = "hello";
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 39, 14))

        return x; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 39, 14))
    }
}
function foo6(x: number | string) {
>foo6 : Symbol(foo6, Decl(typeGuardsInIfStatement.ts, 47, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))

        x = 10;
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))

        return x; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))
    }
    else {
        x = "hello";
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))

        return x; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 48, 14))
    }
}
function foo7(x: number | string | boolean) {
>foo7 : Symbol(foo7, Decl(typeGuardsInIfStatement.ts, 57, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))

        return x === "hello"; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))
    }
    else if (typeof x === "boolean") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))

        return x; // boolean
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))
    }
    else {
        return x == 10; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 58, 14))
    }
}
function foo8(x: number | string | boolean) {
>foo8 : Symbol(foo8, Decl(typeGuardsInIfStatement.ts, 68, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))

        return x === "hello"; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))
    }
    else {
        var b: number | boolean = x; //  number | boolean
>b : Symbol(b, Decl(typeGuardsInIfStatement.ts, 74, 11))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))

        if (typeof x === "boolean") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))

            return x; // boolean
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))
        }
        else {
            return x == 10; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 69, 14))
        }
    }
}
function foo9(x: number | string) {
>foo9 : Symbol(foo9, Decl(typeGuardsInIfStatement.ts, 82, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 83, 14))

    var y = 10;
>y : Symbol(y, Decl(typeGuardsInIfStatement.ts, 84, 7))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 83, 14))

        // usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
        y = x.length; 
>y : Symbol(y, Decl(typeGuardsInIfStatement.ts, 84, 7))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 83, 14))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

        return x === "hello"; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 83, 14))
    }
    else {
        return x == 10; // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 83, 14))
    }
}
function foo10(x: number | string | boolean) {
>foo10 : Symbol(foo10, Decl(typeGuardsInIfStatement.ts, 93, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))

        return x === "hello"; // string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))
    }
    else {
        var y: boolean | string;
>y : Symbol(y, Decl(typeGuardsInIfStatement.ts, 100, 11))

        var b = x; // number | boolean
>b : Symbol(b, Decl(typeGuardsInIfStatement.ts, 101, 11))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))

        return typeof x === "number"
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))

            ? x === 10 // number
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))

            : x; // x should be boolean
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 94, 15))
    }
}
function foo11(x: number | string | boolean) {
>foo11 : Symbol(foo11, Decl(typeGuardsInIfStatement.ts, 106, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    // Assigning value to x deep inside another guard stops narrowing of type too
    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))

        return x; // string | number | boolean - x changed in else branch
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))
    }
    else {
        var y: number| boolean | string;
>y : Symbol(y, Decl(typeGuardsInIfStatement.ts, 114, 11))

        var b = x; // number | boolean | string - because below we are changing value of x in if statement
>b : Symbol(b, Decl(typeGuardsInIfStatement.ts, 115, 11))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))

        return typeof x === "number"
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))

            ? (
            // change value of x
            x = 10 && x.toString() // number | boolean | string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))
>x.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

            )
            : (
            // do not change value
            y = x && x.toString() // number | boolean | string
>y : Symbol(y, Decl(typeGuardsInIfStatement.ts, 114, 11))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))
>x.toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 107, 15))
>toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))

            );
    }
}
function foo12(x: number | string | boolean) {
>foo12 : Symbol(foo12, Decl(typeGuardsInIfStatement.ts, 126, 1))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    // Assigning value to x in outer guard shouldn't stop narrowing in the inner expression
    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))

        return x.toString(); // string | number | boolean - x changed in else branch
>x.toString : Symbol(String.toString, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))
>toString : Symbol(String.toString, Decl(lib.es5.d.ts, --, --))
    }
    else {
        x = 10;
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))

        var b = x; // number | boolean | string
>b : Symbol(b, Decl(typeGuardsInIfStatement.ts, 135, 11))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))

        return typeof x === "number"
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))

            ? x.toString() // number
>x.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

            : x.toString(); // boolean | string
>x : Symbol(x, Decl(typeGuardsInIfStatement.ts, 127, 15))
    }
}
