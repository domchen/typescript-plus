=== tests/cases/conformance/types/rest/objectRestNegative.ts ===
let o = { a: 1, b: 'no' };
>o : Symbol(o, Decl(objectRestNegative.ts, 0, 3))
>a : Symbol(a, Decl(objectRestNegative.ts, 0, 9))
>b : Symbol(b, Decl(objectRestNegative.ts, 0, 15))

var { ...mustBeLast, a } = o;
>mustBeLast : Symbol(mustBeLast, Decl(objectRestNegative.ts, 1, 5))
>a : Symbol(a, Decl(objectRestNegative.ts, 1, 20))
>o : Symbol(o, Decl(objectRestNegative.ts, 0, 3))

var b: string;
>b : Symbol(b, Decl(objectRestNegative.ts, 3, 3))

let notAssignable: { a: string };
>notAssignable : Symbol(notAssignable, Decl(objectRestNegative.ts, 4, 3))
>a : Symbol(a, Decl(objectRestNegative.ts, 4, 20))

({ b, ...notAssignable } = o);
>b : Symbol(b, Decl(objectRestNegative.ts, 5, 2))
>notAssignable : Symbol(notAssignable, Decl(objectRestNegative.ts, 4, 3))
>o : Symbol(o, Decl(objectRestNegative.ts, 0, 3))


function stillMustBeLast({ ...mustBeLast, a }: { a: number, b: string }): void {
>stillMustBeLast : Symbol(stillMustBeLast, Decl(objectRestNegative.ts, 5, 30))
>mustBeLast : Symbol(mustBeLast, Decl(objectRestNegative.ts, 8, 26))
>a : Symbol(a, Decl(objectRestNegative.ts, 8, 41))
>a : Symbol(a, Decl(objectRestNegative.ts, 8, 48))
>b : Symbol(b, Decl(objectRestNegative.ts, 8, 59))
}
function generic<T extends { x, y }>(t: T) {
>generic : Symbol(generic, Decl(objectRestNegative.ts, 9, 1))
>T : Symbol(T, Decl(objectRestNegative.ts, 10, 17))
>x : Symbol(x, Decl(objectRestNegative.ts, 10, 28))
>y : Symbol(y, Decl(objectRestNegative.ts, 10, 31))
>t : Symbol(t, Decl(objectRestNegative.ts, 10, 37))
>T : Symbol(T, Decl(objectRestNegative.ts, 10, 17))

    let { x, ...rest } = t;
>x : Symbol(x, Decl(objectRestNegative.ts, 11, 9))
>rest : Symbol(rest, Decl(objectRestNegative.ts, 11, 12))
>t : Symbol(t, Decl(objectRestNegative.ts, 10, 37))

    return rest;
>rest : Symbol(rest, Decl(objectRestNegative.ts, 11, 12))
}

let rest: { b: string }
>rest : Symbol(rest, Decl(objectRestNegative.ts, 15, 3))
>b : Symbol(b, Decl(objectRestNegative.ts, 15, 11))

({a, ...rest.b + rest.b} = o);
>a : Symbol(a, Decl(objectRestNegative.ts, 16, 2))
>rest.b : Symbol(b, Decl(objectRestNegative.ts, 15, 11))
>rest : Symbol(rest, Decl(objectRestNegative.ts, 15, 3))
>b : Symbol(b, Decl(objectRestNegative.ts, 15, 11))
>rest.b : Symbol(b, Decl(objectRestNegative.ts, 15, 11))
>rest : Symbol(rest, Decl(objectRestNegative.ts, 15, 3))
>b : Symbol(b, Decl(objectRestNegative.ts, 15, 11))
>o : Symbol(o, Decl(objectRestNegative.ts, 0, 3))

