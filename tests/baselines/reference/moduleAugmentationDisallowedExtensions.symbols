=== tests/cases/compiler/x0.ts ===
export let a = 1;
>a : Symbol(a, Decl(x0.ts, 0, 10))

=== tests/cases/compiler/x.ts ===
namespace N1 {
>N1 : Symbol(N1, Decl(x.ts, 0, 0))

    export let x = 1;
>x : Symbol(x, Decl(x.ts, 1, 14))
}

declare module "./observable" {
>"./observable" : Symbol("tests/cases/compiler/observable", Decl(observable.ts, 0, 0), Decl(x.ts, 2, 1))

    var x: number;
>x : Symbol(x, Decl(x.ts, 5, 7))

    let y: number;
>y : Symbol(y, Decl(x.ts, 6, 7))

    const z: number;
>z : Symbol(z, Decl(x.ts, 7, 9))

    let {x1, y1, z0: {n}, z1: {arr: [el1, el2, el3]}}: {x1: number, y1: string, z0: {n: number}, z1: {arr: number[]} }
>x1 : Symbol(x1, Decl(x.ts, 8, 9))
>y1 : Symbol(y1, Decl(x.ts, 8, 12))
>z0 : Symbol(z0, Decl(x.ts, 8, 79))
>n : Symbol(n, Decl(x.ts, 8, 22))
>z1 : Symbol(z1, Decl(x.ts, 8, 96))
>arr : Symbol(arr, Decl(x.ts, 8, 102))
>el1 : Symbol(el1, Decl(x.ts, 8, 37))
>el2 : Symbol(el2, Decl(x.ts, 8, 41))
>el3 : Symbol(el3, Decl(x.ts, 8, 46))
>x1 : Symbol(x1, Decl(x.ts, 8, 56))
>y1 : Symbol(y1, Decl(x.ts, 8, 67))
>z0 : Symbol(z0, Decl(x.ts, 8, 79))
>n : Symbol(n, Decl(x.ts, 8, 85))
>z1 : Symbol(z1, Decl(x.ts, 8, 96))
>arr : Symbol(arr, Decl(x.ts, 8, 102))

    interface A { x }
>A : Symbol(A, Decl(x.ts, 8, 118))
>x : Symbol(A.x, Decl(x.ts, 9, 17))

    namespace N {
>N : Symbol(N, Decl(x.ts, 9, 21))

        export class C {}
>C : Symbol(C, Decl(x.ts, 10, 17))
    }
    class Cls {}
>Cls : Symbol(Cls, Decl(x.ts, 12, 5))

    function foo(): number;
>foo : Symbol(foo, Decl(x.ts, 13, 16))

    type T = number;
>T : Symbol(T, Decl(x.ts, 14, 27))

    import * as all from "./x0";
>all : Symbol(all, Decl(x.ts, 16, 10))

    import {a} from "./x0";
>a : Symbol(a, Decl(x.ts, 17, 12))

    export * from "./x0";
    export {a} from "./x0";
>a : Symbol(a, Decl(x.ts, 19, 12))
}

declare module "./test" {
>"./test" : Symbol("tests/cases/compiler/test", Decl(test.ts, 0, 0), Decl(x.ts, 20, 1))

    export = N1;
>N1 : Symbol(N1, Decl(x.ts, 0, 0))
}
export {}

=== tests/cases/compiler/observable.ts ===
export declare class Observable<T> {
>Observable : Symbol(Observable, Decl(observable.ts, 0, 0))
>T : Symbol(T, Decl(observable.ts, 0, 32))

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : Symbol(Observable.filter, Decl(observable.ts, 0, 36))
>pred : Symbol(pred, Decl(observable.ts, 1, 11))
>e : Symbol(e, Decl(observable.ts, 1, 18))
>T : Symbol(T, Decl(observable.ts, 0, 32))
>Observable : Symbol(Observable, Decl(observable.ts, 0, 0))
>T : Symbol(T, Decl(observable.ts, 0, 32))
}
export var x = 1;
>x : Symbol(x, Decl(observable.ts, 3, 10))

=== tests/cases/compiler/test.ts ===
export let b = 1;
>b : Symbol(b, Decl(test.ts, 0, 10))

=== tests/cases/compiler/main.ts ===
import { Observable } from "./observable"
>Observable : Symbol(Observable, Decl(main.ts, 0, 8))

import "./x";

