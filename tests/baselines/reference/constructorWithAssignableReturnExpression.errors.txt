tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts(12,9): error TS2322: Type '1' is not assignable to type 'D'.
tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts(12,9): error TS2409: Return type of constructor signature must be assignable to the instance type of the class.
tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts(26,9): error TS2409: Return type of constructor signature must be assignable to the instance type of the class.
tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts(26,18): error TS2322: Type 'number' is not assignable to type 'T'.


==== tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts (4 errors) ====
    // a class constructor may return an expression, it must be assignable to the class instance type to be valid
    
    class C {
        constructor() {
            return 1;
        }
    }
    
    class D {
        x: number;
        constructor() {
            return 1; // error
            ~~~~~~~~~
!!! error TS2322: Type '1' is not assignable to type 'D'.
            ~~~~~~~~~
!!! error TS2409: Return type of constructor signature must be assignable to the instance type of the class.
        }
    }
    
    class E {
        x: number;
        constructor() {
            return { x: 1 };
        }
    }
    
    class F<T> {
        x: T;
        constructor() {
            return { x: 1 }; // error
            ~~~~~~~~~~~~~~~~
!!! error TS2409: Return type of constructor signature must be assignable to the instance type of the class.
                     ~
!!! error TS2322: Type 'number' is not assignable to type 'T'.
!!! related TS6500 tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts:24:5: The expected type comes from property 'x' which is declared here on type 'F<T>'
        }
    }
    
    class G<T> {
        x: T;
        constructor() {
            return { x: <T>null };
        }
    }