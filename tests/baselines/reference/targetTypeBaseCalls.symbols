=== tests/cases/compiler/targetTypeBaseCalls.ts ===
function foo(x: (s: string) => void) { }
>foo : Symbol(foo, Decl(targetTypeBaseCalls.ts, 0, 0))
>x : Symbol(x, Decl(targetTypeBaseCalls.ts, 0, 13))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 0, 17))
 
 
 
class Foo { constructor(x: (s: string) => void){} }
>Foo : Symbol(Foo, Decl(targetTypeBaseCalls.ts, 0, 40))
>x : Symbol(x, Decl(targetTypeBaseCalls.ts, 4, 24))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 4, 28))
 
 
 
foo(function(s) { s = 5 });  // Error, canâ€™t assign number to string
>foo : Symbol(foo, Decl(targetTypeBaseCalls.ts, 0, 0))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 8, 13))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 8, 13))
 
 
 
new Foo(function(s) { s = 5 });  // error, if types are applied correctly
>Foo : Symbol(Foo, Decl(targetTypeBaseCalls.ts, 0, 40))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 12, 17))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 12, 17))
 
 
 
class Bar extends Foo { constructor() { super(function(s) { s = 5 }) } }  // error, if types are applied correctly
>Bar : Symbol(Bar, Decl(targetTypeBaseCalls.ts, 12, 31))
>Foo : Symbol(Foo, Decl(targetTypeBaseCalls.ts, 0, 40))
>super : Symbol(Foo, Decl(targetTypeBaseCalls.ts, 0, 40))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 16, 55))
>s : Symbol(s, Decl(targetTypeBaseCalls.ts, 16, 55))

