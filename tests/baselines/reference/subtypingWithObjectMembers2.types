=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers2.ts ===
interface Base {
>Base : Base

    foo: string;
>foo : string
}

interface Derived extends Base {
>Derived : Derived
>Base : Base

    bar: string;
>bar : string
}

// N and M have the same name, same accessibility, same optionality, and N is a subtype of M
// foo properties are valid, bar properties cause errors in the derived class declarations
module NotOptional {
>NotOptional : any

    interface A {
>A : A

        foo: Base;
>foo : Base
>Base : Base

        bar: Base;
>bar : Base
>Base : Base
    }

    interface B extends A {
>B : B
>A : A

        foo: Derived; // ok
>foo : Derived
>Derived : Derived

        bar: string; // error
>bar : string
    }

    interface A2 {
>A2 : A2

        1: Base;
>Base : Base

        2.0: Base;
>Base : Base
    }

    interface B2 extends A2 {
>B2 : B2
>A2 : A2

        1: Derived; // ok
>Derived : Derived

        2: string; // error
    }

    interface A3 {
>A3 : A3

        '1': Base;
>Base : Base

        '2.0': Base;
>Base : Base
    }

    interface B3 extends A3 {
>B3 : B3
>A3 : A3

        '1': Derived; // ok
>Derived : Derived

        '2.0': string; // error
    }
}

// same cases as above but with optional
module Optional {
>Optional : any

    interface A {
>A : A

        foo?: Base;
>foo : Base
>Base : Base

        bar?: Base;
>bar : Base
>Base : Base
    }

    interface B extends A {
>B : B
>A : A

        foo?: Derived; // ok
>foo : Derived
>Derived : Derived

        bar?: string; // error
>bar : string
    }

    interface A2 {
>A2 : A2

        1?: Base;
>Base : Base

        2.0?: Base;
>Base : Base
    }

    interface B2 extends A2 {
>B2 : B2
>A2 : A2

        1?: Derived; // ok
>Derived : Derived

        2?: string; // error
    }

    interface A3 {
>A3 : A3

        '1'?: Base;
>Base : Base

        '2.0'?: Base;
>Base : Base
    }

    interface B3 extends A3 {
>B3 : B3
>A3 : A3

        '1'?: Derived; // ok
>Derived : Derived

        '2.0'?: string; // error
    }
}
