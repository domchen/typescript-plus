=== tests/cases/conformance/es6/templates/templateStringBinaryOperationsInvalid.ts ===
var a = 1 - `${ 3 }`;
>a : Symbol(a, Decl(templateStringBinaryOperationsInvalid.ts, 0, 3))

var b = 1 - `2${ 3 }`;
>b : Symbol(b, Decl(templateStringBinaryOperationsInvalid.ts, 1, 3))

var c = 1 - `${ 3 }4`;
>c : Symbol(c, Decl(templateStringBinaryOperationsInvalid.ts, 2, 3))

var d = 1 - `2${ 3 }4`;
>d : Symbol(d, Decl(templateStringBinaryOperationsInvalid.ts, 3, 3))

var e = `${ 3 }` - 5;
>e : Symbol(e, Decl(templateStringBinaryOperationsInvalid.ts, 4, 3))

var f = `2${ 3 }` - 5;
>f : Symbol(f, Decl(templateStringBinaryOperationsInvalid.ts, 5, 3))

var g = `${ 3 }4` - 5;
>g : Symbol(g, Decl(templateStringBinaryOperationsInvalid.ts, 6, 3))

var h = `2${ 3 }4` - 5;
>h : Symbol(h, Decl(templateStringBinaryOperationsInvalid.ts, 7, 3))

var a2 = 1 * `${ 3 }`;
>a2 : Symbol(a2, Decl(templateStringBinaryOperationsInvalid.ts, 9, 3))

var b2 = 1 * `2${ 3 }`;
>b2 : Symbol(b2, Decl(templateStringBinaryOperationsInvalid.ts, 10, 3))

var c2 = 1 * `${ 3 }4`;
>c2 : Symbol(c2, Decl(templateStringBinaryOperationsInvalid.ts, 11, 3))

var d2 = 1 * `2${ 3 }4`;
>d2 : Symbol(d2, Decl(templateStringBinaryOperationsInvalid.ts, 12, 3))

var e2 = `${ 3 }` * 5;
>e2 : Symbol(e2, Decl(templateStringBinaryOperationsInvalid.ts, 13, 3))

var f2 = `2${ 3 }` * 5;
>f2 : Symbol(f2, Decl(templateStringBinaryOperationsInvalid.ts, 14, 3))

var g2 = `${ 3 }4` * 5;
>g2 : Symbol(g2, Decl(templateStringBinaryOperationsInvalid.ts, 15, 3))

var h2 = `2${ 3 }4` * 5;
>h2 : Symbol(h2, Decl(templateStringBinaryOperationsInvalid.ts, 16, 3))

var a3 = 1 & `${ 3 }`;
>a3 : Symbol(a3, Decl(templateStringBinaryOperationsInvalid.ts, 18, 3))

var b3 = 1 & `2${ 3 }`;
>b3 : Symbol(b3, Decl(templateStringBinaryOperationsInvalid.ts, 19, 3))

var c3 = 1 & `${ 3 }4`;
>c3 : Symbol(c3, Decl(templateStringBinaryOperationsInvalid.ts, 20, 3))

var d3 = 1 & `2${ 3 }4`;
>d3 : Symbol(d3, Decl(templateStringBinaryOperationsInvalid.ts, 21, 3))

var e3 = `${ 3 }` & 5;
>e3 : Symbol(e3, Decl(templateStringBinaryOperationsInvalid.ts, 22, 3))

var f3 = `2${ 3 }` & 5;
>f3 : Symbol(f3, Decl(templateStringBinaryOperationsInvalid.ts, 23, 3))

var g3 = `${ 3 }4` & 5;
>g3 : Symbol(g3, Decl(templateStringBinaryOperationsInvalid.ts, 24, 3))

var h3 = `2${ 3 }4` & 5;
>h3 : Symbol(h3, Decl(templateStringBinaryOperationsInvalid.ts, 25, 3))

var a4 = 1 - `${ 3 - 4 }`;
>a4 : Symbol(a4, Decl(templateStringBinaryOperationsInvalid.ts, 27, 3))

var b4 = 1 - `2${ 3 - 4 }`;
>b4 : Symbol(b4, Decl(templateStringBinaryOperationsInvalid.ts, 28, 3))

var c4 = 1 - `${ 3 - 4 }5`;
>c4 : Symbol(c4, Decl(templateStringBinaryOperationsInvalid.ts, 29, 3))

var d4 = 1 - `2${ 3 - 4 }5`;
>d4 : Symbol(d4, Decl(templateStringBinaryOperationsInvalid.ts, 30, 3))

var e4 = `${ 3 - 4 }` - 6;
>e4 : Symbol(e4, Decl(templateStringBinaryOperationsInvalid.ts, 31, 3))

var f4 = `2${ 3 - 4 }` - 6;
>f4 : Symbol(f4, Decl(templateStringBinaryOperationsInvalid.ts, 32, 3))

var g4 = `${ 3 - 4 }5` - 6;
>g4 : Symbol(g4, Decl(templateStringBinaryOperationsInvalid.ts, 33, 3))

var h4 = `2${ 3 - 4 }5` - 6;
>h4 : Symbol(h4, Decl(templateStringBinaryOperationsInvalid.ts, 34, 3))

var a5 = 1 - `${ 3 * 4 }`;
>a5 : Symbol(a5, Decl(templateStringBinaryOperationsInvalid.ts, 36, 3))

var b5 = 1 - `2${ 3 * 4 }`;
>b5 : Symbol(b5, Decl(templateStringBinaryOperationsInvalid.ts, 37, 3))

var c5 = 1 - `${ 3 * 4 }5`;
>c5 : Symbol(c5, Decl(templateStringBinaryOperationsInvalid.ts, 38, 3))

var d5 = 1 - `2${ 3 * 4 }5`;
>d5 : Symbol(d5, Decl(templateStringBinaryOperationsInvalid.ts, 39, 3))

var e5 = `${ 3 * 4 }` - 6;
>e5 : Symbol(e5, Decl(templateStringBinaryOperationsInvalid.ts, 40, 3))

var f5 = `2${ 3 * 4 }` - 6;
>f5 : Symbol(f5, Decl(templateStringBinaryOperationsInvalid.ts, 41, 3))

var g5 = `${ 3 * 4 }5` - 6;
>g5 : Symbol(g5, Decl(templateStringBinaryOperationsInvalid.ts, 42, 3))

var h5 = `2${ 3 * 4 }5` - 6;
>h5 : Symbol(h5, Decl(templateStringBinaryOperationsInvalid.ts, 43, 3))

var a6 = 1 - `${ 3 & 4 }`;
>a6 : Symbol(a6, Decl(templateStringBinaryOperationsInvalid.ts, 45, 3))

var b6 = 1 - `2${ 3 & 4 }`;
>b6 : Symbol(b6, Decl(templateStringBinaryOperationsInvalid.ts, 46, 3))

var c6 = 1 - `${ 3 & 4 }5`;
>c6 : Symbol(c6, Decl(templateStringBinaryOperationsInvalid.ts, 47, 3))

var d6 = 1 - `2${ 3 & 4 }5`;
>d6 : Symbol(d6, Decl(templateStringBinaryOperationsInvalid.ts, 48, 3))

var e6 = `${ 3 & 4 }` - 6;
>e6 : Symbol(e6, Decl(templateStringBinaryOperationsInvalid.ts, 49, 3))

var f6 = `2${ 3 & 4 }` - 6;
>f6 : Symbol(f6, Decl(templateStringBinaryOperationsInvalid.ts, 50, 3))

var g6 = `${ 3 & 4 }5` - 6;
>g6 : Symbol(g6, Decl(templateStringBinaryOperationsInvalid.ts, 51, 3))

var h6 = `2${ 3 & 4 }5` - 6;
>h6 : Symbol(h6, Decl(templateStringBinaryOperationsInvalid.ts, 52, 3))

var a7 = 1 * `${ 3 - 4 }`;
>a7 : Symbol(a7, Decl(templateStringBinaryOperationsInvalid.ts, 54, 3))

var b7 = 1 * `2${ 3 - 4 }`;
>b7 : Symbol(b7, Decl(templateStringBinaryOperationsInvalid.ts, 55, 3))

var c7 = 1 * `${ 3 - 4 }5`;
>c7 : Symbol(c7, Decl(templateStringBinaryOperationsInvalid.ts, 56, 3))

var d7 = 1 * `2${ 3 - 4 }5`;
>d7 : Symbol(d7, Decl(templateStringBinaryOperationsInvalid.ts, 57, 3))

var e7 = `${ 3 - 4 }` * 6;
>e7 : Symbol(e7, Decl(templateStringBinaryOperationsInvalid.ts, 58, 3))

var f7 = `2${ 3 - 4 }` * 6;
>f7 : Symbol(f7, Decl(templateStringBinaryOperationsInvalid.ts, 59, 3))

var g7 = `${ 3 - 4 }5` * 6;
>g7 : Symbol(g7, Decl(templateStringBinaryOperationsInvalid.ts, 60, 3))

var h7 = `2${ 3 - 4 }5` * 6;
>h7 : Symbol(h7, Decl(templateStringBinaryOperationsInvalid.ts, 61, 3))

var a8 = 1 * `${ 3 * 4 }`;
>a8 : Symbol(a8, Decl(templateStringBinaryOperationsInvalid.ts, 63, 3))

var b8 = 1 * `2${ 3 * 4 }`;
>b8 : Symbol(b8, Decl(templateStringBinaryOperationsInvalid.ts, 64, 3))

var c8 = 1 * `${ 3 * 4 }5`;
>c8 : Symbol(c8, Decl(templateStringBinaryOperationsInvalid.ts, 65, 3))

var d8 = 1 * `2${ 3 * 4 }5`;
>d8 : Symbol(d8, Decl(templateStringBinaryOperationsInvalid.ts, 66, 3))

var e8 = `${ 3 * 4 }` * 6;
>e8 : Symbol(e8, Decl(templateStringBinaryOperationsInvalid.ts, 67, 3))

var f8 = `2${ 3 * 4 }` * 6;
>f8 : Symbol(f8, Decl(templateStringBinaryOperationsInvalid.ts, 68, 3))

var g8 = `${ 3 * 4 }5` * 6;
>g8 : Symbol(g8, Decl(templateStringBinaryOperationsInvalid.ts, 69, 3))

var h8 = `2${ 3 * 4 }5` * 6;
>h8 : Symbol(h8, Decl(templateStringBinaryOperationsInvalid.ts, 70, 3))

var a9 = 1 * `${ 3 & 4 }`;
>a9 : Symbol(a9, Decl(templateStringBinaryOperationsInvalid.ts, 72, 3))

var b9 = 1 * `2${ 3 & 4 }`;
>b9 : Symbol(b9, Decl(templateStringBinaryOperationsInvalid.ts, 73, 3))

var c9 = 1 * `${ 3 & 4 }5`;
>c9 : Symbol(c9, Decl(templateStringBinaryOperationsInvalid.ts, 74, 3))

var d9 = 1 * `2${ 3 & 4 }5`;
>d9 : Symbol(d9, Decl(templateStringBinaryOperationsInvalid.ts, 75, 3))

var e9 = `${ 3 & 4 }` * 6;
>e9 : Symbol(e9, Decl(templateStringBinaryOperationsInvalid.ts, 76, 3))

var f9 = `2${ 3 & 4 }` * 6;
>f9 : Symbol(f9, Decl(templateStringBinaryOperationsInvalid.ts, 77, 3))

var g9 = `${ 3 & 4 }5` * 6;
>g9 : Symbol(g9, Decl(templateStringBinaryOperationsInvalid.ts, 78, 3))

var h9 = `2${ 3 & 4 }5` * 6;
>h9 : Symbol(h9, Decl(templateStringBinaryOperationsInvalid.ts, 79, 3))

var aa = 1 & `${ 3 - 4 }`;
>aa : Symbol(aa, Decl(templateStringBinaryOperationsInvalid.ts, 81, 3))

var ba = 1 & `2${ 3 - 4 }`;
>ba : Symbol(ba, Decl(templateStringBinaryOperationsInvalid.ts, 82, 3))

var ca = 1 & `${ 3 - 4 }5`;
>ca : Symbol(ca, Decl(templateStringBinaryOperationsInvalid.ts, 83, 3))

var da = 1 & `2${ 3 - 4 }5`;
>da : Symbol(da, Decl(templateStringBinaryOperationsInvalid.ts, 84, 3))

var ea = `${ 3 - 4 }` & 6;
>ea : Symbol(ea, Decl(templateStringBinaryOperationsInvalid.ts, 85, 3))

var fa = `2${ 3 - 4 }` & 6;
>fa : Symbol(fa, Decl(templateStringBinaryOperationsInvalid.ts, 86, 3))

var ga = `${ 3 - 4 }5` & 6;
>ga : Symbol(ga, Decl(templateStringBinaryOperationsInvalid.ts, 87, 3))

var ha = `2${ 3 - 4 }5` & 6;
>ha : Symbol(ha, Decl(templateStringBinaryOperationsInvalid.ts, 88, 3))

var ab = 1 & `${ 3 * 4 }`;
>ab : Symbol(ab, Decl(templateStringBinaryOperationsInvalid.ts, 90, 3))

var bb = 1 & `2${ 3 * 4 }`;
>bb : Symbol(bb, Decl(templateStringBinaryOperationsInvalid.ts, 91, 3))

var cb = 1 & `${ 3 * 4 }5`;
>cb : Symbol(cb, Decl(templateStringBinaryOperationsInvalid.ts, 92, 3))

var db = 1 & `2${ 3 * 4 }5`;
>db : Symbol(db, Decl(templateStringBinaryOperationsInvalid.ts, 93, 3))

var eb = `${ 3 * 4 }` & 6;
>eb : Symbol(eb, Decl(templateStringBinaryOperationsInvalid.ts, 94, 3))

var fb = `2${ 3 * 4 }` & 6;
>fb : Symbol(fb, Decl(templateStringBinaryOperationsInvalid.ts, 95, 3))

var gb = `${ 3 * 4 }5` & 6;
>gb : Symbol(gb, Decl(templateStringBinaryOperationsInvalid.ts, 96, 3))

var hb = `2${ 3 * 4 }5` & 6;
>hb : Symbol(hb, Decl(templateStringBinaryOperationsInvalid.ts, 97, 3))

var ac = 1 & `${ 3 & 4 }`;
>ac : Symbol(ac, Decl(templateStringBinaryOperationsInvalid.ts, 99, 3))

var bc = 1 & `2${ 3 & 4 }`;
>bc : Symbol(bc, Decl(templateStringBinaryOperationsInvalid.ts, 100, 3))

var cc = 1 & `${ 3 & 4 }5`;
>cc : Symbol(cc, Decl(templateStringBinaryOperationsInvalid.ts, 101, 3))

var dc = 1 & `2${ 3 & 4 }5`;
>dc : Symbol(dc, Decl(templateStringBinaryOperationsInvalid.ts, 102, 3))

var ec = `${ 3 & 4 }` & 6;
>ec : Symbol(ec, Decl(templateStringBinaryOperationsInvalid.ts, 103, 3))

var fc = `2${ 3 & 4 }` & 6;
>fc : Symbol(fc, Decl(templateStringBinaryOperationsInvalid.ts, 104, 3))

var gc = `${ 3 & 4 }5` & 6;
>gc : Symbol(gc, Decl(templateStringBinaryOperationsInvalid.ts, 105, 3))

var hc = `2${ 3 & 4 }5` & 6;
>hc : Symbol(hc, Decl(templateStringBinaryOperationsInvalid.ts, 106, 3))

