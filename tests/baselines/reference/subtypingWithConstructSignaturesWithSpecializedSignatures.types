=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts ===
// same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results

module CallSignature {
>CallSignature : any

    interface Base { // T
>Base : Base

        // M's
        new (x: 'a'): void;
>x : "a"

        new (x: string, y: number): void;
>x : string
>y : number
    }

    // S's
    interface I extends Base {
>I : I
>Base : Base

        // N's
        new (x: 'a'): number; // ok because base returns void
>x : "a"

        new (x: string, y: number): number; // ok because base returns void
>x : string
>y : number

        new <T>(x: T): string; // ok because base returns void
>T : T
>x : T
>T : T
    }   

    interface Base2 { // T
>Base2 : Base2

        // M's
        new (x: 'a'): number;
>x : "a"

        new (x: string): number;
>x : string
    }

    // S's
    interface I2 extends Base2 {
>I2 : I2
>Base2 : Base2

        // N's
        new (x: 'a'): string;
>x : "a"

        new (x: string): string; // error because base returns non-void;
>x : string
    }

    // S's
    interface I3 extends Base2 {
>I3 : I3
>Base2 : Base2

        // N's
        new <T>(x: T): string; // ok, adds a new call signature
>T : T
>x : T
>T : T
    }
}

module MemberWithCallSignature {
>MemberWithCallSignature : any

    interface Base { // T
>Base : Base

        // M's
        a: {
>a : { new (x: "a"): void; new (x: string): void; }

            new (x: 'a'): void;
>x : "a"

            new (x: string): void;
>x : string
        }
        a2: {
>a2 : { new (x: "a", y: number): void; new (x: string, y: number): void; }

            new (x: 'a', y: number): void;
>x : "a"
>y : number

            new (x: string, y: number): void;
>x : string
>y : number
        }
        a3: new <T>(x: T) => void;
>a3 : new <T>(x: T) => void
>T : T
>x : T
>T : T
    }

    // S's
    interface I extends Base {
>I : I
>Base : Base

        // N's
        a: new (x: string) => number; // ok because base returns void
>a : new (x: string) => number
>x : string

        a2: new  (x: string, y: number) => boolean; // ok because base returns void
>a2 : new (x: string, y: number) => boolean
>x : string
>y : number

        a3: new <T>(x: T) => string; // ok because base returns void
>a3 : new <T>(x: T) => string
>T : T
>x : T
>T : T
    }

    interface Base2 { // T
>Base2 : Base2

        // M's
        a: {
>a : { new (x: "a"): number; new (x: string): number; }

            new (x: 'a'): number;
>x : "a"

            new (x: string): number;
>x : string
        }
        a2: new <T>(x: T) => T;
>a2 : new <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    // S's
    interface I2 extends Base2 {
>I2 : I2
>Base2 : Base2

        // N's
        a: new (x: string) => string; // error because base returns non-void;
>a : new (x: string) => string
>x : string
    }

    // S's
    interface I3 extends Base2 {
>I3 : I3
>Base2 : Base2

        // N's
        a2: new <T>(x: T) => string; // error because base returns non-void;
>a2 : new <T>(x: T) => string
>T : T
>x : T
>T : T
    }
}
