// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`directive_decl.graphql 1`] = `
directive @dir(
  # comment
  arg1: String


  # comment
  arg2: String
  arg3: String

) on QUERY
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
directive @dir(
  # comment
  arg1: String

  # comment
  arg2: String
  arg3: String
) on QUERY

`;

exports[`directives.graphql 1`] = `
query MyQuery @directive(
  arg: 5

  # comment
  arg2: 10

) {
  field @skip(
    if: true

    # comment
    cursor: 10

  ) @nope
  otherField
  ...fragmentSpread, @include(if: ["this isn't even a boolean", "wow, that's really odd",,,,,])
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
query MyQuery
  @directive(
    arg: 5

    # comment
    arg2: 10
  ) {
  field
    @skip(
      if: true

      # comment
      cursor: 10
    )
    @nope
  otherField
  ...fragmentSpread
    @include(if: ["this isn't even a boolean", "wow, that's really odd"])
}

`;

exports[`enum.graphql 1`] = `
enum State {
  # pending state
  PENDING

  # visible states
  VISIBLE
  INVISIBLE

  # archive state
  ARCHIVED
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
enum State {
  # pending state
  PENDING

  # visible states
  VISIBLE
  INVISIBLE

  # archive state
  ARCHIVED
}

`;

exports[`fields.graphql 1`] = `
query MyFirstQuery {
  # comment
  field {

    subfield

    # comment
    subfield

  }

  field
  #comment
  field

}

mutation MyFirstMutation {

  # comment
  name

  comment # comment
  kind

}

subscription MySubscription {

  name

  comment
  kind

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
query MyFirstQuery {
  # comment
  field {
    subfield

    # comment
    subfield
  }

  field
  #comment
  field
}

mutation MyFirstMutation {
  # comment
  name

  comment # comment
  kind
}

subscription MySubscription {
  name

  comment
  kind
}

`;

exports[`input.graphql 1`] = `
input Params {
  # Id
  id: ID

  # Name
  name: String

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
input Params {
  # Id
  id: ID

  # Name
  name: String
}

`;

exports[`interface.graphql 1`] = `
interface Actor {
  # Id
  id: ID

  # Actor fields
  name: String
  kind: String

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface Actor {
  # Id
  id: ID

  # Actor fields
  name: String
  kind: String
}

`;

exports[`object_type_def.graphql 1`] = `
type Artist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type Artist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection
}

`;

exports[`schema.graphql 1`] = `
# Schema
schema {
  # Query and Mutation
  query: Root
  mutation: Mutation

  # Subscription
  subscription: Subscription

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Schema
schema {
  # Query and Mutation
  query: Root
  mutation: Mutation

  # Subscription
  subscription: Subscription
}

`;
