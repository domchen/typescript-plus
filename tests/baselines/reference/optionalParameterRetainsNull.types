=== tests/cases/compiler/optionalParameterRetainsNull.ts ===
interface Bar {  bar: number; foo: object | null;  }
>bar : number
>foo : object | null
>null : null

let a = {
>a : { test<K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined): void; }
>{  test<K extends keyof Bar> (a: K,  b?: Bar[K]  |  null)  { }} : { test<K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined): void; }

  test<K extends keyof Bar> (a: K,  b?: Bar[K]  |  null)  { }
>test : <K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined) => void
>a : K
>b : Bar[K] | null | undefined
>null : null

};
a.test("bar", null); // ok, null is assignable to number | null | undefined
>a.test("bar", null) : void
>a.test : <K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined) => void
>a : { test<K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined): void; }
>test : <K extends "bar" | "foo">(a: K, b?: Bar[K] | null | undefined) => void
>"bar" : "bar"
>null : null

