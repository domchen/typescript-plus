=== tests/cases/conformance/types/import/a.d.ts ===
export interface Foo {
>Foo : Symbol(Foo, Decl(a.d.ts, 0, 0))

    a: string;
>a : Symbol(Foo.a, Decl(a.d.ts, 0, 22))
}
=== tests/cases/conformance/types/import/b.d.ts ===
export interface Foo {
>Foo : Symbol(Foo, Decl(b.d.ts, 0, 0))

    a: number;
>a : Symbol(Foo.a, Decl(b.d.ts, 0, 22))
}
=== tests/cases/conformance/types/import/usage.ts ===
export function getFooFrom<T extends "./a" | "./b">(v: T): import(T).Foo {
>getFooFrom : Symbol(getFooFrom, Decl(usage.ts, 0, 0))
>T : Symbol(T, Decl(usage.ts, 0, 27))
>v : Symbol(v, Decl(usage.ts, 0, 52))
>T : Symbol(T, Decl(usage.ts, 0, 27))
>T : Symbol(T, Decl(usage.ts, 0, 27))

    return undefined as any;
>undefined : Symbol(undefined)
}

export function getFooValueFrom<T extends "./a" | "./b">(v: T): import(T).Foo["a"] {
>getFooValueFrom : Symbol(getFooValueFrom, Decl(usage.ts, 2, 1))
>T : Symbol(T, Decl(usage.ts, 4, 32))
>v : Symbol(v, Decl(usage.ts, 4, 57))
>T : Symbol(T, Decl(usage.ts, 4, 32))
>T : Symbol(T, Decl(usage.ts, 4, 32))

    return undefined as any;
>undefined : Symbol(undefined)
}

