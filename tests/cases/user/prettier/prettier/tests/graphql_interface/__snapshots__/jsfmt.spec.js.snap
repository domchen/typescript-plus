// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interface.graphql 1`] = `
interface Actor {
  id: ID
  name: String
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface Actor {
  id: ID
  name: String
}

`;

exports[`object_type_def.graphql 1`] = `
type Artist implements Node & Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type Artist implements Node & Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection
}

`;

exports[`object_type_def_mixed_syntax.graphql 1`] = `
type MixedArtist implements Node, Entity & Releasable {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type MixedArtist implements Node & Entity & Releasable {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection
}

`;

exports[`object_type_def_old_syntax.graphql 1`] = `
type OldArtist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type OldArtist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection
}

`;
