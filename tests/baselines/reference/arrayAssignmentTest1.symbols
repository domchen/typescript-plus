=== tests/cases/compiler/arrayAssignmentTest1.ts ===
interface I1 {
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))

	IM1():void[];
>IM1 : Symbol(I1.IM1, Decl(arrayAssignmentTest1.ts, 0, 14))
}

class C1 implements I1 { 
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))

	IM1():void[] {return null;}
>IM1 : Symbol(C1.IM1, Decl(arrayAssignmentTest1.ts, 4, 24))

	C1M1():C1[] {return null;}
>C1M1 : Symbol(C1.C1M1, Decl(arrayAssignmentTest1.ts, 5, 28))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))
 }
class C2 extends C1 {
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

    C2M1():C2[] { return null;}
>C2M1 : Symbol(C2.C2M1, Decl(arrayAssignmentTest1.ts, 8, 21))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))
}

class C3 {
>C3 : Symbol(C3, Decl(arrayAssignmentTest1.ts, 10, 1))

    CM3M1() { return 3;}
>CM3M1 : Symbol(C3.CM3M1, Decl(arrayAssignmentTest1.ts, 12, 10))
}


/*

This behaves unexpectedly with the following types:

Type 1 of any[]:

* Type 2 of the following throws an error but shouldn't: () => void[], SomeClass[], and {one: 1}[].

* Type 2 of the following doesn't throw an error but should: {one: 1}, new() => SomeClass, SomeClass.

*/
var a1 : any = null;
>a1 : Symbol(a1, Decl(arrayAssignmentTest1.ts, 28, 3))

var c1 : C1 = new C1();
>c1 : Symbol(c1, Decl(arrayAssignmentTest1.ts, 29, 3))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

var i1 : I1 = c1;
>i1 : Symbol(i1, Decl(arrayAssignmentTest1.ts, 30, 3))
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))
>c1 : Symbol(c1, Decl(arrayAssignmentTest1.ts, 29, 3))

var c2 : C2 = new C2();
>c2 : Symbol(c2, Decl(arrayAssignmentTest1.ts, 31, 3))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))

var c3 : C3 = new C3();
>c3 : Symbol(c3, Decl(arrayAssignmentTest1.ts, 32, 3))
>C3 : Symbol(C3, Decl(arrayAssignmentTest1.ts, 10, 1))
>C3 : Symbol(C3, Decl(arrayAssignmentTest1.ts, 10, 1))

var o1 = {one : 1};
>o1 : Symbol(o1, Decl(arrayAssignmentTest1.ts, 33, 3))
>one : Symbol(one, Decl(arrayAssignmentTest1.ts, 33, 10))

var f1 = function () { return new C1();}
>f1 : Symbol(f1, Decl(arrayAssignmentTest1.ts, 34, 3))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

var arr_any: any[] = [];
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))

var arr_i1: I1[] = [];
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))

var arr_c1: C1[] = [];
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

var arr_c2: C2[] = [];
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))

var arr_i1_2: I1[] = [];
>arr_i1_2 : Symbol(arr_i1_2, Decl(arrayAssignmentTest1.ts, 40, 3))
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))

var arr_c1_2: C1[] = [];
>arr_c1_2 : Symbol(arr_c1_2, Decl(arrayAssignmentTest1.ts, 41, 3))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

var arr_c2_2: C2[] = [];
>arr_c2_2 : Symbol(arr_c2_2, Decl(arrayAssignmentTest1.ts, 42, 3))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))

var arr_c3: C3[] = [];
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))
>C3 : Symbol(C3, Decl(arrayAssignmentTest1.ts, 10, 1))

var i1_error: I1 = []; // should be an error - is
>i1_error : Symbol(i1_error, Decl(arrayAssignmentTest1.ts, 45, 3))
>I1 : Symbol(I1, Decl(arrayAssignmentTest1.ts, 0, 0))

var c1_error: C1 = []; // should be an error - is
>c1_error : Symbol(c1_error, Decl(arrayAssignmentTest1.ts, 46, 3))
>C1 : Symbol(C1, Decl(arrayAssignmentTest1.ts, 2, 1))

var c2_error: C2 = []; // should be an error - is
>c2_error : Symbol(c2_error, Decl(arrayAssignmentTest1.ts, 47, 3))
>C2 : Symbol(C2, Decl(arrayAssignmentTest1.ts, 7, 2))

var c3_error: C3 = []; // should be an error - is
>c3_error : Symbol(c3_error, Decl(arrayAssignmentTest1.ts, 48, 3))
>C3 : Symbol(C3, Decl(arrayAssignmentTest1.ts, 10, 1))


arr_any = arr_i1; // should be ok - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))

arr_any = arr_c1; // should be ok - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))

arr_any = arr_c2; // should be ok - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))

arr_any = arr_c3; // should be ok - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))

arr_i1 = arr_i1; // should be ok - subtype relationship - is
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))

arr_i1 = arr_c1; // should be ok - subtype relationship - is
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))

arr_i1 = arr_c2; // should be ok - subtype relationship - is
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))

arr_i1 = arr_c3; // should be an error - is
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))

arr_c1 = arr_c1; // should be ok - subtype relationship - is
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))

arr_c1 = arr_c2; // should be ok - subtype relationship - is
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))

arr_c1 = arr_i1; // should be an error - is
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))

arr_c1 = arr_c3; // should be an error - is
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))

arr_c2 = arr_c2; // should be ok - subtype relationship - is
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))

arr_c2 = arr_c1; // should be an error - subtype relationship - is
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))
>arr_c1 : Symbol(arr_c1, Decl(arrayAssignmentTest1.ts, 38, 3))

arr_c2 = arr_i1; // should be an error - subtype relationship - is
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))
>arr_i1 : Symbol(arr_i1, Decl(arrayAssignmentTest1.ts, 37, 3))

arr_c2 = arr_c3; // should be an error - is
>arr_c2 : Symbol(arr_c2, Decl(arrayAssignmentTest1.ts, 39, 3))
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))

// "clean up bug" occurs at this point
// if you move these three expressions to another file, they raise an error
// something to do with state from the above propagating forward?
arr_c3 = arr_c2_2; // should be an error - is
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))
>arr_c2_2 : Symbol(arr_c2_2, Decl(arrayAssignmentTest1.ts, 42, 3))

arr_c3 = arr_c1_2; // should be an error - is
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))
>arr_c1_2 : Symbol(arr_c1_2, Decl(arrayAssignmentTest1.ts, 41, 3))

arr_c3 = arr_i1_2; // should be an error - is
>arr_c3 : Symbol(arr_c3, Decl(arrayAssignmentTest1.ts, 43, 3))
>arr_i1_2 : Symbol(arr_i1_2, Decl(arrayAssignmentTest1.ts, 40, 3))

arr_any = f1; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>f1 : Symbol(f1, Decl(arrayAssignmentTest1.ts, 34, 3))

arr_any = o1; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>o1 : Symbol(o1, Decl(arrayAssignmentTest1.ts, 33, 3))

arr_any = a1; // should be ok - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>a1 : Symbol(a1, Decl(arrayAssignmentTest1.ts, 28, 3))

arr_any = c1; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>c1 : Symbol(c1, Decl(arrayAssignmentTest1.ts, 29, 3))

arr_any = c2; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>c2 : Symbol(c2, Decl(arrayAssignmentTest1.ts, 31, 3))

arr_any = c3; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>c3 : Symbol(c3, Decl(arrayAssignmentTest1.ts, 32, 3))

arr_any = i1; // should be an error - is
>arr_any : Symbol(arr_any, Decl(arrayAssignmentTest1.ts, 36, 3))
>i1 : Symbol(i1, Decl(arrayAssignmentTest1.ts, 30, 3))

