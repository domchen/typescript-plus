=== tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughInstantiation.ts ===
// instantiating a derived type can cause an infinitely expanding type reference to be generated

interface List<T> {
>List : List<T>
>T : T

    data: T;
>data : T
>T : T

    next: List<T>;
>next : List<T>
>List : List<T>
>T : T

    owner: OwnerList<T>;
>owner : OwnerList<T>
>OwnerList : OwnerList<U>
>T : T
}

// will have an owner property that is an infinitely expanding type reference
interface OwnerList<U> extends List<List<U>> {
>OwnerList : OwnerList<U>
>U : U
>List : List<T>
>List : List<T>
>U : U

    name: string;
>name : string
}

var list: List<string>;
>list : List<string>
>List : List<T>

var ownerList: OwnerList<string>;
>ownerList : OwnerList<string>
>OwnerList : OwnerList<U>

list = ownerList; 
>list = ownerList : OwnerList<string>
>list : List<string>
>ownerList : OwnerList<string>

function other<T>(x: T) {
>other : <T>(x: T) => void
>T : T
>x : T
>T : T

    var list: List<T>;
>list : List<T>
>List : List<T>
>T : T

    var ownerList: OwnerList<T>;
>ownerList : OwnerList<T>
>OwnerList : OwnerList<U>
>T : T

    list = ownerList; 
>list = ownerList : OwnerList<T>
>list : List<T>
>ownerList : OwnerList<T>

}

