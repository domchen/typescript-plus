=== tests/cases/compiler/infinitelyExpandingTypes1.ts ===
interface List<T> {
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 0, 15))

    data: T;
>data : Symbol(List.data, Decl(infinitelyExpandingTypes1.ts, 0, 19))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 0, 15))

    next: List<T>;
>next : Symbol(List.next, Decl(infinitelyExpandingTypes1.ts, 1, 12))
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 0, 15))

    owner: List<List<T>>;
>owner : Symbol(List.owner, Decl(infinitelyExpandingTypes1.ts, 2, 18))
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 0, 15))
}


interface MyList<T> {
>MyList : Symbol(MyList, Decl(infinitelyExpandingTypes1.ts, 4, 1))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 7, 17))

    data: T;
>data : Symbol(MyList.data, Decl(infinitelyExpandingTypes1.ts, 7, 21))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 7, 17))

    next: MyList<T>;
>next : Symbol(MyList.next, Decl(infinitelyExpandingTypes1.ts, 8, 12))
>MyList : Symbol(MyList, Decl(infinitelyExpandingTypes1.ts, 4, 1))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 7, 17))

    owner: MyList<MyList<T>>;
>owner : Symbol(MyList.owner, Decl(infinitelyExpandingTypes1.ts, 9, 20))
>MyList : Symbol(MyList, Decl(infinitelyExpandingTypes1.ts, 4, 1))
>MyList : Symbol(MyList, Decl(infinitelyExpandingTypes1.ts, 4, 1))
>T : Symbol(T, Decl(infinitelyExpandingTypes1.ts, 7, 17))
}

var l: List<number>;
>l : Symbol(l, Decl(infinitelyExpandingTypes1.ts, 13, 3))
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))

var m: MyList<number>;
>m : Symbol(m, Decl(infinitelyExpandingTypes1.ts, 14, 3))
>MyList : Symbol(MyList, Decl(infinitelyExpandingTypes1.ts, 4, 1))

l == m; // should error
>l : Symbol(l, Decl(infinitelyExpandingTypes1.ts, 13, 3))
>m : Symbol(m, Decl(infinitelyExpandingTypes1.ts, 14, 3))

var l2: List<string>;
>l2 : Symbol(l2, Decl(infinitelyExpandingTypes1.ts, 18, 3))
>List : Symbol(List, Decl(infinitelyExpandingTypes1.ts, 0, 0))

l == l2; // should error;
>l : Symbol(l, Decl(infinitelyExpandingTypes1.ts, 13, 3))
>l2 : Symbol(l2, Decl(infinitelyExpandingTypes1.ts, 18, 3))

l == l; // should not error
>l : Symbol(l, Decl(infinitelyExpandingTypes1.ts, 13, 3))
>l : Symbol(l, Decl(infinitelyExpandingTypes1.ts, 13, 3))

