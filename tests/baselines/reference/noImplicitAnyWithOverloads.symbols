=== tests/cases/compiler/noImplicitAnyWithOverloads.ts ===
interface A {
>A : Symbol(A, Decl(noImplicitAnyWithOverloads.ts, 0, 0))

    foo;
>foo : Symbol(A.foo, Decl(noImplicitAnyWithOverloads.ts, 0, 13))
}
interface B { }
>B : Symbol(B, Decl(noImplicitAnyWithOverloads.ts, 2, 1))

function callb(lam: (l: A) => void);
>callb : Symbol(callb, Decl(noImplicitAnyWithOverloads.ts, 3, 15), Decl(noImplicitAnyWithOverloads.ts, 5, 36), Decl(noImplicitAnyWithOverloads.ts, 6, 36))
>lam : Symbol(lam, Decl(noImplicitAnyWithOverloads.ts, 5, 15))
>l : Symbol(l, Decl(noImplicitAnyWithOverloads.ts, 5, 21))
>A : Symbol(A, Decl(noImplicitAnyWithOverloads.ts, 0, 0))

function callb(lam: (n: B) => void);
>callb : Symbol(callb, Decl(noImplicitAnyWithOverloads.ts, 3, 15), Decl(noImplicitAnyWithOverloads.ts, 5, 36), Decl(noImplicitAnyWithOverloads.ts, 6, 36))
>lam : Symbol(lam, Decl(noImplicitAnyWithOverloads.ts, 6, 15))
>n : Symbol(n, Decl(noImplicitAnyWithOverloads.ts, 6, 21))
>B : Symbol(B, Decl(noImplicitAnyWithOverloads.ts, 2, 1))

function callb(a) { }
>callb : Symbol(callb, Decl(noImplicitAnyWithOverloads.ts, 3, 15), Decl(noImplicitAnyWithOverloads.ts, 5, 36), Decl(noImplicitAnyWithOverloads.ts, 6, 36))
>a : Symbol(a, Decl(noImplicitAnyWithOverloads.ts, 7, 15))

callb((a) => { a.foo; }); // error, chose first overload
>callb : Symbol(callb, Decl(noImplicitAnyWithOverloads.ts, 3, 15), Decl(noImplicitAnyWithOverloads.ts, 5, 36), Decl(noImplicitAnyWithOverloads.ts, 6, 36))
>a : Symbol(a, Decl(noImplicitAnyWithOverloads.ts, 8, 7))
>a.foo : Symbol(A.foo, Decl(noImplicitAnyWithOverloads.ts, 0, 13))
>a : Symbol(a, Decl(noImplicitAnyWithOverloads.ts, 8, 7))
>foo : Symbol(A.foo, Decl(noImplicitAnyWithOverloads.ts, 0, 13))

