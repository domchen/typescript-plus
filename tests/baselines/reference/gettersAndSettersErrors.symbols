=== tests/cases/compiler/gettersAndSettersErrors.ts ===
class C {
>C : Symbol(C, Decl(gettersAndSettersErrors.ts, 0, 0))

    public get Foo() { return "foo";} // ok
>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))

    public set Foo(foo:string) {} // ok
>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))
>foo : Symbol(foo, Decl(gettersAndSettersErrors.ts, 2, 19))

    public Foo = 0; // error - duplicate identifier Foo - confirmed
>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))

    public get Goo(v:string):string {return null;} // error - getters must not have a parameter
>Goo : Symbol(C.Goo, Decl(gettersAndSettersErrors.ts, 4, 19), Decl(gettersAndSettersErrors.ts, 5, 50))
>v : Symbol(v, Decl(gettersAndSettersErrors.ts, 5, 19))

    public set Goo(v:string):string {} // error - setters must not specify a return type
>Goo : Symbol(C.Goo, Decl(gettersAndSettersErrors.ts, 4, 19), Decl(gettersAndSettersErrors.ts, 5, 50))
>v : Symbol(v, Decl(gettersAndSettersErrors.ts, 6, 19))
}

class E {
>E : Symbol(E, Decl(gettersAndSettersErrors.ts, 7, 1))

    private get Baz():number { return 0; }
>Baz : Symbol(E.Baz, Decl(gettersAndSettersErrors.ts, 9, 9), Decl(gettersAndSettersErrors.ts, 10, 42))

    public set Baz(n:number) {} // error - accessors do not agree in visibility
>Baz : Symbol(E.Baz, Decl(gettersAndSettersErrors.ts, 9, 9), Decl(gettersAndSettersErrors.ts, 10, 42))
>n : Symbol(n, Decl(gettersAndSettersErrors.ts, 11, 19))
}



