=== tests/cases/conformance/types/spread/spreadUnion3.ts ===
function f(x: { y: string } | undefined): { y: string } {
>f : (x: { y: string; } | undefined) => { y: string; }
>x : { y: string; } | undefined
>y : string
>y : string

    return { y: 123, ...x } // y: string | number
>{ y: 123, ...x } : { y: number; } | { y: string; }
>y : number
>123 : 123
>x : { y: string; } | undefined
}
f(undefined)
>f(undefined) : { y: string; }
>f : (x: { y: string; } | undefined) => { y: string; }
>undefined : undefined


function g(t?: { a: number } | null): void {
>g : (t?: { a: number; } | null | undefined) => void
>t : { a: number; } | null | undefined
>a : number
>null : null

    let b = { ...t };
>b : {}
>{ ...t } : {} | {} | { a: number; }
>t : { a: number; } | null | undefined

    let c: number = b.a;  // might not have 'a'
>c : number
>b.a : any
>b : {}
>a : any
}
g()
>g() : void
>g : (t?: { a: number; } | null | undefined) => void

g(undefined)
>g(undefined) : void
>g : (t?: { a: number; } | null | undefined) => void
>undefined : undefined

g(null)
>g(null) : void
>g : (t?: { a: number; } | null | undefined) => void
>null : null

// spreading nothing but null and undefined is not allowed
declare const nullAndUndefinedUnion: null | undefined;
>nullAndUndefinedUnion : null | undefined
>null : null

var x = { ...nullAndUndefinedUnion, ...nullAndUndefinedUnion };
>x : any
>{ ...nullAndUndefinedUnion, ...nullAndUndefinedUnion } : any
>nullAndUndefinedUnion : null | undefined
>nullAndUndefinedUnion : null | undefined

var y = { ...nullAndUndefinedUnion };
>y : any
>{ ...nullAndUndefinedUnion } : any
>nullAndUndefinedUnion : null | undefined

