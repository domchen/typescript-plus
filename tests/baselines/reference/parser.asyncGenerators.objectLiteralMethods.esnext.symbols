=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/methodIsOk.ts ===
const o1 = {
>o1 : Symbol(o1, Decl(methodIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(methodIsOk.ts, 0, 12))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMethodNameIsOk.ts ===
const o2 = {
>o2 : Symbol(o2, Decl(awaitMethodNameIsOk.ts, 0, 5))

    async * await() {
>await : Symbol(await, Decl(awaitMethodNameIsOk.ts, 0, 12))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldMethodNameIsOk.ts ===
const o3 = {
>o3 : Symbol(o3, Decl(yieldMethodNameIsOk.ts, 0, 5))

    async * yield() {
>yield : Symbol(yield, Decl(yieldMethodNameIsOk.ts, 0, 12))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitParameterIsError.ts ===
const o4 = {
>o4 : Symbol(o4, Decl(awaitParameterIsError.ts, 0, 5))

    async * f(await) {
>f : Symbol(f, Decl(awaitParameterIsError.ts, 0, 12))
>await : Symbol(await, Decl(awaitParameterIsError.ts, 1, 14))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldParameterIsError.ts ===
const o5 = {
>o5 : Symbol(o5, Decl(yieldParameterIsError.ts, 0, 5))

    async * f(yield) {
>f : Symbol(f, Decl(yieldParameterIsError.ts, 0, 12))
>yield : Symbol(yield, Decl(yieldParameterIsError.ts, 1, 14))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitInParameterInitializerIsError.ts ===
const o6 = {
>o6 : Symbol(o6, Decl(awaitInParameterInitializerIsError.ts, 0, 5))

    async * f(a = await 1) {
>f : Symbol(f, Decl(awaitInParameterInitializerIsError.ts, 0, 12))
>a : Symbol(a, Decl(awaitInParameterInitializerIsError.ts, 1, 14))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInParameterInitializerIsError.ts ===
const o7 = {
>o7 : Symbol(o7, Decl(yieldInParameterInitializerIsError.ts, 0, 5))

    async * f(a = yield) {
>f : Symbol(f, Decl(yieldInParameterInitializerIsError.ts, 0, 12))
>a : Symbol(a, Decl(yieldInParameterInitializerIsError.ts, 1, 14))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedAsyncGeneratorIsOk.ts ===
const o8 = {
>o8 : Symbol(o8, Decl(nestedAsyncGeneratorIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(nestedAsyncGeneratorIsOk.ts, 0, 12))

        async function * g() {
>g : Symbol(g, Decl(nestedAsyncGeneratorIsOk.ts, 1, 17))
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedYieldIsError.ts ===
const o9 = {
>o9 : Symbol(o9, Decl(nestedFunctionDeclarationNamedYieldIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(nestedFunctionDeclarationNamedYieldIsError.ts, 0, 12))

        function yield() {
> : Symbol((Missing), Decl(nestedFunctionDeclarationNamedYieldIsError.ts, 1, 17))
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedYieldIsError.ts ===
const o10 = {
>o10 : Symbol(o10, Decl(nestedFunctionExpressionNamedYieldIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(nestedFunctionExpressionNamedYieldIsError.ts, 0, 13))

        const x = function yield() {
>x : Symbol(x, Decl(nestedFunctionExpressionNamedYieldIsError.ts, 2, 13))

        };
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedAwaitIsError.ts ===
const o11 = {
>o11 : Symbol(o11, Decl(nestedFunctionDeclarationNamedAwaitIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(nestedFunctionDeclarationNamedAwaitIsError.ts, 0, 13))

        function await() {
> : Symbol((Missing), Decl(nestedFunctionDeclarationNamedAwaitIsError.ts, 1, 17))
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedAwaitIsError.ts ===
const o12 = {
>o12 : Symbol(o12, Decl(nestedFunctionExpressionNamedAwaitIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(nestedFunctionExpressionNamedAwaitIsError.ts, 0, 13))

        const x = function await() {
>x : Symbol(x, Decl(nestedFunctionExpressionNamedAwaitIsError.ts, 2, 13))

        };
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldIsOk.ts ===
const o13 = {
>o13 : Symbol(o13, Decl(yieldIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(yieldIsOk.ts, 0, 13))

        yield;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldWithValueIsOk.ts ===
const o14 = {
>o14 : Symbol(o14, Decl(yieldWithValueIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(yieldWithValueIsOk.ts, 0, 13))

        yield 1;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarMissingValueIsError.ts ===
const o15 = {
>o15 : Symbol(o15, Decl(yieldStarMissingValueIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(yieldStarMissingValueIsError.ts, 0, 13))

        yield *;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarWithValueIsOk.ts ===
const o16 = {
>o16 : Symbol(o16, Decl(yieldStarWithValueIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(yieldStarWithValueIsOk.ts, 0, 13))

        yield * [];
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitWithValueIsOk.ts ===
const o17 = {
>o17 : Symbol(o17, Decl(awaitWithValueIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(awaitWithValueIsOk.ts, 0, 13))

        await 1;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMissingValueIsError.ts ===
const o18 = {
>o18 : Symbol(o18, Decl(awaitMissingValueIsError.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(awaitMissingValueIsError.ts, 0, 13))

        await;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitAsTypeIsOk.ts ===
interface await {}
>await : Symbol(await, Decl(awaitAsTypeIsOk.ts, 0, 0))

const o19 = {
>o19 : Symbol(o19, Decl(awaitAsTypeIsOk.ts, 1, 5))

    async * f() {
>f : Symbol(f, Decl(awaitAsTypeIsOk.ts, 1, 13))

        let x: await;
>x : Symbol(x, Decl(awaitAsTypeIsOk.ts, 3, 11))
>await : Symbol(await, Decl(awaitAsTypeIsOk.ts, 0, 0))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldAsTypeIsOk.ts ===
interface yield {}
>yield : Symbol(yield, Decl(yieldAsTypeIsOk.ts, 0, 0))

const o20 = {
>o20 : Symbol(o20, Decl(yieldAsTypeIsOk.ts, 1, 5))

    async * f() {
>f : Symbol(f, Decl(yieldAsTypeIsOk.ts, 1, 13))

        let x: yield;
>x : Symbol(x, Decl(yieldAsTypeIsOk.ts, 3, 11))
>yield : Symbol(yield, Decl(yieldAsTypeIsOk.ts, 0, 0))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInNestedComputedPropertyIsOk.ts ===
const o21 = {
>o21 : Symbol(o21, Decl(yieldInNestedComputedPropertyIsOk.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(yieldInNestedComputedPropertyIsOk.ts, 0, 13))

        const x = { [yield]: 1 };
>x : Symbol(x, Decl(yieldInNestedComputedPropertyIsOk.ts, 2, 13))
>[yield] : Symbol([yield], Decl(yieldInNestedComputedPropertyIsOk.ts, 2, 19))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorGetAccessorIsError.ts ===
const o22 = {
>o22 : Symbol(o22, Decl(asyncGeneratorGetAccessorIsError.ts, 0, 5))

    async * get x() {
>get : Symbol(get, Decl(asyncGeneratorGetAccessorIsError.ts, 0, 13))
>x : Symbol(x, Decl(asyncGeneratorGetAccessorIsError.ts, 1, 15))

        return 1;
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorSetAccessorIsError.ts ===
const o23 = {
>o23 : Symbol(o23, Decl(asyncGeneratorSetAccessorIsError.ts, 0, 5))

    async * set x(value: number) {
>set : Symbol(set, Decl(asyncGeneratorSetAccessorIsError.ts, 0, 13))
>x : Symbol(x, Decl(asyncGeneratorSetAccessorIsError.ts, 1, 15))
>value : Symbol(value, Decl(asyncGeneratorSetAccessorIsError.ts, 1, 18))
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorPropertyIsError.ts ===
const o24 = {
>o24 : Symbol(o24, Decl(asyncGeneratorPropertyIsError.ts, 0, 5))

    async * x: 1;
>x : Symbol(x, Decl(asyncGeneratorPropertyIsError.ts, 0, 13))

};
