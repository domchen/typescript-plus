=== tests/cases/compiler/a.ts ===
export default abstract class A { a: number; }
>A : Symbol(A, Decl(a.ts, 0, 0))
>a : Symbol(A.a, Decl(a.ts, 0, 33))

class B extends A {}
>B : Symbol(B, Decl(a.ts, 0, 46))
>A : Symbol(A, Decl(a.ts, 0, 0))

new B().a.toExponential();
>new B().a.toExponential : Symbol(Number.toExponential, Decl(lib.d.ts, --, --))
>new B().a : Symbol(A.a, Decl(a.ts, 0, 33))
>B : Symbol(B, Decl(a.ts, 0, 46))
>a : Symbol(A.a, Decl(a.ts, 0, 33))
>toExponential : Symbol(Number.toExponential, Decl(lib.d.ts, --, --))

=== tests/cases/compiler/b.ts ===
import A from './a';
>A : Symbol(A, Decl(b.ts, 0, 6))

class C extends A {}
>C : Symbol(C, Decl(b.ts, 0, 20))
>A : Symbol(A, Decl(b.ts, 0, 6))

new C().a.toExponential();
>new C().a.toExponential : Symbol(Number.toExponential, Decl(lib.d.ts, --, --))
>new C().a : Symbol(A.a, Decl(a.ts, 0, 33))
>C : Symbol(C, Decl(b.ts, 0, 20))
>a : Symbol(A.a, Decl(a.ts, 0, 33))
>toExponential : Symbol(Number.toExponential, Decl(lib.d.ts, --, --))

