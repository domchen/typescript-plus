=== tests/cases/conformance/types/import/foo.ts ===
interface Point<T> {
>Point : Symbol(Point, Decl(foo.ts, 0, 0))
>T : Symbol(T, Decl(foo.ts, 0, 16))

    x: number;
>x : Symbol(Point.x, Decl(foo.ts, 0, 20))

    y: number;
>y : Symbol(Point.y, Decl(foo.ts, 1, 14))

    data: T;
>data : Symbol(Point.data, Decl(foo.ts, 2, 14))
>T : Symbol(T, Decl(foo.ts, 0, 16))
}
export = Point;
>Point : Symbol(Point, Decl(foo.ts, 0, 0))

=== tests/cases/conformance/types/import/foo2.ts ===
namespace Bar {
>Bar : Symbol(Bar, Decl(foo2.ts, 0, 0), Decl(foo2.ts, 14, 1))

    export interface I<T> {
>I : Symbol(I, Decl(foo2.ts, 0, 15))
>T : Symbol(T, Decl(foo2.ts, 1, 23))

        a: string;
>a : Symbol(I.a, Decl(foo2.ts, 1, 27))

        b: number;
>b : Symbol(I.b, Decl(foo2.ts, 2, 18))

        data: T;
>data : Symbol(I.data, Decl(foo2.ts, 3, 18))
>T : Symbol(T, Decl(foo2.ts, 1, 23))
    }
}

export namespace Baz {
>Baz : Symbol(Baz, Decl(foo2.ts, 6, 1))

    export interface J<T> {
>J : Symbol(J, Decl(foo2.ts, 8, 22))
>T : Symbol(T, Decl(foo2.ts, 9, 23))

        a: number;
>a : Symbol(J.a, Decl(foo2.ts, 9, 27))

        b: string;
>b : Symbol(J.b, Decl(foo2.ts, 10, 18))

        data: T;
>data : Symbol(J.data, Decl(foo2.ts, 11, 18))
>T : Symbol(T, Decl(foo2.ts, 9, 23))
    }
}

class Bar<T> {
>Bar : Symbol(Bar, Decl(foo2.ts, 0, 0), Decl(foo2.ts, 14, 1))
>T : Symbol(T, Decl(foo2.ts, 16, 10))

    item: Bar.I<T>;
>item : Symbol(Bar.item, Decl(foo2.ts, 16, 14))
>Bar : Symbol(Bar, Decl(foo2.ts, 0, 0), Decl(foo2.ts, 14, 1))
>I : Symbol(Bar.I, Decl(foo2.ts, 0, 15))
>T : Symbol(T, Decl(foo2.ts, 16, 10))

    constructor(input: Baz.J<T>) {}
>input : Symbol(input, Decl(foo2.ts, 18, 16))
>Baz : Symbol(Baz, Decl(foo2.ts, 6, 1))
>J : Symbol(Baz.J, Decl(foo2.ts, 8, 22))
>T : Symbol(T, Decl(foo2.ts, 16, 10))
}
export { Bar }
>Bar : Symbol(Bar, Decl(foo2.ts, 20, 8))

=== tests/cases/conformance/types/import/usage.ts ===
export const x: import("./foo")<{x: number}> = { x: 0, y: 0, data: {x: 12} };
>x : Symbol(x, Decl(usage.ts, 0, 12))
>x : Symbol(x, Decl(usage.ts, 0, 33))
>x : Symbol(x, Decl(usage.ts, 0, 48))
>y : Symbol(y, Decl(usage.ts, 0, 54))
>data : Symbol(data, Decl(usage.ts, 0, 60))
>x : Symbol(x, Decl(usage.ts, 0, 68))

export let y: import("./foo2").Bar.I<{x: number}> = { a: "", b: 0, data: {x: 12} };
>y : Symbol(y, Decl(usage.ts, 1, 10))
>Bar : Symbol(Bar, Decl(foo2.ts, 20, 8))
>I : Symbol(Bar.I, Decl(foo2.ts, 0, 15))
>x : Symbol(x, Decl(usage.ts, 1, 38))
>a : Symbol(a, Decl(usage.ts, 1, 53))
>b : Symbol(b, Decl(usage.ts, 1, 60))
>data : Symbol(data, Decl(usage.ts, 1, 66))
>x : Symbol(x, Decl(usage.ts, 1, 74))

export class Bar2<T> {
>Bar2 : Symbol(Bar2, Decl(usage.ts, 1, 83))
>T : Symbol(T, Decl(usage.ts, 3, 18))

    item: {a: string, b: number, c: object, data: T};
>item : Symbol(Bar2.item, Decl(usage.ts, 3, 22))
>a : Symbol(a, Decl(usage.ts, 4, 11))
>b : Symbol(b, Decl(usage.ts, 4, 21))
>c : Symbol(c, Decl(usage.ts, 4, 32))
>data : Symbol(data, Decl(usage.ts, 4, 43))
>T : Symbol(T, Decl(usage.ts, 3, 18))

    constructor(input?: any) {}
>input : Symbol(input, Decl(usage.ts, 5, 16))
}

export let shim: typeof import("./foo2") = {
>shim : Symbol(shim, Decl(usage.ts, 8, 10))

    Bar: Bar2
>Bar : Symbol(Bar, Decl(usage.ts, 8, 44))
>Bar2 : Symbol(Bar2, Decl(usage.ts, 1, 83))

};

