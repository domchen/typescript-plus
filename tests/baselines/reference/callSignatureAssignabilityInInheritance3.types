=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance3.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation
// error cases

module Errors {
>Errors : typeof Errors

    class Base { foo: string; }
>Base : Base
>foo : string

    class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : string

    class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : string

    class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : string

    module WithNonGenericSignaturesInBaseType {
>WithNonGenericSignaturesInBaseType : any

        // base type with non-generic call signatures
        interface A {
>A : A

            a2: (x: number) => string[];
>a2 : (x: number) => string[]
>x : number

            a7: (x: (arg: Base) => Derived) => (r: Base) => Derived2;
>a7 : (x: (arg: Base) => Derived) => (r: Base) => Derived2
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived2 : Derived2

            a8: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

            a10: (...x: Base[]) => Base;
>a10 : (...x: Base[]) => Base
>x : Base[]
>Base : Base
>Base : Base

            a11: (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>x : { foo: string; }
>foo : string
>y : { foo: string; bar: string; }
>foo : string
>bar : string
>Base : Base

            a12: (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>a12 : (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived

            a14: {
>a14 : { (x: number): number[]; (x: string): string[]; }

                (x: number): number[];
>x : number

                (x: string): string[];
>x : string

            };
            a15: (x: { a: string; b: number }) => number;
>a15 : (x: { a: string; b: number; }) => number
>x : { a: string; b: number; }
>a : string
>b : number

            a16: {
>a16 : { (x: { (a: number): number; (a?: number): number; }): number[]; (x: { (a: boolean): boolean; (a?: boolean): boolean; }): boolean[]; }

                // type of parameter is overload set which means we can't do inference based on this type
                (x: {
>x : { (a: number): number; (a?: number): number; }

                    (a: number): number;
>a : number

                    (a?: number): number;
>a : number

                }): number[];
                (x: {
>x : { (a: boolean): boolean; (a?: boolean): boolean; }

                    (a: boolean): boolean;
>a : boolean

                    (a?: boolean): boolean;
>a : boolean

                }): boolean[];
            };
            a17: {
>a17 : { (x: { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[]; }

                (x: {
>x : { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }

                    <T extends Derived>(a: T): T;
>T : T
>Derived : Derived
>a : T
>T : T
>T : T

                    <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

                }): any[];
                (x: {
>x : { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }

                    <T extends Derived2>(a: T): T;
>T : T
>Derived2 : Derived2
>a : T
>T : T
>T : T

                    <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

                }): any[];
            };
        }

        interface I extends A {
>I : I
>A : A

            a2: <T, U>(x: T) => U[]; // error, contextual signature instantiation doesn't relate return types so U is {}, not a subtype of string[]
>a2 : <T, U>(x: T) => U[]
>T : T
>U : U
>x : T
>T : T
>U : U
        }

        interface I2<T, U> extends A {
>I2 : I2<T, U>
>T : T
>U : U
>A : A

            a2: (x: T) => U[]; // error, no contextual signature instantiation since I2.a2 is not generic
>a2 : (x: T) => U[]
>x : T
>T : T
>U : U
        }

        interface I3 extends A {
>I3 : I3
>A : A

            // valid, no inferences for V so it defaults to Derived2
            a7: <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
>a7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>T : T
>Base : Base
>U : U
>Derived : Derived
>V : V
>Derived2 : Derived2
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>r : T
>T : T
>V : V
        }

        interface I4 extends A {
>I4 : I4
>A : A

            a8: <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; // error, type mismatch
>a8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: { foo: number; }) => U
>arg2 : { foo: number; }
>foo : number
>U : U
>r : T
>T : T
>U : U
        }

        interface I4B extends A {
>I4B : I4B
>A : A

            a10: <T extends Derived>(...x: T[]) => T; // valid, parameter covariance works even after contextual signature instantiation
>a10 : <T extends Derived>(...x: T[]) => T
>T : T
>Derived : Derived
>x : T[]
>T : T
>T : T
        }

        interface I4C extends A {
>I4C : I4C
>A : A

            a11: <T extends Derived>(x: T, y: T) => T; // valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
>a11 : <T extends Derived>(x: T, y: T) => T
>T : T
>Derived : Derived
>x : T
>T : T
>y : T
>T : T
>T : T
        }

        interface I4E extends A {
>I4E : I4E
>A : A

            a12: <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; // valid, no inferences for T, defaults to Array<Derived2>
>a12 : <T extends Derived2[]>(x: Base[], y: Base[]) => T
>T : T
>Array : T[]
>Derived2 : Derived2
>x : Base[]
>Array : T[]
>Base : Base
>y : Base[]
>Array : T[]
>Base : Base
>T : T
        }

        interface I6 extends A {
>I6 : I6
>A : A

            a15: <T>(x: { a: T; b: T }) => T; // error, T is {} which isn't an acceptable return type
>a15 : <T>(x: { a: T; b: T; }) => T
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T
        }

        interface I7 extends A {
>I7 : I7
>A : A

            a15: <T extends Base>(x: { a: T; b: T }) => number; // error, T defaults to Base, which is not compatible with number or string
>a15 : <T extends Base>(x: { a: T; b: T; }) => number
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
        }

        interface I8 extends A {
>I8 : I8
>A : A

            // ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
            a16: <T>(x: (a: T) => T) => T[];
>a16 : <T>(x: (a: T) => T) => T[]
>T : T
>x : (a: T) => T
>a : T
>T : T
>T : T
>T : T
        }

        interface I9 extends A {
>I9 : I9
>A : A

            a17: <T>(x: (a: T) => T) => any[]; // valid, target is more constrained than source, so it is safe in the traditional constraint-contravariant fashion
>a17 : <T>(x: (a: T) => T) => any[]
>T : T
>x : (a: T) => T
>a : T
>T : T
>T : T
        }
    }

    module WithGenericSignaturesInBaseType {
>WithGenericSignaturesInBaseType : any

        // base type has generic call signature
        interface B {
>B : B

            a2: <T>(x: T) => T[];
>a2 : <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T
        }

        interface I6 extends B {
>I6 : I6
>B : B

            a2: <T>(x: T) => string[]; // error
>a2 : <T>(x: T) => string[]
>T : T
>x : T
>T : T
        }

        // base type has generic call signature
        interface C {
>C : C

            a2: <T>(x: T) => string[];
>a2 : <T>(x: T) => string[]
>T : T
>x : T
>T : T
        }

        interface I7 extends C {
>I7 : I7
>C : C

            a2: <T>(x: T) => T[]; // error
>a2 : <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T
        }
    }
}
