=== tests/cases/compiler/noErrorTruncation.ts ===
// @noErrorTruncation

type SomeLongOptionA = { someLongOptionA: string }
>SomeLongOptionA : Symbol(SomeLongOptionA, Decl(noErrorTruncation.ts, 0, 0))
>someLongOptionA : Symbol(someLongOptionA, Decl(noErrorTruncation.ts, 2, 24))

type SomeLongOptionB = { someLongOptionB: string }
>SomeLongOptionB : Symbol(SomeLongOptionB, Decl(noErrorTruncation.ts, 2, 50))
>someLongOptionB : Symbol(someLongOptionB, Decl(noErrorTruncation.ts, 3, 24))

type SomeLongOptionC = { someLongOptionC: string }
>SomeLongOptionC : Symbol(SomeLongOptionC, Decl(noErrorTruncation.ts, 3, 50))
>someLongOptionC : Symbol(someLongOptionC, Decl(noErrorTruncation.ts, 4, 24))

type SomeLongOptionD = { someLongOptionD: string }
>SomeLongOptionD : Symbol(SomeLongOptionD, Decl(noErrorTruncation.ts, 4, 50))
>someLongOptionD : Symbol(someLongOptionD, Decl(noErrorTruncation.ts, 5, 24))

type SomeLongOptionE = { someLongOptionE: string }
>SomeLongOptionE : Symbol(SomeLongOptionE, Decl(noErrorTruncation.ts, 5, 50))
>someLongOptionE : Symbol(someLongOptionE, Decl(noErrorTruncation.ts, 6, 24))

type SomeLongOptionF = { someLongOptionF: string }
>SomeLongOptionF : Symbol(SomeLongOptionF, Decl(noErrorTruncation.ts, 6, 50))
>someLongOptionF : Symbol(someLongOptionF, Decl(noErrorTruncation.ts, 7, 24))

const x: SomeLongOptionA
>x : Symbol(x, Decl(noErrorTruncation.ts, 9, 5))
>SomeLongOptionA : Symbol(SomeLongOptionA, Decl(noErrorTruncation.ts, 0, 0))

       | SomeLongOptionB
>SomeLongOptionB : Symbol(SomeLongOptionB, Decl(noErrorTruncation.ts, 2, 50))

       | SomeLongOptionC
>SomeLongOptionC : Symbol(SomeLongOptionC, Decl(noErrorTruncation.ts, 3, 50))

       | SomeLongOptionD
>SomeLongOptionD : Symbol(SomeLongOptionD, Decl(noErrorTruncation.ts, 4, 50))

       | SomeLongOptionE
>SomeLongOptionE : Symbol(SomeLongOptionE, Decl(noErrorTruncation.ts, 5, 50))

       | SomeLongOptionF = 42;
>SomeLongOptionF : Symbol(SomeLongOptionF, Decl(noErrorTruncation.ts, 6, 50))

