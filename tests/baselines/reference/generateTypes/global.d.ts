export class Array {
    static from(p0: any): any;
    static isArray(p0: any): any;
    static of(): any;
    concat(p0: any): any;
    copyWithin(p0: any, p1: any): any;
    entries(): any;
    every(p0: any): any;
    fill(p0: any): any;
    filter(p0: any): any;
    find(p0: any): any;
    findIndex(p0: any): any;
    forEach(p0: any): any;
    includes(p0: any): any;
    indexOf(p0: any): any;
    join(p0: any): any;
    keys(): any;
    lastIndexOf(p0: any): any;
    map(p0: any): any;
    pop(): any;
    push(p0: any): any;
    reduce(p0: any): any;
    reduceRight(p0: any): any;
    reverse(): any;
    shift(): any;
    slice(p0: any, p1: any): any;
    some(p0: any): any;
    sort(p0: any): any;
    splice(p0: any, p1: any): any;
    toLocaleString(): any;
    unshift(p0: any): any;
}
export class Boolean {
    constructor(p0: any);
    valueOf(): any;
}
export class Date {
    static UTC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): any;
    static now(): any;
    static parse(p0: any): any;
    constructor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any);
    getDate(): any;
    getDay(): any;
    getFullYear(): any;
    getHours(): any;
    getMilliseconds(): any;
    getMinutes(): any;
    getMonth(): any;
    getSeconds(): any;
    getTime(): any;
    getTimezoneOffset(): any;
    getUTCDate(): any;
    getUTCDay(): any;
    getUTCFullYear(): any;
    getUTCHours(): any;
    getUTCMilliseconds(): any;
    getUTCMinutes(): any;
    getUTCMonth(): any;
    getUTCSeconds(): any;
    getYear(): any;
    setDate(p0: any): any;
    setFullYear(p0: any, p1: any, p2: any): any;
    setHours(p0: any, p1: any, p2: any, p3: any): any;
    setMilliseconds(p0: any): any;
    setMinutes(p0: any, p1: any, p2: any): any;
    setMonth(p0: any, p1: any): any;
    setSeconds(p0: any, p1: any): any;
    setTime(p0: any): any;
    setUTCDate(p0: any): any;
    setUTCFullYear(p0: any, p1: any, p2: any): any;
    setUTCHours(p0: any, p1: any, p2: any, p3: any): any;
    setUTCMilliseconds(p0: any): any;
    setUTCMinutes(p0: any, p1: any, p2: any): any;
    setUTCMonth(p0: any, p1: any): any;
    setUTCSeconds(p0: any, p1: any): any;
    setYear(p0: any): any;
    toDateString(): any;
    toGMTString(): any;
    toISOString(): any;
    toJSON(p0: any): any;
    toLocaleDateString(): any;
    toLocaleString(): any;
    toLocaleTimeString(): any;
    toTimeString(): any;
    toUTCString(): any;
    valueOf(): any;
}
export namespace Math {
    const E: number;
    const LN10: number;
    const LN2: number;
    const LOG10E: number;
    const LOG2E: number;
    const PI: number;
    const SQRT1_2: number;
    const SQRT2: number;
    function abs(p0: any): any;
    function acos(p0: any): any;
    function acosh(p0: any): any;
    function asin(p0: any): any;
    function asinh(p0: any): any;
    function atan(p0: any): any;
    function atan2(p0: any, p1: any): any;
    function atanh(p0: any): any;
    function cbrt(p0: any): any;
    function ceil(p0: any): any;
    function clz32(p0: any): any;
    function cos(p0: any): any;
    function cosh(p0: any): any;
    function exp(p0: any): any;
    function expm1(p0: any): any;
    function floor(p0: any): any;
    function fround(p0: any): any;
    function hypot(p0: any, p1: any): any;
    function imul(p0: any, p1: any): any;
    function log(p0: any): any;
    function log10(p0: any): any;
    function log1p(p0: any): any;
    function log2(p0: any): any;
    function max(p0: any, p1: any): any;
    function min(p0: any, p1: any): any;
    function pow(p0: any, p1: any): any;
    function random(): any;
    function round(p0: any): any;
    function sign(p0: any): any;
    function sin(p0: any): any;
    function sinh(p0: any): any;
    function sqrt(p0: any): any;
    function tan(p0: any): any;
    function tanh(p0: any): any;
    function trunc(p0: any): any;
}
export class Number {
    static EPSILON: number;
    static MAX_SAFE_INTEGER: number;
    static MAX_VALUE: number;
    static MIN_SAFE_INTEGER: number;
    static MIN_VALUE: number;
    static NEGATIVE_INFINITY: number;
    static NaN: number;
    static POSITIVE_INFINITY: number;
    static isFinite(p0: any): any;
    static isInteger(p0: any): any;
    static isNaN(p0: any): any;
    static isSafeInteger(p0: any): any;
    static parseFloat(p0: any): any;
    static parseInt(p0: any, p1: any): any;
    constructor(p0: any);
    toExponential(p0: any): any;
    toFixed(p0: any): any;
    toLocaleString(): any;
    toPrecision(p0: any): any;
    toString(p0: any): any;
    valueOf(): any;
}
export class RegExp {
    static $1: any;
    static $2: any;
    static $3: any;
    static $4: any;
    static $5: any;
    static $6: any;
    static $7: any;
    static $8: any;
    static $9: any;
    static $_: any;
    static input: any;
    static lastMatch: any;
    static lastParen: any;
    static leftContext: any;
    static rightContext: any;
    constructor(p0: any, p1: any);
    compile(p0: any, p1: any): any;
    exec(p0: any): any;
    test(p0: any): any;
}
export class String {
    static fromCharCode(p0: any): any;
    static fromCodePoint(p0: any): any;
    static raw(p0: any): any;
    anchor(p0: any): any;
    big(): any;
    blink(): any;
    bold(): any;
    charAt(p0: any): any;
    charCodeAt(p0: any): any;
    codePointAt(p0: any): any;
    concat(p0: any): any;
    endsWith(p0: any): any;
    fixed(): any;
    fontcolor(p0: any): any;
    fontsize(p0: any): any;
    includes(p0: any): any;
    indexOf(p0: any): any;
    italics(): any;
    lastIndexOf(p0: any): any;
    link(p0: any): any;
    localeCompare(p0: any): any;
    match(p0: any): any;
    normalize(): any;
    repeat(p0: any): any;
    replace(p0: any, p1: any): any;
    search(p0: any): any;
    slice(p0: any, p1: any): any;
    small(): any;
    split(p0: any, p1: any): any;
    startsWith(p0: any): any;
    strike(): any;
    sub(): any;
    substr(p0: any, p1: any): any;
    substring(p0: any, p1: any): any;
    sup(): any;
    toLocaleLowerCase(): any;
    toLocaleUpperCase(): any;
    toLowerCase(): any;
    toUpperCase(): any;
    trim(): any;
    trimLeft(): any;
    trimRight(): any;
    valueOf(): any;
}
export class Symbol {
    static hasInstance: symbol;
    static isConcatSpreadable: symbol;
    static iterator: symbol;
    static keyFor(p0: any): any;
    static match: symbol;
    static replace: symbol;
    static search: symbol;
    static species: symbol;
    static split: symbol;
    static toPrimitive: symbol;
    static toStringTag: symbol;
    static unscopables: symbol;
    valueOf(): any;
}