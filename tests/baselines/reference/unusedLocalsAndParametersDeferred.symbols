=== tests/cases/compiler/unusedLocalsAndParametersDeferred.ts ===
export { };

function defered<T>(a: () => T): T {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))
>T : Symbol(T, Decl(unusedLocalsAndParametersDeferred.ts, 2, 17))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 2, 20))
>T : Symbol(T, Decl(unusedLocalsAndParametersDeferred.ts, 2, 17))
>T : Symbol(T, Decl(unusedLocalsAndParametersDeferred.ts, 2, 17))

    return a();
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 2, 20))
}

// function declaration paramter
function f(a) {
>f : Symbol(f, Decl(unusedLocalsAndParametersDeferred.ts, 4, 1))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 7, 11))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 7, 11))

    });
}
f(0);
>f : Symbol(f, Decl(unusedLocalsAndParametersDeferred.ts, 4, 1))

// function expression paramter
var fexp = function (a) {
>fexp : Symbol(fexp, Decl(unusedLocalsAndParametersDeferred.ts, 15, 3))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 15, 21))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 15, 21))

    });
};
fexp(1);
>fexp : Symbol(fexp, Decl(unusedLocalsAndParametersDeferred.ts, 15, 3))

// arrow function paramter
var farrow = (a) => {
>farrow : Symbol(farrow, Decl(unusedLocalsAndParametersDeferred.ts, 23, 3))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 23, 14))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 23, 14))

    });
};
farrow(2);
>farrow : Symbol(farrow, Decl(unusedLocalsAndParametersDeferred.ts, 23, 3))

let prop1;
>prop1 : Symbol(prop1, Decl(unusedLocalsAndParametersDeferred.ts, 30, 3))

class C {
>C : Symbol(C, Decl(unusedLocalsAndParametersDeferred.ts, 30, 10))

    // Method declaration paramter
    method(a) {
>method : Symbol(C.method, Decl(unusedLocalsAndParametersDeferred.ts, 32, 9))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 34, 11))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 34, 11))

        });
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : Symbol(C.x, Decl(unusedLocalsAndParametersDeferred.ts, 38, 5))
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 40, 10))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            v;
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 40, 10))

        });
    }
    // in a property initalizer
    p = defered(() => {
>p : Symbol(C.p, Decl(unusedLocalsAndParametersDeferred.ts, 44, 5))
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        prop1;
>prop1 : Symbol(prop1, Decl(unusedLocalsAndParametersDeferred.ts, 30, 3))

    });
}

new C();
>C : Symbol(C, Decl(unusedLocalsAndParametersDeferred.ts, 30, 10))

let prop2;
>prop2 : Symbol(prop2, Decl(unusedLocalsAndParametersDeferred.ts, 53, 3))

var E = class {
>E : Symbol(E, Decl(unusedLocalsAndParametersDeferred.ts, 55, 3))

    // Method declaration paramter
    method(a) {
>method : Symbol(E.method, Decl(unusedLocalsAndParametersDeferred.ts, 55, 15))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 57, 11))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 57, 11))

        });
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : Symbol(E.x, Decl(unusedLocalsAndParametersDeferred.ts, 61, 5))
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 63, 10))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            v;
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 63, 10))

        });
    }
    // in a property initalizer
    p = defered(() => {
>p : Symbol(E.p, Decl(unusedLocalsAndParametersDeferred.ts, 67, 5))
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        prop2;
>prop2 : Symbol(prop2, Decl(unusedLocalsAndParametersDeferred.ts, 53, 3))

    });
}

new E();
>E : Symbol(E, Decl(unusedLocalsAndParametersDeferred.ts, 55, 3))


var o = {
>o : Symbol(o, Decl(unusedLocalsAndParametersDeferred.ts, 77, 3))

    // Object literal method declaration paramter
    method(a) {
>method : Symbol(method, Decl(unusedLocalsAndParametersDeferred.ts, 77, 9))
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 79, 11))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 79, 11))

        });
    },
    // Accessor declaration paramter
    set x(v: number) {
>x : Symbol(x, Decl(unusedLocalsAndParametersDeferred.ts, 83, 6))
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 85, 10))

        defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

            v;
>v : Symbol(v, Decl(unusedLocalsAndParametersDeferred.ts, 85, 10))

        });
    },
    // in a property initalizer
    p: defered(() => {
>p : Symbol(p, Decl(unusedLocalsAndParametersDeferred.ts, 89, 6))
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        prop1;
>prop1 : Symbol(prop1, Decl(unusedLocalsAndParametersDeferred.ts, 30, 3))

    })
};

o;
>o : Symbol(o, Decl(unusedLocalsAndParametersDeferred.ts, 77, 3))

// in a for..in statment
for (let i in o) {
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 99, 8))
>o : Symbol(o, Decl(unusedLocalsAndParametersDeferred.ts, 77, 3))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        i;
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 99, 8))

    });
}

// in a for..of statment
for (let i of [1,2,3]) {
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 106, 8))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        i;
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 106, 8))

    });
}

// in a for. statment
for (let i = 0; i < 10; i++) {
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 113, 8))
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 113, 8))
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 113, 8))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        i;
>i : Symbol(i, Decl(unusedLocalsAndParametersDeferred.ts, 113, 8))

    });
}

// in a block

const condition = false;
>condition : Symbol(condition, Decl(unusedLocalsAndParametersDeferred.ts, 121, 5))

if (condition) {
>condition : Symbol(condition, Decl(unusedLocalsAndParametersDeferred.ts, 121, 5))

    const c = 0;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 123, 9))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        c;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 123, 9))

    });
}

// in try/catch/finally
try {
    const a = 0;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 131, 9))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        a;
>a : Symbol(a, Decl(unusedLocalsAndParametersDeferred.ts, 131, 9))

    });
}
catch (e) {
>e : Symbol(e, Decl(unusedLocalsAndParametersDeferred.ts, 136, 7))

    const c = 1;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 137, 9))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        c;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 137, 9))

    });
}
finally {
    const c = 0;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 143, 9))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        c;
>c : Symbol(c, Decl(unusedLocalsAndParametersDeferred.ts, 143, 9))

    });
}


// in a namespace
namespace N {
>N : Symbol(N, Decl(unusedLocalsAndParametersDeferred.ts, 147, 1))

    var x;
>x : Symbol(x, Decl(unusedLocalsAndParametersDeferred.ts, 152, 7))

    defered(() => {
>defered : Symbol(defered, Decl(unusedLocalsAndParametersDeferred.ts, 0, 11))

        x;
>x : Symbol(x, Decl(unusedLocalsAndParametersDeferred.ts, 152, 7))

    });
}
N;
>N : Symbol(N, Decl(unusedLocalsAndParametersDeferred.ts, 147, 1))
    
