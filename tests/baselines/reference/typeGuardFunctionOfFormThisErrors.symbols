=== tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThisErrors.ts ===
class RoyalGuard {
>RoyalGuard : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))

    isLeader(): this is LeadGuard {
>isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>LeadGuard : Symbol(LeadGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 7, 1))

        return this instanceof LeadGuard;
>this : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))
>LeadGuard : Symbol(LeadGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 7, 1))
    }
    isFollower(): this is FollowerGuard {
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>FollowerGuard : Symbol(FollowerGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 11, 1))

        return this instanceof FollowerGuard;
>this : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))
>FollowerGuard : Symbol(FollowerGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 11, 1))
    }
}

class LeadGuard extends RoyalGuard {
>LeadGuard : Symbol(LeadGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 7, 1))
>RoyalGuard : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))

    lead(): void {};
>lead : Symbol(LeadGuard.lead, Decl(typeGuardFunctionOfFormThisErrors.ts, 9, 36))
}

class FollowerGuard extends RoyalGuard {
>FollowerGuard : Symbol(FollowerGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 11, 1))
>RoyalGuard : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))

    follow(): void {};
>follow : Symbol(FollowerGuard.follow, Decl(typeGuardFunctionOfFormThisErrors.ts, 13, 40))
}

interface GuardInterface extends RoyalGuard {}
>GuardInterface : Symbol(GuardInterface, Decl(typeGuardFunctionOfFormThisErrors.ts, 15, 1))
>RoyalGuard : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))

let a: RoyalGuard = new FollowerGuard();
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>RoyalGuard : Symbol(RoyalGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 0))
>FollowerGuard : Symbol(FollowerGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 11, 1))

let b: GuardInterface = new LeadGuard();
>b : Symbol(b, Decl(typeGuardFunctionOfFormThisErrors.ts, 19, 3))
>GuardInterface : Symbol(GuardInterface, Decl(typeGuardFunctionOfFormThisErrors.ts, 15, 1))
>LeadGuard : Symbol(LeadGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 7, 1))

// Mismatched guards shouldn't be assignable
b.isFollower = b.isLeader;
>b.isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>b : Symbol(b, Decl(typeGuardFunctionOfFormThisErrors.ts, 19, 3))
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>b.isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>b : Symbol(b, Decl(typeGuardFunctionOfFormThisErrors.ts, 19, 3))
>isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))

b.isLeader = b.isFollower;
>b.isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>b : Symbol(b, Decl(typeGuardFunctionOfFormThisErrors.ts, 19, 3))
>isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>b.isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>b : Symbol(b, Decl(typeGuardFunctionOfFormThisErrors.ts, 19, 3))
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))

a.isFollower = a.isLeader;
>a.isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>a.isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))

a.isLeader = a.isFollower;
>a.isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>isLeader : Symbol(RoyalGuard.isLeader, Decl(typeGuardFunctionOfFormThisErrors.ts, 0, 18))
>a.isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))

function invalidGuard(c: any): this is number {
>invalidGuard : Symbol(invalidGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 26, 26))
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 28, 22))

    return false;
}

let c: number | number[];
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))

if (invalidGuard(c)) {
>invalidGuard : Symbol(invalidGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 26, 26))
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))

    c;
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))
}
else {
    c;
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))
}

let holder = {invalidGuard};
>holder : Symbol(holder, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 3))
>invalidGuard : Symbol(invalidGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 14))

if (holder.invalidGuard(c)) {
>holder.invalidGuard : Symbol(invalidGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 14))
>holder : Symbol(holder, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 3))
>invalidGuard : Symbol(invalidGuard, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 14))
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))

    c;
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))

    holder;
>holder : Symbol(holder, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 3))
}
else {
    c;
>c : Symbol(c, Decl(typeGuardFunctionOfFormThisErrors.ts, 32, 3))

    holder;
>holder : Symbol(holder, Decl(typeGuardFunctionOfFormThisErrors.ts, 40, 3))
}

let detached = a.isFollower;
>detached : Symbol(detached, Decl(typeGuardFunctionOfFormThisErrors.ts, 51, 3))
>a.isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
>isFollower : Symbol(RoyalGuard.isFollower, Decl(typeGuardFunctionOfFormThisErrors.ts, 3, 5))

if (detached()) {
>detached : Symbol(detached, Decl(typeGuardFunctionOfFormThisErrors.ts, 51, 3))

    a.follow();
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
}
else {
    a.lead();
>a : Symbol(a, Decl(typeGuardFunctionOfFormThisErrors.ts, 18, 3))
}
