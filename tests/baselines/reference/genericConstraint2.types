=== tests/cases/compiler/genericConstraint2.ts ===
interface Comparable<T> {
>Comparable : Comparable<T>
>T : T

    comparer(other: T): number;
>comparer : (other: T) => number
>other : T
>T : T
}

function compare<T extends Comparable<T>>(x: T, y: T): number {
>compare : <T extends Comparable<T>>(x: T, y: T) => number
>T : T
>Comparable : Comparable<T>
>T : T
>x : T
>T : T
>y : T
>T : T

    if (x == null) return y == null ? 0 : -1;
>x == null : boolean
>x : T
>null : null
>y == null ? 0 : -1 : 0 | -1
>y == null : boolean
>y : T
>null : null
>0 : 0
>-1 : -1
>1 : 1

    if (y == null) return 1;
>y == null : boolean
>y : T
>null : null
>1 : 1

    return x.comparer(y);
>x.comparer(y) : number
>x.comparer : (other: T) => number
>x : T
>comparer : (other: T) => number
>y : T
}

class ComparableString implements Comparable<string>{
>ComparableString : ComparableString
>Comparable : Comparable<T>

    constructor(public currentValue: string) { }
>currentValue : string

    localeCompare(other) {
>localeCompare : (other: any) => number
>other : any

        return 0;
>0 : 0
    }
}

var a = new ComparableString("a");
>a : ComparableString
>new ComparableString("a") : ComparableString
>ComparableString : typeof ComparableString
>"a" : "a"

var b = new ComparableString("b");
>b : ComparableString
>new ComparableString("b") : ComparableString
>ComparableString : typeof ComparableString
>"b" : "b"

var c = compare<ComparableString>(a, b);
>c : any
>compare<ComparableString>(a, b) : any
>compare : <T extends Comparable<T>>(x: T, y: T) => number
>ComparableString : ComparableString
>a : ComparableString
>b : ComparableString

