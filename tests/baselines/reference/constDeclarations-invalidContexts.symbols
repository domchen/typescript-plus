=== tests/cases/compiler/constDeclarations-invalidContexts.ts ===
// Errors, const must be defined inside a block
if (true) 
    const c1 = 0;
>c1 : Symbol(c1, Decl(constDeclarations-invalidContexts.ts, 2, 9))

else 
    const c2 = 0;
>c2 : Symbol(c2, Decl(constDeclarations-invalidContexts.ts, 4, 9))

while (true) 
    const c3 = 0;
>c3 : Symbol(c3, Decl(constDeclarations-invalidContexts.ts, 7, 9))

do 
    const c4 = 0;
>c4 : Symbol(c4, Decl(constDeclarations-invalidContexts.ts, 10, 9))

while (true);

var obj;
>obj : Symbol(obj, Decl(constDeclarations-invalidContexts.ts, 13, 3))

with (obj) 
>obj : Symbol(obj, Decl(constDeclarations-invalidContexts.ts, 13, 3))

    const c5 = 0;  // No  Error will be reported here since we turn off all type checking

for (var i = 0; i < 10; i++)
>i : Symbol(i, Decl(constDeclarations-invalidContexts.ts, 17, 8))
>i : Symbol(i, Decl(constDeclarations-invalidContexts.ts, 17, 8))
>i : Symbol(i, Decl(constDeclarations-invalidContexts.ts, 17, 8))

    const c6 = 0;
>c6 : Symbol(c6, Decl(constDeclarations-invalidContexts.ts, 18, 9))

for (var i2 in {}) 
>i2 : Symbol(i2, Decl(constDeclarations-invalidContexts.ts, 20, 8))

    const c7 = 0;
>c7 : Symbol(c7, Decl(constDeclarations-invalidContexts.ts, 21, 9))

if (true) 
    label: const c8 = 0;
>c8 : Symbol(c8, Decl(constDeclarations-invalidContexts.ts, 24, 16))

while (false)
    label2: label3: label4: const c9 = 0;
>c9 : Symbol(c9, Decl(constDeclarations-invalidContexts.ts, 27, 33))




