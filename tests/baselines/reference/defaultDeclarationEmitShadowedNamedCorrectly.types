=== tests/cases/compiler/this.ts ===
import * as me from "./this";
>me : typeof me

export interface Things<P, T> {
>Things : me.Things<P, T>
>P : P
>T : T

    p: P;
>p : P
>P : P

    t: T;
>t : T
>T : T
}
export function make<P, CTor>(x: { new (): CTor & {props: P} }): Things<P, CTor> {
>make : <P, CTor>(x: new () => CTor & { props: P; }) => me.Things<P, CTor>
>P : P
>CTor : CTor
>x : new () => CTor & { props: P; }
>CTor : CTor
>props : P
>P : P
>Things : me.Things<P, T>
>P : P
>CTor : CTor

    return null as any;
>null as any : any
>null : null
}

export interface Props {
>Props : me.Props
}

export default class MyComponent {
>MyComponent : me.default

    props: Props;
>props : me.Props
>Props : me.Props
}
export namespace Something {
>Something : typeof me.Something

    let MyComponent = 2; // Shadow declaration, so symbol is only usable via the self-import
>MyComponent : number
>2 : 2

    export const create = make(me.default);
>create : me.Things<me.Props, me.default>
>make(me.default) : me.Things<me.Props, me.default>
>make : <P, CTor>(x: new () => CTor & { props: P; }) => me.Things<P, CTor>
>me.default : typeof me.default
>me : typeof me
>default : typeof me.default
}
