=== tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/accessorsAreNotContextuallyTyped.ts ===
// accessors are not contextually typed

class C {
>C : Symbol(C, Decl(accessorsAreNotContextuallyTyped.ts, 0, 0))

    set x(v: (a: string) => string) {
>x : Symbol(C.x, Decl(accessorsAreNotContextuallyTyped.ts, 2, 9), Decl(accessorsAreNotContextuallyTyped.ts, 4, 5))
>v : Symbol(v, Decl(accessorsAreNotContextuallyTyped.ts, 3, 10))
>a : Symbol(a, Decl(accessorsAreNotContextuallyTyped.ts, 3, 14))
    }

    get x() {
>x : Symbol(C.x, Decl(accessorsAreNotContextuallyTyped.ts, 2, 9), Decl(accessorsAreNotContextuallyTyped.ts, 4, 5))

        return (x: string) => "";
>x : Symbol(x, Decl(accessorsAreNotContextuallyTyped.ts, 7, 16))
    }
}

var c: C;
>c : Symbol(c, Decl(accessorsAreNotContextuallyTyped.ts, 11, 3))
>C : Symbol(C, Decl(accessorsAreNotContextuallyTyped.ts, 0, 0))

var r = c.x(''); // string
>r : Symbol(r, Decl(accessorsAreNotContextuallyTyped.ts, 12, 3))
>c.x : Symbol(C.x, Decl(accessorsAreNotContextuallyTyped.ts, 2, 9), Decl(accessorsAreNotContextuallyTyped.ts, 4, 5))
>c : Symbol(c, Decl(accessorsAreNotContextuallyTyped.ts, 11, 3))
>x : Symbol(C.x, Decl(accessorsAreNotContextuallyTyped.ts, 2, 9), Decl(accessorsAreNotContextuallyTyped.ts, 4, 5))

