=== tests/cases/conformance/classes/members/accessibility/privateInstanceMemberAccessibility.ts ===
class Base {
>Base : Symbol(Base, Decl(privateInstanceMemberAccessibility.ts, 0, 0))

    private foo: string;
>foo : Symbol(Base.foo, Decl(privateInstanceMemberAccessibility.ts, 0, 12))
}

class Derived extends Base {
>Derived : Symbol(Derived, Decl(privateInstanceMemberAccessibility.ts, 2, 1))
>Base : Symbol(Base, Decl(privateInstanceMemberAccessibility.ts, 0, 0))

    x = super.foo; // error
>x : Symbol(Derived.x, Decl(privateInstanceMemberAccessibility.ts, 4, 28))
>super.foo : Symbol(Base.foo, Decl(privateInstanceMemberAccessibility.ts, 0, 12))
>super : Symbol(Base, Decl(privateInstanceMemberAccessibility.ts, 0, 0))
>foo : Symbol(Base.foo, Decl(privateInstanceMemberAccessibility.ts, 0, 12))

    y() {
>y : Symbol(Derived.y, Decl(privateInstanceMemberAccessibility.ts, 5, 18))

        return super.foo; // error
>super.foo : Symbol(Base.foo, Decl(privateInstanceMemberAccessibility.ts, 0, 12))
>super : Symbol(Base, Decl(privateInstanceMemberAccessibility.ts, 0, 0))
>foo : Symbol(Base.foo, Decl(privateInstanceMemberAccessibility.ts, 0, 12))
    }
    z: typeof super.foo; // error
>z : Symbol(Derived.z, Decl(privateInstanceMemberAccessibility.ts, 8, 5))

    a: this.foo; // error
>a : Symbol(Derived.a, Decl(privateInstanceMemberAccessibility.ts, 9, 24))
>foo : Symbol(Derived.foo, Decl(privateInstanceMemberAccessibility.ts, 11, 12))
}
