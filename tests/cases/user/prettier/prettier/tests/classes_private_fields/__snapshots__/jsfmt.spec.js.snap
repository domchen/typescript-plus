// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`private_fields.js 1`] = `
class A { #x; #y; }
class B { #x = 0; #y = 1; }

class C {
  static #x;
  static #y = 1;
}

class D {
  #x
  #y
}

class Point {
  #x = 1;
  #y = 2;

  constructor(x = 0, y = 0) {
    this.#x = +x;
    this.#y = +y;
  }

  get x() { return this.#x }
  set x(value) { this.#x = +value }

  get y() { return this.#y }
  set y(value) { this.#y = +value }

  equals(p) { return this.#x === p.#x && this.#y === p.#y }

  toString() { return \`Point<\${ this.#x },\${ this.#y }>\` }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class A {
  #x;
  #y;
}
class B {
  #x = 0;
  #y = 1;
}

class C {
  static #x;
  static #y = 1;
}

class D {
  #x;
  #y;
}

class Point {
  #x = 1;
  #y = 2;

  constructor(x = 0, y = 0) {
    this.#x = +x;
    this.#y = +y;
  }

  get x() {
    return this.#x;
  }
  set x(value) {
    this.#x = +value;
  }

  get y() {
    return this.#y;
  }
  set y(value) {
    this.#y = +value;
  }

  equals(p) {
    return this.#x === p.#x && this.#y === p.#y;
  }

  toString() {
    return \`Point<\${this.#x},\${this.#y}>\`;
  }
}

`;

exports[`private_fields.js 2`] = `
class A { #x; #y; }
class B { #x = 0; #y = 1; }

class C {
  static #x;
  static #y = 1;
}

class D {
  #x
  #y
}

class Point {
  #x = 1;
  #y = 2;

  constructor(x = 0, y = 0) {
    this.#x = +x;
    this.#y = +y;
  }

  get x() { return this.#x }
  set x(value) { this.#x = +value }

  get y() { return this.#y }
  set y(value) { this.#y = +value }

  equals(p) { return this.#x === p.#x && this.#y === p.#y }

  toString() { return \`Point<\${ this.#x },\${ this.#y }>\` }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class A {
  #x
  #y
}
class B {
  #x = 0
  #y = 1
}

class C {
  static #x
  static #y = 1
}

class D {
  #x
  #y
}

class Point {
  #x = 1
  #y = 2

  constructor(x = 0, y = 0) {
    this.#x = +x
    this.#y = +y
  }

  get x() {
    return this.#x
  }
  set x(value) {
    this.#x = +value
  }

  get y() {
    return this.#y
  }
  set y(value) {
    this.#y = +value
  }

  equals(p) {
    return this.#x === p.#x && this.#y === p.#y
  }

  toString() {
    return \`Point<\${this.#x},\${this.#y}>\`
  }
}

`;

exports[`with_comments.js 1`] = `
class A {
  #foobar =
    // comment to break
    1 +
    // comment to break again
    2;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class A {
  #foobar =
    // comment to break
    1 +
    // comment to break again
    2;
}

`;

exports[`with_comments.js 2`] = `
class A {
  #foobar =
    // comment to break
    1 +
    // comment to break again
    2;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class A {
  #foobar =
    // comment to break
    1 +
    // comment to break again
    2
}

`;
