=== tests/cases/compiler/file1.ts ===
import c1 = require('./c'); // resolves to c.ts 
>c1 : Symbol(c1, Decl(file1.ts, 0, 0))

let x2 = c1.a;
>x2 : Symbol(x2, Decl(file1.ts, 1, 3))
>c1.a : Symbol(a, Decl(c.ts, 0, 10))
>c1 : Symbol(c1, Decl(file1.ts, 0, 0))
>a : Symbol(a, Decl(c.ts, 0, 10))

import c2 = require('./c.json'); // resolves to c.json
>c2 : Symbol(c2, Decl(file1.ts, 1, 14))

if (x2) {
>x2 : Symbol(x2, Decl(file1.ts, 1, 3))

    let b = c2.b;
>b : Symbol(b, Decl(file1.ts, 4, 7))
>c2.b : Symbol("b", Decl(c.json, 1, 14))
>c2 : Symbol(c2, Decl(file1.ts, 1, 14))
>b : Symbol("b", Decl(c.json, 1, 14))

    let x = (c1.b === b);
>x : Symbol(x, Decl(file1.ts, 5, 7))
>c1.b : Symbol(b, Decl(c.ts, 0, 19))
>c1 : Symbol(c1, Decl(file1.ts, 0, 0))
>b : Symbol(b, Decl(c.ts, 0, 19))
>b : Symbol(b, Decl(file1.ts, 4, 7))
}

=== tests/cases/compiler/c.json ===
{
    "a": true,
>"a" : Symbol("a", Decl(c.json, 0, 1))

    "b": "hello"
>"b" : Symbol("b", Decl(c.json, 1, 14))
}

=== tests/cases/compiler/c.ts ===
export = { a: true, b: "hello" };
>a : Symbol(a, Decl(c.ts, 0, 10))
>b : Symbol(b, Decl(c.ts, 0, 19))

