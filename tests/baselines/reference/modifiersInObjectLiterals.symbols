=== tests/cases/compiler/modifiersInObjectLiterals.ts ===
let data = {
>data : Symbol(data, Decl(modifiersInObjectLiterals.ts, 0, 3))

	public foo: 'hey',
>foo : Symbol(foo, Decl(modifiersInObjectLiterals.ts, 0, 12))

	private bar: 'nay',
>bar : Symbol(bar, Decl(modifiersInObjectLiterals.ts, 1, 19))

	protected baz: 'oh my',
>baz : Symbol(baz, Decl(modifiersInObjectLiterals.ts, 2, 20))

	abstract noWay: 'yes'	
>noWay : Symbol(noWay, Decl(modifiersInObjectLiterals.ts, 3, 24))

};

data.foo + data.bar + data.baz + data.noWay
>data.foo : Symbol(foo, Decl(modifiersInObjectLiterals.ts, 0, 12))
>data : Symbol(data, Decl(modifiersInObjectLiterals.ts, 0, 3))
>foo : Symbol(foo, Decl(modifiersInObjectLiterals.ts, 0, 12))
>data.bar : Symbol(bar, Decl(modifiersInObjectLiterals.ts, 1, 19))
>data : Symbol(data, Decl(modifiersInObjectLiterals.ts, 0, 3))
>bar : Symbol(bar, Decl(modifiersInObjectLiterals.ts, 1, 19))
>data.baz : Symbol(baz, Decl(modifiersInObjectLiterals.ts, 2, 20))
>data : Symbol(data, Decl(modifiersInObjectLiterals.ts, 0, 3))
>baz : Symbol(baz, Decl(modifiersInObjectLiterals.ts, 2, 20))
>data.noWay : Symbol(noWay, Decl(modifiersInObjectLiterals.ts, 3, 24))
>data : Symbol(data, Decl(modifiersInObjectLiterals.ts, 0, 3))
>noWay : Symbol(noWay, Decl(modifiersInObjectLiterals.ts, 3, 24))

