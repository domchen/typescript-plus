=== tests/cases/compiler/genericTypeAssertions4.ts ===
class A {
>A : Symbol(A, Decl(genericTypeAssertions4.ts, 0, 0))

    foo() { return ""; }
>foo : Symbol(A.foo, Decl(genericTypeAssertions4.ts, 0, 9))
}

class B extends A {
>B : Symbol(B, Decl(genericTypeAssertions4.ts, 2, 1))
>A : Symbol(A, Decl(genericTypeAssertions4.ts, 0, 0))

    bar() { return 1; }
>bar : Symbol(B.bar, Decl(genericTypeAssertions4.ts, 4, 19))
}

class C extends A {
>C : Symbol(C, Decl(genericTypeAssertions4.ts, 6, 1))
>A : Symbol(A, Decl(genericTypeAssertions4.ts, 0, 0))

    baz() { return 1; }
>baz : Symbol(C.baz, Decl(genericTypeAssertions4.ts, 8, 19))
}

var a: A;
>a : Symbol(a, Decl(genericTypeAssertions4.ts, 12, 3))
>A : Symbol(A, Decl(genericTypeAssertions4.ts, 0, 0))

var b: B;
>b : Symbol(b, Decl(genericTypeAssertions4.ts, 13, 3))
>B : Symbol(B, Decl(genericTypeAssertions4.ts, 2, 1))

var c: C;
>c : Symbol(c, Decl(genericTypeAssertions4.ts, 14, 3))
>C : Symbol(C, Decl(genericTypeAssertions4.ts, 6, 1))

function foo2<T extends A>(x: T) {
>foo2 : Symbol(foo2, Decl(genericTypeAssertions4.ts, 14, 9))
>T : Symbol(T, Decl(genericTypeAssertions4.ts, 16, 14))
>A : Symbol(A, Decl(genericTypeAssertions4.ts, 0, 0))
>x : Symbol(x, Decl(genericTypeAssertions4.ts, 16, 27))
>T : Symbol(T, Decl(genericTypeAssertions4.ts, 16, 14))

    var y = x;
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>x : Symbol(x, Decl(genericTypeAssertions4.ts, 16, 27))

    y = a; // error: cannot convert A to T
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>a : Symbol(a, Decl(genericTypeAssertions4.ts, 12, 3))

    y = b; // error: cannot convert B to T
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>b : Symbol(b, Decl(genericTypeAssertions4.ts, 13, 3))

    y = c; // error: cannot convert C to T
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>c : Symbol(c, Decl(genericTypeAssertions4.ts, 14, 3))

    y = <T>a;
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>T : Symbol(T, Decl(genericTypeAssertions4.ts, 16, 14))
>a : Symbol(a, Decl(genericTypeAssertions4.ts, 12, 3))

    y = <T>b; // error: cannot convert B to T
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>T : Symbol(T, Decl(genericTypeAssertions4.ts, 16, 14))
>b : Symbol(b, Decl(genericTypeAssertions4.ts, 13, 3))

    y = <T>c; // error: cannot convert C to T
>y : Symbol(y, Decl(genericTypeAssertions4.ts, 17, 7))
>T : Symbol(T, Decl(genericTypeAssertions4.ts, 16, 14))
>c : Symbol(c, Decl(genericTypeAssertions4.ts, 14, 3))
}
