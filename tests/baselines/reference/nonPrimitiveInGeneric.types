=== tests/cases/conformance/types/nonPrimitive/nonPrimitiveInGeneric.ts ===
function generic<T>(t: T) {
>generic : <T>(t: T) => void
>T : T
>t : T
>T : T

    var o: object = t; // expect error
>o : object
>t : T
}
var a = {};
>a : {}
>{} : {}

var b = "42";
>b : string
>"42" : "42"

generic<object>({});
>generic<object>({}) : void
>generic : <T>(t: T) => void
>{} : {}

generic<object>(a);
>generic<object>(a) : void
>generic : <T>(t: T) => void
>a : {}

generic<object>(123); // expect error
>generic<object>(123) : any
>generic : <T>(t: T) => void
>123 : 123

generic<object>(b); // expect error
>generic<object>(b) : any
>generic : <T>(t: T) => void
>b : string

function bound<T extends object>(t: T) {
>bound : <T extends object>(t: T) => void
>T : T
>t : T
>T : T

    var o: object = t; // ok
>o : object
>t : T
}

bound({});
>bound({}) : void
>bound : <T extends object>(t: T) => void
>{} : {}

bound(a);
>bound(a) : void
>bound : <T extends object>(t: T) => void
>a : {}

bound(123); // expect error
>bound(123) : any
>bound : <T extends object>(t: T) => void
>123 : 123

bound(b); // expect error
>bound(b) : any
>bound : <T extends object>(t: T) => void
>b : string

function bound2<T extends object>() {}
>bound2 : <T extends object>() => void
>T : T

bound2<{}>();
>bound2<{}>() : void
>bound2 : <T extends object>() => void

bound2<Object>();
>bound2<Object>() : void
>bound2 : <T extends object>() => void
>Object : Object

bound2<number>(); // expect error
>bound2<number>() : any
>bound2 : <T extends object>() => void

bound2<string>(); // expect error
>bound2<string>() : any
>bound2 : <T extends object>() => void

function bound3<T extends {}>(t: T) {
>bound3 : <T extends {}>(t: T) => void
>T : T
>t : T
>T : T

    var o: object = t; // ok
>o : object
>t : T
}

interface Proxy<T extends object> {}
>Proxy : Proxy<T>
>T : T

var x: Proxy<number>; // error
>x : Proxy<number>
>Proxy : Proxy<T>

var y: Proxy<null>; // ok
>y : Proxy<null>
>Proxy : Proxy<T>
>null : null

var z: Proxy<undefined> ; // ok
>z : Proxy<undefined>
>Proxy : Proxy<T>


interface Blah {
>Blah : Blah

    foo: number;
>foo : number
}

var u: Proxy<Blah>; // ok
>u : Proxy<Blah>
>Proxy : Proxy<T>
>Blah : Blah

