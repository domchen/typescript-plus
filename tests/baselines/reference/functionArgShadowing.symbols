=== tests/cases/compiler/functionArgShadowing.ts ===
class A { foo() { } }
>A : Symbol(A, Decl(functionArgShadowing.ts, 0, 0))
>foo : Symbol(A.foo, Decl(functionArgShadowing.ts, 0, 9))

class B { bar() { } }
>B : Symbol(B, Decl(functionArgShadowing.ts, 0, 21))
>bar : Symbol(B.bar, Decl(functionArgShadowing.ts, 1, 9))

function foo(x: A) {
>foo : Symbol(foo, Decl(functionArgShadowing.ts, 1, 21))
>x : Symbol(x, Decl(functionArgShadowing.ts, 2, 13), Decl(functionArgShadowing.ts, 3, 6))
>A : Symbol(A, Decl(functionArgShadowing.ts, 0, 0))

   var x: B = new B();
>x : Symbol(x, Decl(functionArgShadowing.ts, 2, 13), Decl(functionArgShadowing.ts, 3, 6))
>B : Symbol(B, Decl(functionArgShadowing.ts, 0, 21))
>B : Symbol(B, Decl(functionArgShadowing.ts, 0, 21))

     x.bar(); // the property bar does not exist on a value of type A
>x : Symbol(x, Decl(functionArgShadowing.ts, 2, 13), Decl(functionArgShadowing.ts, 3, 6))
}
 
class C {
>C : Symbol(C, Decl(functionArgShadowing.ts, 5, 1))

	constructor(public p: number) {
>p : Symbol(C.p, Decl(functionArgShadowing.ts, 8, 13))

		var p: string;
>p : Symbol(p, Decl(functionArgShadowing.ts, 8, 13), Decl(functionArgShadowing.ts, 9, 5))

		var n: number = p;
>n : Symbol(n, Decl(functionArgShadowing.ts, 11, 5))
>p : Symbol(p, Decl(functionArgShadowing.ts, 8, 13), Decl(functionArgShadowing.ts, 9, 5))
	}
}
