=== tests/cases/conformance/dynamicImport/0.ts ===
export function foo() { return "foo"; }
>foo : Symbol(foo, Decl(0.ts, 0, 0))

=== tests/cases/conformance/dynamicImport/1.ts ===
export function backup() { return "backup"; }
>backup : Symbol(backup, Decl(1.ts, 0, 0))

=== tests/cases/conformance/dynamicImport/2.ts ===
async function compute(promise: Promise<any>) {
>compute : Symbol(compute, Decl(2.ts, 0, 0))
>promise : Symbol(promise, Decl(2.ts, 0, 23))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

    let j = await promise;
>j : Symbol(j, Decl(2.ts, 1, 7))
>promise : Symbol(promise, Decl(2.ts, 0, 23))

    if (!j) {
>j : Symbol(j, Decl(2.ts, 1, 7))

        j = await import("./1");
>j : Symbol(j, Decl(2.ts, 1, 7))
>"./1" : Symbol("tests/cases/conformance/dynamicImport/1", Decl(1.ts, 0, 0))

        return j.backup();
>j : Symbol(j, Decl(2.ts, 1, 7))
    }
    return j.foo();
>j : Symbol(j, Decl(2.ts, 1, 7))
}

compute(import("./0"));
>compute : Symbol(compute, Decl(2.ts, 0, 0))
>"./0" : Symbol("tests/cases/conformance/dynamicImport/0", Decl(0.ts, 0, 0))

