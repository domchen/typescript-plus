=== tests/cases/compiler/couldNotSelectGenericOverload.ts ===
function makeArray<T>(items: T[]): T[] { return items; }
>makeArray : Symbol(makeArray, Decl(couldNotSelectGenericOverload.ts, 0, 0))
>T : Symbol(T, Decl(couldNotSelectGenericOverload.ts, 0, 19))
>items : Symbol(items, Decl(couldNotSelectGenericOverload.ts, 0, 22))
>T : Symbol(T, Decl(couldNotSelectGenericOverload.ts, 0, 19))
>T : Symbol(T, Decl(couldNotSelectGenericOverload.ts, 0, 19))
>items : Symbol(items, Decl(couldNotSelectGenericOverload.ts, 0, 22))

var b = [1, ""];
>b : Symbol(b, Decl(couldNotSelectGenericOverload.ts, 1, 3))

var b1G = makeArray(1, ""); // any, no error
>b1G : Symbol(b1G, Decl(couldNotSelectGenericOverload.ts, 2, 3))
>makeArray : Symbol(makeArray, Decl(couldNotSelectGenericOverload.ts, 0, 0))

var b2G = makeArray(b); // any[]
>b2G : Symbol(b2G, Decl(couldNotSelectGenericOverload.ts, 3, 3))
>makeArray : Symbol(makeArray, Decl(couldNotSelectGenericOverload.ts, 0, 0))
>b : Symbol(b, Decl(couldNotSelectGenericOverload.ts, 1, 3))

function makeArray2(items: any[]): any[] { return items; }
>makeArray2 : Symbol(makeArray2, Decl(couldNotSelectGenericOverload.ts, 3, 23))
>items : Symbol(items, Decl(couldNotSelectGenericOverload.ts, 5, 20))
>items : Symbol(items, Decl(couldNotSelectGenericOverload.ts, 5, 20))

var b3G = makeArray2(1, ""); // error
>b3G : Symbol(b3G, Decl(couldNotSelectGenericOverload.ts, 6, 3))
>makeArray2 : Symbol(makeArray2, Decl(couldNotSelectGenericOverload.ts, 3, 23))

