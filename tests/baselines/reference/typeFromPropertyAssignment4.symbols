=== tests/cases/conformance/salsa/def.js ===
var Outer = {};
>Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))

=== tests/cases/conformance/salsa/a.js ===
Outer.Inner = class {
>Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
>Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
>Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))

    constructor() {
        /** @type {number} */
        this.y = 12
>this.y : Symbol(Inner.y, Decl(a.js, 1, 19))
>this : Symbol(Inner, Decl(a.js, 0, 13))
>y : Symbol(Inner.y, Decl(a.js, 1, 19))
    }
}

/** @type {Outer.Inner} */
var local
>local : Symbol(local, Decl(a.js, 8, 3))

local.y
>local.y : Symbol(Inner.y, Decl(a.js, 1, 19))
>local : Symbol(local, Decl(a.js, 8, 3))
>y : Symbol(Inner.y, Decl(a.js, 1, 19))

var inner = new Outer.Inner()
>inner : Symbol(inner, Decl(a.js, 10, 3))
>Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
>Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
>Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))

inner.y
>inner.y : Symbol(Inner.y, Decl(a.js, 1, 19))
>inner : Symbol(inner, Decl(a.js, 10, 3))
>y : Symbol(Inner.y, Decl(a.js, 1, 19))

=== tests/cases/conformance/salsa/b.js ===
/** @type {Outer.Inner} */
var x
>x : Symbol(x, Decl(b.js, 1, 3))

x.y
>x.y : Symbol(Inner.y, Decl(a.js, 1, 19))
>x : Symbol(x, Decl(b.js, 1, 3))
>y : Symbol(Inner.y, Decl(a.js, 1, 19))

var z = new Outer.Inner()
>z : Symbol(z, Decl(b.js, 3, 3))
>Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
>Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
>Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))

z.y
>z.y : Symbol(Inner.y, Decl(a.js, 1, 19))
>z : Symbol(z, Decl(b.js, 3, 3))
>y : Symbol(Inner.y, Decl(a.js, 1, 19))

