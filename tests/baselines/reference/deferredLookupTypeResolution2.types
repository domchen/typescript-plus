=== tests/cases/compiler/deferredLookupTypeResolution2.ts ===
// Repro from #17456

type StringContains<S extends string, L extends string> = ({ [K in S]: 'true' } & { [key: string]: 'false'})[L];
>StringContains : ({ [K in S]: "true"; } & { [key: string]: "false"; })[L]
>S : S
>L : L
>K : K
>S : S
>key : string
>L : L

type ObjectHasKey<O, L extends string> = StringContains<keyof O, L>;
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]
>O : O
>L : L
>StringContains : ({ [K in S]: "true"; } & { [key: string]: "false"; })[L]
>O : O
>L : L

type A<T> = ObjectHasKey<T, '0'>;
>A : ({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["0"]
>T : T
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]
>T : T

type B = ObjectHasKey<[string, number], '1'>;  // "true"
>B : "true"
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]

type C = ObjectHasKey<[string, number], '2'>;  // "false"
>C : "false"
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]

type D = A<[string]>;  // "true"
>D : "true"
>A : ({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["0"]

// Error, "false" not handled
type E<T> = { true: 'true' }[ObjectHasKey<T, '1'>];
>E : { true: "true"; }[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]
>T : T
>true : "true"
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]
>T : T

type Juxtapose<T> = ({ true: 'otherwise' } & { [k: string]: 'true' })[ObjectHasKey<T, '1'>];
>Juxtapose : ({ true: "otherwise"; } & { [k: string]: "true"; })[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]
>T : T
>true : "otherwise"
>k : string
>ObjectHasKey : ({ [K in keyof O]: "true"; } & { [key: string]: "false"; })[L]
>T : T

// Error, "otherwise" is missing
type DeepError<T> = { true: 'true' }[Juxtapose<T>];
>DeepError : { true: "true"; }[({ true: "otherwise"; } & { [k: string]: "true"; })[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]]
>T : T
>true : "true"
>Juxtapose : ({ true: "otherwise"; } & { [k: string]: "true"; })[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]
>T : T

type DeepOK<T> = { true: 'true', otherwise: 'false' }[Juxtapose<T>];
>DeepOK : { true: "true"; otherwise: "false"; }[({ true: "otherwise"; } & { [k: string]: "true"; })[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]]
>T : T
>true : "true"
>otherwise : "false"
>Juxtapose : ({ true: "otherwise"; } & { [k: string]: "true"; })[({ [K in keyof T]: "true"; } & { [key: string]: "false"; })["1"]]
>T : T

