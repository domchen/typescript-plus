=== tests/cases/compiler/propertiesAndIndexers.ts ===
interface X { }
>X : Symbol(X, Decl(propertiesAndIndexers.ts, 0, 0))

interface Y {
>Y : Symbol(Y, Decl(propertiesAndIndexers.ts, 0, 15))

    n: number;
>n : Symbol(Y.n, Decl(propertiesAndIndexers.ts, 1, 13))
}
interface Z {
>Z : Symbol(Z, Decl(propertiesAndIndexers.ts, 3, 1))

    s: string;
>s : Symbol(Z.s, Decl(propertiesAndIndexers.ts, 4, 13))
}

interface A {
>A : Symbol(A, Decl(propertiesAndIndexers.ts, 6, 1))

    a: Y;
>a : Symbol(A.a, Decl(propertiesAndIndexers.ts, 8, 13))
>Y : Symbol(Y, Decl(propertiesAndIndexers.ts, 0, 15))

    b: X;
>b : Symbol(A.b, Decl(propertiesAndIndexers.ts, 9, 9))
>X : Symbol(X, Decl(propertiesAndIndexers.ts, 0, 0))

    1: Z;
>1 : Symbol(A[1], Decl(propertiesAndIndexers.ts, 10, 9))
>Z : Symbol(Z, Decl(propertiesAndIndexers.ts, 3, 1))
}

interface B extends A {
>B : Symbol(B, Decl(propertiesAndIndexers.ts, 12, 1), Decl(propertiesAndIndexers.ts, 19, 1))
>A : Symbol(A, Decl(propertiesAndIndexers.ts, 6, 1))

    [n: number]: string;
>n : Symbol(n, Decl(propertiesAndIndexers.ts, 15, 5))

    c: boolean;
>c : Symbol(B.c, Decl(propertiesAndIndexers.ts, 15, 24))

    3: boolean;
>3 : Symbol(B[3], Decl(propertiesAndIndexers.ts, 16, 15))

    6(): string;
>6 : Symbol(B[6], Decl(propertiesAndIndexers.ts, 17, 15))
}

interface B {
>B : Symbol(B, Decl(propertiesAndIndexers.ts, 12, 1), Decl(propertiesAndIndexers.ts, 19, 1))

    4: boolean;
>4 : Symbol(B[4], Decl(propertiesAndIndexers.ts, 21, 13))

    5: string;
>5 : Symbol(B[5], Decl(propertiesAndIndexers.ts, 22, 15))
}

interface C extends A {
>C : Symbol(C, Decl(propertiesAndIndexers.ts, 24, 1))
>A : Symbol(A, Decl(propertiesAndIndexers.ts, 6, 1))

    [s: string]: number;
>s : Symbol(s, Decl(propertiesAndIndexers.ts, 27, 5))

    c: boolean;
>c : Symbol(C.c, Decl(propertiesAndIndexers.ts, 27, 24))

    3: boolean;
>3 : Symbol(C[3], Decl(propertiesAndIndexers.ts, 28, 15))
}

interface D extends B, C {
>D : Symbol(D, Decl(propertiesAndIndexers.ts, 30, 1))
>B : Symbol(B, Decl(propertiesAndIndexers.ts, 12, 1), Decl(propertiesAndIndexers.ts, 19, 1))
>C : Symbol(C, Decl(propertiesAndIndexers.ts, 24, 1))

    2: Z;
>2 : Symbol(D[2], Decl(propertiesAndIndexers.ts, 32, 26))
>Z : Symbol(Z, Decl(propertiesAndIndexers.ts, 3, 1))

    Infinity: number;
>Infinity : Symbol(D.Infinity, Decl(propertiesAndIndexers.ts, 33, 9))

    zoo: string;
>zoo : Symbol(D.zoo, Decl(propertiesAndIndexers.ts, 34, 21))
}

class P {
>P : Symbol(P, Decl(propertiesAndIndexers.ts, 36, 1))

    [n: string]: string
>n : Symbol(n, Decl(propertiesAndIndexers.ts, 39, 5))
}

class Q extends P {
>Q : Symbol(Q, Decl(propertiesAndIndexers.ts, 40, 1))
>P : Symbol(P, Decl(propertiesAndIndexers.ts, 36, 1))

    t: number;
>t : Symbol(Q.t, Decl(propertiesAndIndexers.ts, 42, 19))
}

var c: {
>c : Symbol(c, Decl(propertiesAndIndexers.ts, 46, 3))

    [n: number]: string;
>n : Symbol(n, Decl(propertiesAndIndexers.ts, 47, 5))

    c: boolean;
>c : Symbol(c, Decl(propertiesAndIndexers.ts, 47, 24))

    3: boolean;
>3 : Symbol(3, Decl(propertiesAndIndexers.ts, 48, 15))

};
