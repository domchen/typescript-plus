=== tests/cases/compiler/declarationEmitRetainsJsdocyComments.ts ===
/**
 * comment1
 * @param p 
 */
export const foo = (p: string) => {
>foo : Symbol(foo, Decl(declarationEmitRetainsJsdocyComments.ts, 4, 12))
>p : Symbol(p, Decl(declarationEmitRetainsJsdocyComments.ts, 4, 20))

    return {
        /**
         * comment2
         * @param s 
         */
        bar: (s: number) => {},
>bar : Symbol(bar, Decl(declarationEmitRetainsJsdocyComments.ts, 5, 12))
>s : Symbol(s, Decl(declarationEmitRetainsJsdocyComments.ts, 10, 14))

        /**
         * comment3
         * @param s 
         */
        bar2(s: number) {},
>bar2 : Symbol(bar2, Decl(declarationEmitRetainsJsdocyComments.ts, 10, 31))
>s : Symbol(s, Decl(declarationEmitRetainsJsdocyComments.ts, 15, 13))
    }
}

export class Foo {
>Foo : Symbol(Foo, Decl(declarationEmitRetainsJsdocyComments.ts, 17, 1))

    /**
     * comment4
     * @param s  
     */
    bar(s: number) {
>bar : Symbol(Foo.bar, Decl(declarationEmitRetainsJsdocyComments.ts, 19, 18))
>s : Symbol(s, Decl(declarationEmitRetainsJsdocyComments.ts, 24, 8))
    }
}

export let {
    /**
    * comment5
    */
    someMethod
>someMethod : Symbol(someMethod, Decl(declarationEmitRetainsJsdocyComments.ts, 28, 12))

} = null as any;

declare global {
>global : Symbol(global, Decl(declarationEmitRetainsJsdocyComments.ts, 33, 16))

    interface ExtFunc {
>ExtFunc : Symbol(ExtFunc, Decl(declarationEmitRetainsJsdocyComments.ts, 35, 16))

        /**
        * comment6
        */
        someMethod(collection: any[]): boolean;
>someMethod : Symbol(ExtFunc.someMethod, Decl(declarationEmitRetainsJsdocyComments.ts, 36, 23))
>collection : Symbol(collection, Decl(declarationEmitRetainsJsdocyComments.ts, 40, 19))
    }
}

