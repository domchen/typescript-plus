=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithEnumType.ts ===
// ++ operator on enum type

enum ENUM1 { A, B, "" };
>ENUM1 : Symbol(ENUM1, Decl(incrementOperatorWithEnumType.ts, 0, 0))
>A : Symbol(ENUM1.A, Decl(incrementOperatorWithEnumType.ts, 2, 12))
>B : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))
>"" : Symbol(ENUM1[""], Decl(incrementOperatorWithEnumType.ts, 2, 18))

// expression
var ResultIsNumber1 = ++ENUM1["B"];
>ResultIsNumber1 : Symbol(ResultIsNumber1, Decl(incrementOperatorWithEnumType.ts, 5, 3))
>ENUM1 : Symbol(ENUM1, Decl(incrementOperatorWithEnumType.ts, 0, 0))
>"B" : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))

var ResultIsNumber2 = ENUM1.B++;
>ResultIsNumber2 : Symbol(ResultIsNumber2, Decl(incrementOperatorWithEnumType.ts, 6, 3))
>ENUM1.B : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))
>ENUM1 : Symbol(ENUM1, Decl(incrementOperatorWithEnumType.ts, 0, 0))
>B : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))

// miss assignment operator
++ENUM1["B"];
>ENUM1 : Symbol(ENUM1, Decl(incrementOperatorWithEnumType.ts, 0, 0))
>"B" : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))

ENUM1.B++;
>ENUM1.B : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))
>ENUM1 : Symbol(ENUM1, Decl(incrementOperatorWithEnumType.ts, 0, 0))
>B : Symbol(ENUM1.B, Decl(incrementOperatorWithEnumType.ts, 2, 15))

