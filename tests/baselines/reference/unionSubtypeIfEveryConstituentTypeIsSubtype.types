=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/unionSubtypeIfEveryConstituentTypeIsSubtype.ts ===
enum e {
>e : e

    e1,
>e1 : e.e1

    e2
>e2 : e.e2
}

// A union type U is a subtype of a type T if each type in U is a subtype of T
interface I {
>I : I

    [x: string]: any;
>x : string

    foo: string | number; // ok
>foo : string | number

    foo2: e | number; // ok
>foo2 : number
>e : e
}
interface I2 {
>I2 : I2

    [x: string]: number;
>x : string

    // S is union type and each constituent type of S is a subtype of T
    foo: string | number; // error string is not subtype of number
>foo : string | number

    foo2: e | number; // ok e and number both subtype of number
>foo2 : number
>e : e
}

interface I3 {
>I3 : I3

    [x: string]: string;
>x : string

    foo: string | number; // error numer is not subtype of string
>foo : string | number

    foo2: e | number; // error e and number both not subtype of string
>foo2 : number
>e : e
}

// error cases
interface I4 {
>I4 : I4

    [x: string]: boolean;
>x : string

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I5 {
>I5 : I5

    [x: string]: Date;
>x : string
>Date : Date

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I6 {
>I6 : I6

    [x: string]: RegExp;
>x : string
>RegExp : RegExp

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I7 {
>I7 : I7

    [x: string]: { bar: number };
>x : string
>bar : number

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I8 {
>I8 : I8

    [x: string]: number[];
>x : string

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I9 {
>I9 : I9

    [x: string]: I8;
>x : string
>I8 : I8

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}

class A { foo: number; }
>A : A
>foo : number

interface I10 {
>I10 : I10

    [x: string]: A;
>x : string
>A : A

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}

class A2<T> { foo: T; }
>A2 : A2<T>
>T : T
>foo : T
>T : T

interface I11 {
>I11 : I11

    [x: string]: A2<number>;
>x : string
>A2 : A2<T>

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I12 {
>I12 : I12

    [x: string]: (x) => number;
>x : string
>x : any

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I13 {
>I13 : I13

    [x: string]: <T>(x: T) => T;
>x : string
>T : T
>x : T
>T : T
>T : T

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


enum E2 { A }
>E2 : E2
>A : E2

interface I14 {
>I14 : I14

    [x: string]: E2;
>x : string
>E2 : E2

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


function f() { }
>f : typeof f

module f {
>f : typeof f

    export var bar = 1;
>bar : number
>1 : 1
}
interface I15 {
>I15 : I15

    [x: string]: typeof f;
>x : string
>f : typeof f

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


class c { baz: string }
>c : c
>baz : string

module c {
>c : typeof c

    export var bar = 1;
>bar : number
>1 : 1
}
interface I16 {
>I16 : I16

    [x: string]: typeof c;
>x : string
>c : typeof c

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I17<T> {
>I17 : I17<T>
>T : T

    [x: string]: T;
>x : string
>T : T

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}

interface I19 {
>I19 : I19

    [x: string]: Object;
>x : string
>Object : Object

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}


interface I20 {
>I20 : I20

    [x: string]: {};
>x : string

    foo: string | number;
>foo : string | number

    foo2: e | number;
>foo2 : number
>e : e
}
