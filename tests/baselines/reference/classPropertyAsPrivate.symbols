=== tests/cases/conformance/classes/members/accessibility/classPropertyAsPrivate.ts ===
class C {
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))

    private x: string;
>x : Symbol(C.x, Decl(classPropertyAsPrivate.ts, 0, 9))

    private get y() { return null; }
>y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))

    private set y(x) { }
>y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))
>x : Symbol(x, Decl(classPropertyAsPrivate.ts, 3, 18))

    private foo() { }
>foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 3, 24))

    private static a: string;
>a : Symbol(C.a, Decl(classPropertyAsPrivate.ts, 4, 21))

    private static get b() { return null; }
>b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))

    private static set b(x) { }
>b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))
>x : Symbol(x, Decl(classPropertyAsPrivate.ts, 8, 25))

    private static foo() { }
>foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 8, 31))
}

var c: C;
>c : Symbol(c, Decl(classPropertyAsPrivate.ts, 12, 3))
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))

// all errors
c.x;
>c.x : Symbol(C.x, Decl(classPropertyAsPrivate.ts, 0, 9))
>c : Symbol(c, Decl(classPropertyAsPrivate.ts, 12, 3))
>x : Symbol(C.x, Decl(classPropertyAsPrivate.ts, 0, 9))

c.y;
>c.y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))
>c : Symbol(c, Decl(classPropertyAsPrivate.ts, 12, 3))
>y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))

c.y = 1;
>c.y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))
>c : Symbol(c, Decl(classPropertyAsPrivate.ts, 12, 3))
>y : Symbol(C.y, Decl(classPropertyAsPrivate.ts, 1, 22), Decl(classPropertyAsPrivate.ts, 2, 36))

c.foo();
>c.foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 3, 24))
>c : Symbol(c, Decl(classPropertyAsPrivate.ts, 12, 3))
>foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 3, 24))

C.a;
>C.a : Symbol(C.a, Decl(classPropertyAsPrivate.ts, 4, 21))
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))
>a : Symbol(C.a, Decl(classPropertyAsPrivate.ts, 4, 21))

C.b();
>C.b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))
>b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))

C.b = 1;
>C.b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))
>b : Symbol(C.b, Decl(classPropertyAsPrivate.ts, 6, 29), Decl(classPropertyAsPrivate.ts, 7, 43))

C.foo();
>C.foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 8, 31))
>C : Symbol(C, Decl(classPropertyAsPrivate.ts, 0, 0))
>foo : Symbol(C.foo, Decl(classPropertyAsPrivate.ts, 8, 31))

