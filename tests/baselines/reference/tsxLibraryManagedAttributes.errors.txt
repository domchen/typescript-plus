tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(55,12): error TS2322: Type '{ foo: number; }' is not assignable to type 'Defaultize<InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }>, { foo: number; }>'.
  Type '{ foo: number; }' is not assignable to type '{ bar: string | number | ReactComponent<{}, {}> | null | undefined; baz: string; }'.
    Property 'bar' is missing in type '{ foo: number; }'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(57,41): error TS2339: Property 'bat' does not exist on type 'Defaultize<InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }>, { foo: number; }>'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(59,42): error TS2322: Type 'null' is not assignable to type 'string'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(69,26): error TS2322: Type 'string' is not assignable to type 'number | null | undefined'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(71,35): error TS2322: Type 'null' is not assignable to type 'ReactNode'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(80,38): error TS2339: Property 'bar' does not exist on type 'Defaultize<{}, { foo: number; }>'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(81,29): error TS2322: Type 'string' is not assignable to type 'number | undefined'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(98,12): error TS2322: Type '{ foo: string; }' is not assignable to type 'Defaultize<FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }>, { foo: string; }>'.
  Type '{ foo: string; }' is not assignable to type '{ bar: string | number | ReactComponent<{}, {}> | null | undefined; baz: number; }'.
    Property 'bar' is missing in type '{ foo: string; }'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(100,56): error TS2339: Property 'bat' does not exist on type 'Defaultize<FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }>, { foo: string; }>'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(102,57): error TS2322: Type 'null' is not assignable to type 'number'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(111,46): error TS2322: Type 'number' is not assignable to type 'string'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(112,46): error TS2322: Type 'null' is not assignable to type 'string'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(113,57): error TS2322: Type 'null' is not assignable to type 'ReactNode'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(122,58): error TS2339: Property 'bar' does not exist on type 'Defaultize<FooProps, { foo: string; }>'.
tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx(123,49): error TS2322: Type 'number' is not assignable to type 'string | undefined'.


==== tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx (15 errors) ====
    type Defaultize<TProps, TDefaults> =
        & {[K in Extract<keyof TProps, keyof TDefaults>]?: TProps[K]}
        & {[K in Exclude<keyof TProps, keyof TDefaults>]: TProps[K]}
        & Partial<TDefaults>;
    
    type InferredPropTypes<P> = {[K in keyof P]: P[K] extends PropTypeChecker<infer T, infer U> ? PropTypeChecker<T, U>[typeof checkedType] : {}};
    
    declare const checkedType: unique symbol;
    interface PropTypeChecker<U, TRequired = false> {
        (props: any, propName: string, componentName: string, location: any, propFullName: string): boolean;
        isRequired: PropTypeChecker<U, true>;
        [checkedType]: TRequired extends true ? U : U | null | undefined;
    }
    
    declare namespace PropTypes {
        export const number: PropTypeChecker<number>;
        export const string: PropTypeChecker<string>;
        export const node: PropTypeChecker<ReactNode>;
    }
    
    type ReactNode = string | number | ReactComponent<{}, {}>;
    
    declare class ReactComponent<P={}, S={}> {
        constructor(props: P);
        props: P & Readonly<{children: ReactNode[]}>;
        setState(s: Partial<S>): S;
        render(): ReactNode;
    }
    
    declare namespace JSX {
        interface Element extends ReactComponent {}
        interface IntrinsicElements {}
        type LibraryManagedAttributes<TComponent, TProps> =
            TComponent extends { defaultProps: infer D; propTypes: infer P; }
                ? Defaultize<TProps & InferredPropTypes<P>, D>
                : TComponent extends { defaultProps: infer D }
                    ? Defaultize<TProps, D>
                    : TComponent extends { propTypes: infer P }
                        ? TProps & InferredPropTypes<P>
                        : TProps;
    }
    
    class Component extends ReactComponent {
        static propTypes = {
            foo: PropTypes.number,
            bar: PropTypes.node,
            baz: PropTypes.string.isRequired,
        };
        static defaultProps = {
            foo: 42,
        }
    }
    
    const a = <Component foo={12} bar="yes" baz="yeah" />;
    const b = <Component foo={12} />; // Error, missing required prop bar
               ~~~~~~~~~
!!! error TS2322: Type '{ foo: number; }' is not assignable to type 'Defaultize<InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }>, { foo: number; }>'.
!!! error TS2322:   Type '{ foo: number; }' is not assignable to type '{ bar: string | number | ReactComponent<{}, {}> | null | undefined; baz: string; }'.
!!! error TS2322:     Property 'bar' is missing in type '{ foo: number; }'.
    const c = <Component bar="yes" baz="yeah" />;
    const d = <Component bar="yes" baz="yo" bat="ohno" />; // Error, baz not a valid prop
                                            ~~~~~~~~~~
!!! error TS2339: Property 'bat' does not exist on type 'Defaultize<InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }>, { foo: number; }>'.
    const e = <Component foo={12} bar={null} baz="cool" />; // bar is nullable/undefinable since it's not marked `isRequired`
    const f = <Component foo={12} bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
                                             ~~~
!!! error TS2322: Type 'null' is not assignable to type 'string'.
    
    class JustPropTypes extends ReactComponent {
        static propTypes = {
            foo: PropTypes.number,
            bar: PropTypes.node.isRequired,
        };
    }
    
    const g = <JustPropTypes foo={12} bar="ok" />;
    const h = <JustPropTypes foo="no" />; // error, wrong type
                             ~~~
!!! error TS2322: Type 'string' is not assignable to type 'number | null | undefined'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:63:9: The expected type comes from property 'foo' which is declared here on type 'InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, true>; }>'
    const i = <JustPropTypes foo={null} bar="ok" />;
    const j = <JustPropTypes foo={12} bar={null} />; // error, bar is required
                                      ~~~
!!! error TS2322: Type 'null' is not assignable to type 'ReactNode'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:64:9: The expected type comes from property 'bar' which is declared here on type 'InferredPropTypes<{ foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, true>; }>'
    
    class JustDefaultProps extends ReactComponent {
        static defaultProps = {
            foo: 42,
        };
    }
    
    const k = <JustDefaultProps foo={12} />;
    const l = <JustDefaultProps foo={12} bar="ok" />; // error, no prop named bar
                                         ~~~~~~~~
!!! error TS2339: Property 'bar' does not exist on type 'Defaultize<{}, { foo: number; }>'.
    const m = <JustDefaultProps foo="no" />; // error, wrong type
                                ~~~
!!! error TS2322: Type 'string' is not assignable to type 'number | undefined'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:75:9: The expected type comes from property 'foo' which is declared here on type 'Defaultize<{}, { foo: number; }>'
    
    interface FooProps {
        foo: string;
    }
    
    class BothWithSpecifiedGeneric extends ReactComponent<FooProps> {
        static propTypes = {
            foo: PropTypes.string,
            bar: PropTypes.node,
            baz: PropTypes.number.isRequired,
        };
        static defaultProps = {
            foo: "yo",
        };
    }
    const n = <BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} />;
    const o = <BothWithSpecifiedGeneric foo="no" />; // Error, missing required prop bar
               ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{ foo: string; }' is not assignable to type 'Defaultize<FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }>, { foo: string; }>'.
!!! error TS2322:   Type '{ foo: string; }' is not assignable to type '{ bar: string | number | ReactComponent<{}, {}> | null | undefined; baz: number; }'.
!!! error TS2322:     Property 'bar' is missing in type '{ foo: string; }'.
    const p = <BothWithSpecifiedGeneric bar="yes" baz={12} />;
    const q = <BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" />; // Error, baz not a valid prop
                                                           ~~~~~~~~~~
!!! error TS2339: Property 'bat' does not exist on type 'Defaultize<FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }>, { foo: string; }>'.
    const r = <BothWithSpecifiedGeneric foo="no" bar={null} baz={0} />; // bar is nullable/undefinable since it's not marked `isRequired`
    const s = <BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
                                                            ~~~
!!! error TS2322: Type 'null' is not assignable to type 'number'.
    
    class JustPropTypesWithSpecifiedGeneric extends ReactComponent<FooProps> {
        static propTypes = {
            foo: PropTypes.string,
            bar: PropTypes.node.isRequired,
        };
    }
    const t = <JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" />;
    const u = <JustPropTypesWithSpecifiedGeneric foo={12} />; // error, wrong type
                                                 ~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:84:5: The expected type comes from property 'foo' which is declared here on type 'FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, true>; }>'
    const v = <JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" />; // generic overrides propTypes required-ness, null isn't valid
                                                 ~~~
!!! error TS2322: Type 'null' is not assignable to type 'string'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:84:5: The expected type comes from property 'foo' which is declared here on type 'FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, true>; }>'
    const w = <JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} />; // error, bar is required
                                                            ~~~
!!! error TS2322: Type 'null' is not assignable to type 'ReactNode'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:107:9: The expected type comes from property 'bar' which is declared here on type 'FooProps & InferredPropTypes<{ foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, true>; }>'
    
    class JustDefaultPropsWithSpecifiedGeneric extends ReactComponent<FooProps> {
        static defaultProps = {
            foo: "no",
        };
    }
    
    const x = <JustDefaultPropsWithSpecifiedGeneric foo="eh" />;
    const y = <JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" />; // error, no prop named bar
                                                             ~~~~~~~~
!!! error TS2339: Property 'bar' does not exist on type 'Defaultize<FooProps, { foo: string; }>'.
    const z = <JustDefaultPropsWithSpecifiedGeneric foo={12} />; // error, wrong type
                                                    ~~~
!!! error TS2322: Type 'number' is not assignable to type 'string | undefined'.
!!! related TS6500 tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx:117:9: The expected type comes from property 'foo' which is declared here on type 'Defaultize<FooProps, { foo: string; }>'
    const aa = <JustDefaultPropsWithSpecifiedGeneric />;
    