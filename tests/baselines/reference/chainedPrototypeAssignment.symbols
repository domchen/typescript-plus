=== tests/cases/conformance/salsa/use.js ===
/// <reference path='./types.d.ts'/>
var mod = require('./mod');
>mod : Symbol(mod, Decl(use.js, 1, 3))
>require : Symbol(require, Decl(types.d.ts, 0, 0))
>'./mod' : Symbol("tests/cases/conformance/salsa/mod", Decl(mod.js, 0, 0))

var a = new mod.A()
>a : Symbol(a, Decl(use.js, 2, 3))
>mod.A : Symbol(A, Decl(mod.js, 6, 1))
>mod : Symbol(mod, Decl(use.js, 1, 3))
>A : Symbol(A, Decl(mod.js, 6, 1))

var b = new mod.B()
>b : Symbol(b, Decl(use.js, 3, 3))
>mod.B : Symbol(B, Decl(mod.js, 7, 13))
>mod : Symbol(mod, Decl(use.js, 1, 3))
>B : Symbol(B, Decl(mod.js, 7, 13))

a.m('nope')
>a.m : Symbol(m, Decl(mod.js, 9, 29))
>a : Symbol(a, Decl(use.js, 2, 3))
>m : Symbol(m, Decl(mod.js, 9, 29))

b.m('not really')
>b.m : Symbol(m, Decl(mod.js, 9, 29))
>b : Symbol(b, Decl(use.js, 3, 3))
>m : Symbol(m, Decl(mod.js, 9, 29))

=== tests/cases/conformance/salsa/types.d.ts ===
declare function require(name: string): any;
>require : Symbol(require, Decl(types.d.ts, 0, 0))
>name : Symbol(name, Decl(types.d.ts, 0, 25))

declare var exports: any;
>exports : Symbol(exports, Decl(types.d.ts, 1, 11))

=== tests/cases/conformance/salsa/mod.js ===
/// <reference path='./types.d.ts'/>
var A = function() {
>A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))

    this.a = 1
>a : Symbol(A.a, Decl(mod.js, 1, 20))
}
var B = function() {
>B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))

    this.b = 2
>b : Symbol(B.b, Decl(mod.js, 4, 20))
}
exports.A = A
>exports.A : Symbol(A, Decl(mod.js, 6, 1))
>exports : Symbol(A, Decl(mod.js, 6, 1))
>A : Symbol(A, Decl(mod.js, 6, 1))
>A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))

exports.B = B
>exports.B : Symbol(B, Decl(mod.js, 7, 13))
>exports : Symbol(B, Decl(mod.js, 7, 13))
>B : Symbol(B, Decl(mod.js, 7, 13))
>B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))

A.prototype = B.prototype = {
>A.prototype : Symbol(A.prototype, Decl(mod.js, 8, 13))
>A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))
>prototype : Symbol(A.prototype, Decl(mod.js, 8, 13))
>B.prototype : Symbol(B.prototype, Decl(mod.js, 9, 13))
>B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))
>prototype : Symbol(B.prototype, Decl(mod.js, 9, 13))

    /** @param {number} n */
    m(n) {
>m : Symbol(m, Decl(mod.js, 9, 29))
>n : Symbol(n, Decl(mod.js, 11, 6))

        return n + 1
>n : Symbol(n, Decl(mod.js, 11, 6))
    }
}

