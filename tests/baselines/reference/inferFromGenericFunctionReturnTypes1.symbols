=== tests/cases/compiler/inferFromGenericFunctionReturnTypes1.ts ===
// Repro from #15680

// This is a contrived class. We could do the same thing with Observables, etc.
class SetOf<A> {
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 12))

  _store: A[];
>_store : Symbol(SetOf._store, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 16))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 12))

  add(a: A) {
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 6, 6))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 12))

    this._store.push(a);
>this._store.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>this._store : Symbol(SetOf._store, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 16))
>this : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>_store : Symbol(SetOf._store, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 16))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 6, 6))
  }

  transform<B>(transformer: (a: SetOf<A>) => SetOf<B>): SetOf<B> {
>transform : Symbol(SetOf.transform, Decl(inferFromGenericFunctionReturnTypes1.ts, 8, 3))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 12))
>transformer : Symbol(transformer, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 15))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 29))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 12))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 12))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 12))

    return transformer(this);
>transformer : Symbol(transformer, Decl(inferFromGenericFunctionReturnTypes1.ts, 10, 15))
>this : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
  }

  forEach(fn: (a: A, index: number) => void) {
>forEach : Symbol(SetOf.forEach, Decl(inferFromGenericFunctionReturnTypes1.ts, 12, 3))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 14, 10))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 14, 15))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 12))
>index : Symbol(index, Decl(inferFromGenericFunctionReturnTypes1.ts, 14, 20))

      this._store.forEach((a, i) => fn(a, i));
>this._store.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>this._store : Symbol(SetOf._store, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 16))
>this : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>_store : Symbol(SetOf._store, Decl(inferFromGenericFunctionReturnTypes1.ts, 3, 16))
>forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 15, 27))
>i : Symbol(i, Decl(inferFromGenericFunctionReturnTypes1.ts, 15, 29))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 14, 10))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 15, 27))
>i : Symbol(i, Decl(inferFromGenericFunctionReturnTypes1.ts, 15, 29))
  }
}

function compose<A, B, C, D, E>(
>compose : Symbol(compose, Decl(inferFromGenericFunctionReturnTypes1.ts, 17, 1), Decl(inferFromGenericFunctionReturnTypes1.ts, 24, 28))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 17))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 19))
>C : Symbol(C, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 22))
>D : Symbol(D, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 25))
>E : Symbol(E, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 28))

  fnA: (a: SetOf<A>) => SetOf<B>, 
>fnA : Symbol(fnA, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 32))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 20, 8))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 17))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 19))

  fnB: (b: SetOf<B>) => SetOf<C>, 
>fnB : Symbol(fnB, Decl(inferFromGenericFunctionReturnTypes1.ts, 20, 33))
>b : Symbol(b, Decl(inferFromGenericFunctionReturnTypes1.ts, 21, 8))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 19))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>C : Symbol(C, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 22))

  fnC: (c: SetOf<C>) => SetOf<D>,
>fnC : Symbol(fnC, Decl(inferFromGenericFunctionReturnTypes1.ts, 21, 33))
>c : Symbol(c, Decl(inferFromGenericFunctionReturnTypes1.ts, 22, 8))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>C : Symbol(C, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 22))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>D : Symbol(D, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 25))

  fnD: (c: SetOf<D>) => SetOf<E>,
>fnD : Symbol(fnD, Decl(inferFromGenericFunctionReturnTypes1.ts, 22, 33))
>c : Symbol(c, Decl(inferFromGenericFunctionReturnTypes1.ts, 23, 8))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>D : Symbol(D, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 25))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>E : Symbol(E, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 28))

):(x: SetOf<A>) => SetOf<E>;
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 24, 3))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 17))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>E : Symbol(E, Decl(inferFromGenericFunctionReturnTypes1.ts, 19, 28))

/* ... etc ... */
function compose<T>(...fns: ((x: T) => T)[]): (x: T) => T {
>compose : Symbol(compose, Decl(inferFromGenericFunctionReturnTypes1.ts, 17, 1), Decl(inferFromGenericFunctionReturnTypes1.ts, 24, 28))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))
>fns : Symbol(fns, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 20))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 30))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 47))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))

  return (x: T) => fns.reduce((prev, fn) => fn(prev), x);
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 10))
>T : Symbol(T, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 17))
>fns.reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>fns : Symbol(fns, Decl(inferFromGenericFunctionReturnTypes1.ts, 26, 20))
>reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>prev : Symbol(prev, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 31))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 36))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 36))
>prev : Symbol(prev, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 31))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 27, 10))
}

function map<A, B>(fn: (a: A) => B): (s: SetOf<A>) => SetOf<B> {
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 13))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 15))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 19))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 24))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 13))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 15))
>s : Symbol(s, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 38))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 13))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 15))

  return (a: SetOf<A>) => {
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 31, 10))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 13))

    const b: SetOf<B> = new SetOf();
>b : Symbol(b, Decl(inferFromGenericFunctionReturnTypes1.ts, 32, 9))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>B : Symbol(B, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 15))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))

    a.forEach(x => b.add(fn(x)));
>a.forEach : Symbol(SetOf.forEach, Decl(inferFromGenericFunctionReturnTypes1.ts, 12, 3))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 31, 10))
>forEach : Symbol(SetOf.forEach, Decl(inferFromGenericFunctionReturnTypes1.ts, 12, 3))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 33, 14))
>b.add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>b : Symbol(b, Decl(inferFromGenericFunctionReturnTypes1.ts, 32, 9))
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>fn : Symbol(fn, Decl(inferFromGenericFunctionReturnTypes1.ts, 30, 19))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 33, 14))

    return b;
>b : Symbol(b, Decl(inferFromGenericFunctionReturnTypes1.ts, 32, 9))
  }
}

function filter<A>(predicate: (a: A) => boolean): (s: SetOf<A>) => SetOf<A> {
>filter : Symbol(filter, Decl(inferFromGenericFunctionReturnTypes1.ts, 36, 1))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))
>predicate : Symbol(predicate, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 19))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 31))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))
>s : Symbol(s, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 51))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))

  return (a: SetOf<A>) => {
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 39, 10))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))

    const result = new SetOf<A>();
>result : Symbol(result, Decl(inferFromGenericFunctionReturnTypes1.ts, 40, 9))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))
>A : Symbol(A, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 16))

    a.forEach(x => {
>a.forEach : Symbol(SetOf.forEach, Decl(inferFromGenericFunctionReturnTypes1.ts, 12, 3))
>a : Symbol(a, Decl(inferFromGenericFunctionReturnTypes1.ts, 39, 10))
>forEach : Symbol(SetOf.forEach, Decl(inferFromGenericFunctionReturnTypes1.ts, 12, 3))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 41, 14))

      if (predicate(x)) result.add(x);
>predicate : Symbol(predicate, Decl(inferFromGenericFunctionReturnTypes1.ts, 38, 19))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 41, 14))
>result.add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>result : Symbol(result, Decl(inferFromGenericFunctionReturnTypes1.ts, 40, 9))
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 41, 14))

    });
   return result;
>result : Symbol(result, Decl(inferFromGenericFunctionReturnTypes1.ts, 40, 9))
  }
}

const testSet = new SetOf<number>();
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>SetOf : Symbol(SetOf, Decl(inferFromGenericFunctionReturnTypes1.ts, 0, 0))

testSet.add(1);
>testSet.add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))

testSet.add(2);
>testSet.add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))

testSet.add(3);
>testSet.add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>add : Symbol(SetOf.add, Decl(inferFromGenericFunctionReturnTypes1.ts, 4, 14))

testSet.transform(
>testSet.transform : Symbol(SetOf.transform, Decl(inferFromGenericFunctionReturnTypes1.ts, 8, 3))
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>transform : Symbol(SetOf.transform, Decl(inferFromGenericFunctionReturnTypes1.ts, 8, 3))

  compose(
>compose : Symbol(compose, Decl(inferFromGenericFunctionReturnTypes1.ts, 17, 1), Decl(inferFromGenericFunctionReturnTypes1.ts, 24, 28))

    filter(x => x % 1 === 0),
>filter : Symbol(filter, Decl(inferFromGenericFunctionReturnTypes1.ts, 36, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 55, 11))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 55, 11))

    map(x => x + x),
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 56, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 56, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 56, 8))

    map(x => x + '!!!'),
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 57, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 57, 8))

    map(x => x.toUpperCase())
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 58, 8))
>x.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 58, 8))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))

  )
)

testSet.transform(
>testSet.transform : Symbol(SetOf.transform, Decl(inferFromGenericFunctionReturnTypes1.ts, 8, 3))
>testSet : Symbol(testSet, Decl(inferFromGenericFunctionReturnTypes1.ts, 48, 5))
>transform : Symbol(SetOf.transform, Decl(inferFromGenericFunctionReturnTypes1.ts, 8, 3))

  compose(
>compose : Symbol(compose, Decl(inferFromGenericFunctionReturnTypes1.ts, 17, 1), Decl(inferFromGenericFunctionReturnTypes1.ts, 24, 28))

    filter(x => x % 1 === 0),
>filter : Symbol(filter, Decl(inferFromGenericFunctionReturnTypes1.ts, 36, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 64, 11))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 64, 11))

    map(x => x + x),
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 65, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 65, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 65, 8))

    map(x => 123),  // Whoops a bug
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 66, 8))

    map(x => x.toUpperCase()) // causes an error!
>map : Symbol(map, Decl(inferFromGenericFunctionReturnTypes1.ts, 28, 1))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 67, 8))
>x : Symbol(x, Decl(inferFromGenericFunctionReturnTypes1.ts, 67, 8))

  )
)

