=== tests/cases/compiler/crashIntypeCheckObjectCreationExpression.ts ===
export class BuildWorkspaceService {
>BuildWorkspaceService : Symbol(BuildWorkspaceService, Decl(crashIntypeCheckObjectCreationExpression.ts, 0, 0))

    public injectRequestService<P0, P1, P2>(service: P0) {
>injectRequestService : Symbol(BuildWorkspaceService.injectRequestService, Decl(crashIntypeCheckObjectCreationExpression.ts, 0, 36))
>P0 : Symbol(P0, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 32))
>P1 : Symbol(P1, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 35))
>P2 : Symbol(P2, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 39))
>service : Symbol(service, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 44))
>P0 : Symbol(P0, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 32))

        this.injectBuildService<number>(new X(service));
>this.injectBuildService : Symbol(BuildWorkspaceService.injectBuildService, Decl(crashIntypeCheckObjectCreationExpression.ts, 3, 5))
>this : Symbol(BuildWorkspaceService, Decl(crashIntypeCheckObjectCreationExpression.ts, 0, 0))
>injectBuildService : Symbol(BuildWorkspaceService.injectBuildService, Decl(crashIntypeCheckObjectCreationExpression.ts, 3, 5))
>service : Symbol(service, Decl(crashIntypeCheckObjectCreationExpression.ts, 1, 44))
    }
    public injectBuildService<P0>(service: P0) {
>injectBuildService : Symbol(BuildWorkspaceService.injectBuildService, Decl(crashIntypeCheckObjectCreationExpression.ts, 3, 5))
>P0 : Symbol(P0, Decl(crashIntypeCheckObjectCreationExpression.ts, 4, 30))
>service : Symbol(service, Decl(crashIntypeCheckObjectCreationExpression.ts, 4, 34))
>P0 : Symbol(P0, Decl(crashIntypeCheckObjectCreationExpression.ts, 4, 30))
    }
}

