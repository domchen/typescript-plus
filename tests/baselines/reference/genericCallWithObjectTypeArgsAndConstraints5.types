=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints5.ts ===
// Generic call with constraints infering type parameter from object member properties

class C {
>C : C

    x: string;
>x : string
}

class D {
>D : D

    x: string;
>x : string

    y: string;
>y : string
}

function foo<T, U extends T>(t: T, t2: U) {
>foo : <T, U extends T>(t: T, t2: U) => (x: T) => U
>t : T
>t2 : U

    return (x: T) => t2;
>(x: T) => t2 : (x: T) => U
>x : T
>t2 : U
}

var c: C;
>c : C

var d: D;
>d : D

var r2 = foo(d, c); // the constraints are self-referencing, no downstream error
>r2 : any
>foo(d, c) : any
>foo : <T, U extends T>(t: T, t2: U) => (x: T) => U
>d : D
>c : C

var r9 = foo(() => 1, () => { }); // the constraints are self-referencing, no downstream error
>r9 : any
>foo(() => 1, () => { }) : any
>foo : <T, U extends T>(t: T, t2: U) => (x: T) => U
>() => 1 : () => number
>1 : 1
>() => { } : () => void

function other<T, U extends T>() {
>other : <T, U extends T>() => void

    var r5 = foo<T, U>(c, d); // error
>r5 : any
>foo<T, U>(c, d) : any
>foo : <T, U extends T>(t: T, t2: U) => (x: T) => U
>c : C
>d : D
}

