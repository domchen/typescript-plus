=== tests/cases/compiler/errorMessagesIntersectionTypes01.ts ===
interface Foo {
>Foo : Symbol(Foo, Decl(errorMessagesIntersectionTypes01.ts, 0, 0))

    fooProp: boolean;
>fooProp : Symbol(Foo.fooProp, Decl(errorMessagesIntersectionTypes01.ts, 0, 15))
}

interface Bar {
>Bar : Symbol(Bar, Decl(errorMessagesIntersectionTypes01.ts, 2, 1))

    barProp: string;
>barProp : Symbol(Bar.barProp, Decl(errorMessagesIntersectionTypes01.ts, 4, 15))
}

interface FooBar extends Foo, Bar {
>FooBar : Symbol(FooBar, Decl(errorMessagesIntersectionTypes01.ts, 6, 1))
>Foo : Symbol(Foo, Decl(errorMessagesIntersectionTypes01.ts, 0, 0))
>Bar : Symbol(Bar, Decl(errorMessagesIntersectionTypes01.ts, 2, 1))
}

declare function mixBar<T>(obj: T): T & Bar;
>mixBar : Symbol(mixBar, Decl(errorMessagesIntersectionTypes01.ts, 9, 1))
>T : Symbol(T, Decl(errorMessagesIntersectionTypes01.ts, 11, 24))
>obj : Symbol(obj, Decl(errorMessagesIntersectionTypes01.ts, 11, 27))
>T : Symbol(T, Decl(errorMessagesIntersectionTypes01.ts, 11, 24))
>T : Symbol(T, Decl(errorMessagesIntersectionTypes01.ts, 11, 24))
>Bar : Symbol(Bar, Decl(errorMessagesIntersectionTypes01.ts, 2, 1))

let fooBar: FooBar = mixBar({
>fooBar : Symbol(fooBar, Decl(errorMessagesIntersectionTypes01.ts, 13, 3))
>FooBar : Symbol(FooBar, Decl(errorMessagesIntersectionTypes01.ts, 6, 1))
>mixBar : Symbol(mixBar, Decl(errorMessagesIntersectionTypes01.ts, 9, 1))

    fooProp: "frizzlebizzle"
>fooProp : Symbol(fooProp, Decl(errorMessagesIntersectionTypes01.ts, 13, 29))

});
