=== tests/cases/compiler/monorepo/core/src/application.ts ===
import { Constructor } from "@loopback/context";
>Constructor : any

export type ControllerClass = Constructor<any>;
>ControllerClass : Constructor<any>

=== tests/cases/compiler/monorepo/core/src/usage.ts ===
import { ControllerClass } from './application';
>ControllerClass : any

import { BindingKey } from '@loopback/context';
>BindingKey : typeof BindingKey

export const CONTROLLER_CLASS = BindingKey.create<ControllerClass>(null as any); // line in question
>CONTROLLER_CLASS : BindingKey<import("tests/cases/compiler/monorepo/context/src/value-promise").Constructor<any>>
>BindingKey.create<ControllerClass>(null as any) : BindingKey<import("tests/cases/compiler/monorepo/context/src/value-promise").Constructor<any>>
>BindingKey.create : <T extends import("tests/cases/compiler/monorepo/context/src/value-promise").Constructor<any>>(ctor: T) => BindingKey<T>
>BindingKey : typeof BindingKey
>create : <T extends import("tests/cases/compiler/monorepo/context/src/value-promise").Constructor<any>>(ctor: T) => BindingKey<T>
>null as any : any
>null : null

=== tests/cases/compiler/monorepo/context/src/value-promise.ts ===
export type Constructor<T> = (...args: any[]) => T;
>Constructor : Constructor<T>
>args : any[]

=== tests/cases/compiler/monorepo/context/src/bindingkey.ts ===
import { Constructor } from "@loopback/context"
>Constructor : any

export class BindingKey<T> {
>BindingKey : BindingKey<T>

  readonly __type: T;
>__type : T

  static create<T extends Constructor<any>>(ctor: T) {
>create : <T extends Constructor<any>>(ctor: T) => BindingKey<T>
>ctor : T

    return new BindingKey<T>();
>new BindingKey<T>() : BindingKey<T>
>BindingKey : typeof BindingKey
  }
}

=== tests/cases/compiler/monorepo/context/index.ts ===
export * from "./src/value-promise";
No type information for this code.export * from "./src/bindingkey";
No type information for this code.
No type information for this code.