=== tests/cases/compiler/typeUsedAsValueError.ts ===
interface Interface {
>Interface : Symbol(Interface, Decl(typeUsedAsValueError.ts, 0, 0))

}

class SomeClass {
>SomeClass : Symbol(SomeClass, Decl(typeUsedAsValueError.ts, 2, 1))

}

type TypeAliasForSomeClass = SomeClass;
>TypeAliasForSomeClass : Symbol(TypeAliasForSomeClass, Decl(typeUsedAsValueError.ts, 6, 1))
>SomeClass : Symbol(SomeClass, Decl(typeUsedAsValueError.ts, 2, 1))

type someType = { x: number };
>someType : Symbol(someType, Decl(typeUsedAsValueError.ts, 8, 39))
>x : Symbol(x, Decl(typeUsedAsValueError.ts, 9, 17))

function acceptsSomeType(a: someType) {
>acceptsSomeType : Symbol(acceptsSomeType, Decl(typeUsedAsValueError.ts, 9, 30))
>a : Symbol(a, Decl(typeUsedAsValueError.ts, 11, 25))
>someType : Symbol(someType, Decl(typeUsedAsValueError.ts, 8, 39))

}

let one = Interface;
>one : Symbol(one, Decl(typeUsedAsValueError.ts, 15, 3))

let two = InterfaceNotFound;
>two : Symbol(two, Decl(typeUsedAsValueError.ts, 16, 3))

let three = TypeAliasForSomeClass;
>three : Symbol(three, Decl(typeUsedAsValueError.ts, 17, 3))

let four = new TypeAliasForSomeClass();
>four : Symbol(four, Decl(typeUsedAsValueError.ts, 18, 3))

let five = new TypeAliasForSomeClassNotFound();
>five : Symbol(five, Decl(typeUsedAsValueError.ts, 19, 3))

let six = someType;
>six : Symbol(six, Decl(typeUsedAsValueError.ts, 20, 3))

acceptsSomeType(someType);
>acceptsSomeType : Symbol(acceptsSomeType, Decl(typeUsedAsValueError.ts, 9, 30))

acceptsSomeType(someTypeNotFound);
>acceptsSomeType : Symbol(acceptsSomeType, Decl(typeUsedAsValueError.ts, 9, 30))

