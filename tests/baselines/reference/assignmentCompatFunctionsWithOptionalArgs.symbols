=== tests/cases/compiler/assignmentCompatFunctionsWithOptionalArgs.ts ===
function foo(x: { id: number; name?: string; }): void;
>foo : Symbol(foo, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 0))
>x : Symbol(x, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 13))
>id : Symbol(id, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 17))
>name : Symbol(name, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 29))

foo({ id: 1234 });                 // Ok
>foo : Symbol(foo, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 0))
>id : Symbol(id, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 1, 5))

foo({ id: 1234, name: "hello" });  // Ok
>foo : Symbol(foo, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 0))
>id : Symbol(id, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 2, 5))
>name : Symbol(name, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 2, 15))

foo({ id: 1234, name: false });    // Error, name of wrong type
>foo : Symbol(foo, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 0))
>id : Symbol(id, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 3, 5))
>name : Symbol(name, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 3, 15))

foo({ name: "hello" });            // Error, id required but missing
>foo : Symbol(foo, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 0, 0))
>name : Symbol(name, Decl(assignmentCompatFunctionsWithOptionalArgs.ts, 4, 5))

