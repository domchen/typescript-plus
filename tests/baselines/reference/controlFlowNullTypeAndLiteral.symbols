=== tests/cases/compiler/controlFlowNullTypeAndLiteral.ts ===
// Repros from #23771

const myNull: null = null;
>myNull : Symbol(myNull, Decl(controlFlowNullTypeAndLiteral.ts, 2, 5))

const objWithValMaybeNull: { val: number | null } = { val: 1 };
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 53))

const addOne = function (num: number) {
>addOne : Symbol(addOne, Decl(controlFlowNullTypeAndLiteral.ts, 4, 5))
>num : Symbol(num, Decl(controlFlowNullTypeAndLiteral.ts, 4, 25))

    return num + 1;
>num : Symbol(num, Decl(controlFlowNullTypeAndLiteral.ts, 4, 25))
}

if (objWithValMaybeNull.val !== null)
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

    addOne(objWithValMaybeNull.val);
>addOne : Symbol(addOne, Decl(controlFlowNullTypeAndLiteral.ts, 4, 5))
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

if (objWithValMaybeNull.val !== myNull)
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>myNull : Symbol(myNull, Decl(controlFlowNullTypeAndLiteral.ts, 2, 5))

    addOne(objWithValMaybeNull.val);
>addOne : Symbol(addOne, Decl(controlFlowNullTypeAndLiteral.ts, 4, 5))
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

if (objWithValMaybeNull.val === null)
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

    addOne(objWithValMaybeNull.val);    // Error
>addOne : Symbol(addOne, Decl(controlFlowNullTypeAndLiteral.ts, 4, 5))
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

if (objWithValMaybeNull.val === myNull)
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>myNull : Symbol(myNull, Decl(controlFlowNullTypeAndLiteral.ts, 2, 5))

    addOne(objWithValMaybeNull.val);    // Error
>addOne : Symbol(addOne, Decl(controlFlowNullTypeAndLiteral.ts, 4, 5))
>objWithValMaybeNull.val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))
>objWithValMaybeNull : Symbol(objWithValMaybeNull, Decl(controlFlowNullTypeAndLiteral.ts, 3, 5))
>val : Symbol(val, Decl(controlFlowNullTypeAndLiteral.ts, 3, 28))

function f(x: number | null) {
>f : Symbol(f, Decl(controlFlowNullTypeAndLiteral.ts, 16, 36))
>x : Symbol(x, Decl(controlFlowNullTypeAndLiteral.ts, 18, 11))

    if(x === myNull) {
>x : Symbol(x, Decl(controlFlowNullTypeAndLiteral.ts, 18, 11))
>myNull : Symbol(myNull, Decl(controlFlowNullTypeAndLiteral.ts, 2, 5))

        const s: string = x;  // Error
>s : Symbol(s, Decl(controlFlowNullTypeAndLiteral.ts, 20, 13))
>x : Symbol(x, Decl(controlFlowNullTypeAndLiteral.ts, 18, 11))
    }
}

