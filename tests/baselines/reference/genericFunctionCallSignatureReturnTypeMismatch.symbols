=== tests/cases/compiler/genericFunctionCallSignatureReturnTypeMismatch.ts ===
interface Array<T> {}
>Array : Symbol(Array, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 0, 0))
>T : Symbol(T, Decl(lib.d.ts, --, --), Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 0, 16))

var f : { <T>(x:T): T; }
>f : Symbol(f, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 3))
>T : Symbol(T, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 11))
>x : Symbol(x, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 14))
>T : Symbol(T, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 11))
>T : Symbol(T, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 11))

var g : { <S>() : S[]; };
>g : Symbol(g, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 4, 3))
>S : Symbol(S, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 4, 11))
>S : Symbol(S, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 4, 11))

f = g;
>f : Symbol(f, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 3))
>g : Symbol(g, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 4, 3))

var s = f("str").toUpperCase();
>s : Symbol(s, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 7, 3))
>f("str").toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))
>f : Symbol(f, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 2, 3))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))

console.log(s);
>s : Symbol(s, Decl(genericFunctionCallSignatureReturnTypeMismatch.ts, 7, 3))

