=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/methodIsOk.ts ===
class C1 {
>C1 : C1

    async * f() {
>f : () => AsyncIterableIterator<any>
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMethodNameIsOk.ts ===
class C2 {
>C2 : C2

    async * await() {
>await : () => AsyncIterableIterator<any>
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldMethodNameIsOk.ts ===
class C3 {
>C3 : C3

    async * yield() {
>yield : () => AsyncIterableIterator<any>
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitParameterIsError.ts ===
class C4 {
>C4 : C4

    async * f(await) {
>f : () => any
>await : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldParameterIsError.ts ===
class C5 {
>C5 : C5

    async * f(yield) {
>f : () => any
>yield : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitInParameterInitializerIsError.ts ===
class C6 {
>C6 : C6

    async * f(a = await 1) {
>f : (a?: number) => AsyncIterableIterator<any>
>a : number
>await 1 : 1
>1 : 1
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInParameterInitializerIsError.ts ===
class C7 {
>C7 : C7

    async * f(a = yield) {
>f : (a?: any) => AsyncIterableIterator<any>
>a : any
>yield : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedAsyncGeneratorIsOk.ts ===
class C8 {
>C8 : C8

    async * f() {
>f : () => AsyncIterableIterator<any>

        async function * g() {
>g : () => AsyncIterableIterator<any>
        }
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedYieldIsError.ts ===
class C9 {
>C9 : C9

    async * f() {
>f : () => AsyncIterableIterator<() => void>

        function yield() {
> : () => any
>yield() {        } : any
>() {        } : () => void
        }
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedYieldIsError.ts ===
class C10 {
>C10 : C10

    async * f() {
>f : () => AsyncIterableIterator<() => void>

        const x = function yield() {
>x : () => any
>function : () => any
>yield() {        } : any
>() {        } : () => void

        };
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedAwaitIsError.ts ===
class C11 {
>C11 : C11

    async * f() {
>f : () => AsyncIterableIterator<any>

        function await() {
> : () => any
>await() : any
>() : any
> : any
        }
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedAwaitIsError.ts ===
class C12 {
>C12 : C12

    async * f() {
>f : () => AsyncIterableIterator<any>

        const x = function await() {
>x : () => any
>function : () => any
>await() : any
>() : any
> : any

        };
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldIsOk.ts ===
class C13 {
>C13 : C13

    async * f() {
>f : () => AsyncIterableIterator<any>

        yield;
>yield : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldWithValueIsOk.ts ===
class C14 {
>C14 : C14

    async * f() {
>f : () => AsyncIterableIterator<number>

        yield 1;
>yield 1 : any
>1 : 1
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarMissingValueIsError.ts ===
class C15 {
>C15 : C15

    async * f() {
>f : () => AsyncIterableIterator<any>

        yield *;
>yield * : any
> : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarWithValueIsOk.ts ===
class C16 {
>C16 : C16

    async * f() {
>f : () => AsyncIterableIterator<any>

        yield * [];
>yield * [] : any
>[] : undefined[]
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitWithValueIsOk.ts ===
class C17 {
>C17 : C17

    async * f() {
>f : () => AsyncIterableIterator<any>

        await 1;
>await 1 : 1
>1 : 1
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMissingValueIsError.ts ===
class C18 {
>C18 : C18

    async * f() {
>f : () => AsyncIterableIterator<any>

        await;
>await : any
> : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitAsTypeIsOk.ts ===
interface await {}
class C19 {
>C19 : C19

    async * f() {
>f : () => AsyncIterableIterator<any>

        let x: await;
>x : await
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldAsTypeIsStrictError.ts ===
interface yield {}
class C20 {
>C20 : C20

    async * f() {
>f : () => AsyncIterableIterator<any>

        let x: yield;
>x : yield
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInClassComputedPropertyIsError.ts ===
class C21 {
>C21 : C21

    async * [yield]() {
>[yield] : () => AsyncIterableIterator<any>
>yield : any
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInNestedComputedPropertyIsOk.ts ===
class C22 {
>C22 : C22

    async * f() {
>f : () => AsyncIterableIterator<any>

        const x = { [yield]: 1 };
>x : { [x: number]: number; }
>{ [yield]: 1 } : { [x: number]: number; }
>[yield] : number
>yield : any
>1 : 1
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorGetAccessorIsError.ts ===
class C23 {
>C23 : C23

    async * get x() {
>get : () => any
>x : () => number

        return 1;
>1 : 1
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorSetAccessorIsError.ts ===
class C24 {
>C24 : C24

    async * set x(value: number) {
>set : () => any
>x : (value: number) => void
>value : number
    }
}
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorPropertyIsError.ts ===
class C25 {
>C25 : C25

    async * x = 1;
>x : () => any
>1 : any
}
