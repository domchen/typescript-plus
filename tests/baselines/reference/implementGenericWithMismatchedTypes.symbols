=== tests/cases/compiler/implementGenericWithMismatchedTypes.ts ===
// no errors because in the derived types the best common type for T's value is Object
// and that matches the original signature for assignability since we treat its T's as Object

interface IFoo<T> {
>IFoo : Symbol(IFoo, Decl(implementGenericWithMismatchedTypes.ts, 0, 0))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 3, 15))

    foo(x: T): T;
>foo : Symbol(IFoo.foo, Decl(implementGenericWithMismatchedTypes.ts, 3, 19))
>x : Symbol(x, Decl(implementGenericWithMismatchedTypes.ts, 4, 8))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 3, 15))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 3, 15))
}
class C<T> implements IFoo<T> { // error
>C : Symbol(C, Decl(implementGenericWithMismatchedTypes.ts, 5, 1))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 6, 8))
>IFoo : Symbol(IFoo, Decl(implementGenericWithMismatchedTypes.ts, 0, 0))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 6, 8))

    foo(x: string): number {
>foo : Symbol(C.foo, Decl(implementGenericWithMismatchedTypes.ts, 6, 31))
>x : Symbol(x, Decl(implementGenericWithMismatchedTypes.ts, 7, 8))

        return null;
    }
}

interface IFoo2<T> {
>IFoo2 : Symbol(IFoo2, Decl(implementGenericWithMismatchedTypes.ts, 10, 1))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 12, 16))

    foo(x: T): T;
>foo : Symbol(IFoo2.foo, Decl(implementGenericWithMismatchedTypes.ts, 12, 20))
>x : Symbol(x, Decl(implementGenericWithMismatchedTypes.ts, 13, 8))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 12, 16))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 12, 16))
}
class C2<T> implements IFoo2<T> { // error
>C2 : Symbol(C2, Decl(implementGenericWithMismatchedTypes.ts, 14, 1))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 15, 9))
>IFoo2 : Symbol(IFoo2, Decl(implementGenericWithMismatchedTypes.ts, 10, 1))
>T : Symbol(T, Decl(implementGenericWithMismatchedTypes.ts, 15, 9))

    foo<Tstring>(x: Tstring): number {
>foo : Symbol(C2.foo, Decl(implementGenericWithMismatchedTypes.ts, 15, 33))
>Tstring : Symbol(Tstring, Decl(implementGenericWithMismatchedTypes.ts, 16, 8))
>x : Symbol(x, Decl(implementGenericWithMismatchedTypes.ts, 16, 17))
>Tstring : Symbol(Tstring, Decl(implementGenericWithMismatchedTypes.ts, 16, 8))

        return null;
    }
}
