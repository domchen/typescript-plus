=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/typeParameterAssignability3.ts ===
// type parameters are not assignable to one another unless directly or indirectly constrained to one another

class Foo { foo: string; }
>Foo : Symbol(Foo, Decl(typeParameterAssignability3.ts, 0, 0))
>foo : Symbol(Foo.foo, Decl(typeParameterAssignability3.ts, 2, 11))

function foo<T extends Foo, U extends Foo>(t: T, u: U) {
>foo : Symbol(foo, Decl(typeParameterAssignability3.ts, 2, 26))
>T : Symbol(T, Decl(typeParameterAssignability3.ts, 4, 13))
>Foo : Symbol(Foo, Decl(typeParameterAssignability3.ts, 0, 0))
>U : Symbol(U, Decl(typeParameterAssignability3.ts, 4, 27))
>Foo : Symbol(Foo, Decl(typeParameterAssignability3.ts, 0, 0))
>t : Symbol(t, Decl(typeParameterAssignability3.ts, 4, 43))
>T : Symbol(T, Decl(typeParameterAssignability3.ts, 4, 13))
>u : Symbol(u, Decl(typeParameterAssignability3.ts, 4, 48))
>U : Symbol(U, Decl(typeParameterAssignability3.ts, 4, 27))

    var a: T;
>a : Symbol(a, Decl(typeParameterAssignability3.ts, 5, 7))
>T : Symbol(T, Decl(typeParameterAssignability3.ts, 4, 13))

    var b: U;
>b : Symbol(b, Decl(typeParameterAssignability3.ts, 6, 7))
>U : Symbol(U, Decl(typeParameterAssignability3.ts, 4, 27))

    t = a; // ok
>t : Symbol(t, Decl(typeParameterAssignability3.ts, 4, 43))
>a : Symbol(a, Decl(typeParameterAssignability3.ts, 5, 7))

    a = t; // ok
>a : Symbol(a, Decl(typeParameterAssignability3.ts, 5, 7))
>t : Symbol(t, Decl(typeParameterAssignability3.ts, 4, 43))

    b = u; // ok
>b : Symbol(b, Decl(typeParameterAssignability3.ts, 6, 7))
>u : Symbol(u, Decl(typeParameterAssignability3.ts, 4, 48))

    u = b; // ok
>u : Symbol(u, Decl(typeParameterAssignability3.ts, 4, 48))
>b : Symbol(b, Decl(typeParameterAssignability3.ts, 6, 7))

    t = u; // error
>t : Symbol(t, Decl(typeParameterAssignability3.ts, 4, 43))
>u : Symbol(u, Decl(typeParameterAssignability3.ts, 4, 48))

    u = t; // error
>u : Symbol(u, Decl(typeParameterAssignability3.ts, 4, 48))
>t : Symbol(t, Decl(typeParameterAssignability3.ts, 4, 43))
}

class C<T extends Foo, U extends Foo> {
>C : Symbol(C, Decl(typeParameterAssignability3.ts, 15, 1))
>T : Symbol(T, Decl(typeParameterAssignability3.ts, 17, 8))
>Foo : Symbol(Foo, Decl(typeParameterAssignability3.ts, 0, 0))
>U : Symbol(U, Decl(typeParameterAssignability3.ts, 17, 22))
>Foo : Symbol(Foo, Decl(typeParameterAssignability3.ts, 0, 0))

    t: T;
>t : Symbol(C.t, Decl(typeParameterAssignability3.ts, 17, 39))
>T : Symbol(T, Decl(typeParameterAssignability3.ts, 17, 8))

    u: U;
>u : Symbol(C.u, Decl(typeParameterAssignability3.ts, 18, 9))
>U : Symbol(U, Decl(typeParameterAssignability3.ts, 17, 22))

    r = () => {
>r : Symbol(C.r, Decl(typeParameterAssignability3.ts, 19, 9))

        this.t = this.u; // error
>this.t : Symbol(C.t, Decl(typeParameterAssignability3.ts, 17, 39))
>this : Symbol(C, Decl(typeParameterAssignability3.ts, 15, 1))
>t : Symbol(C.t, Decl(typeParameterAssignability3.ts, 17, 39))
>this.u : Symbol(C.u, Decl(typeParameterAssignability3.ts, 18, 9))
>this : Symbol(C, Decl(typeParameterAssignability3.ts, 15, 1))
>u : Symbol(C.u, Decl(typeParameterAssignability3.ts, 18, 9))

        this.u = this.t; // error
>this.u : Symbol(C.u, Decl(typeParameterAssignability3.ts, 18, 9))
>this : Symbol(C, Decl(typeParameterAssignability3.ts, 15, 1))
>u : Symbol(C.u, Decl(typeParameterAssignability3.ts, 18, 9))
>this.t : Symbol(C.t, Decl(typeParameterAssignability3.ts, 17, 39))
>this : Symbol(C, Decl(typeParameterAssignability3.ts, 15, 1))
>t : Symbol(C.t, Decl(typeParameterAssignability3.ts, 17, 39))
    }
}
