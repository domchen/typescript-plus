// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async-iteration.js 1`] = `

async function * a() {
    yield* b();
}

class X {
    async * b() {
        yield* a();
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
async function* a() {
  yield* b();
}

class X {
  async *b() {
    yield* a();
  }
}

`;

exports[`await_parse.js 1`] = `
async function f() { (await f()).length }
async function g() {
  invariant(
    (await driver.navigator.getUrl()).substr(-7)
  );
}
function *f(){
  !(yield a);
}
async function f() {
  a = !await f();
}
async () => {
  new A(await x);
  obj[await x];
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
async function f() {
  (await f()).length;
}
async function g() {
  invariant((await driver.navigator.getUrl()).substr(-7));
}
function* f() {
  !(yield a);
}
async function f() {
  a = !(await f());
}
async () => {
  new A(await x);
  obj[await x];
};

`;

exports[`conditional-expression.js 1`] = `
async function f() {
  const result = typeof fn === 'function' ? await fn() : null;
}

(async function() {
  console.log(
    await (true ? Promise.resolve("A") : Promise.resolve("B"))
  );
})()

async function f() {
  await (spellcheck && spellcheck.setChecking(false));
  await spellcheck && spellcheck.setChecking(false)
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
async function f() {
  const result = typeof fn === "function" ? await fn() : null;
}

(async function() {
  console.log(await (true ? Promise.resolve("A") : Promise.resolve("B")));
})();

async function f() {
  await (spellcheck && spellcheck.setChecking(false));
  (await spellcheck) && spellcheck.setChecking(false);
}

`;

exports[`parens.js 1`] = `
async function *f(){ await (yield x); }

async function f(){ await (() => {}); }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
async function* f() {
  await (yield x);
}

async function f() {
  await (() => {});
}

`;
