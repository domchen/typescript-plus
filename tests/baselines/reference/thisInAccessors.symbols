=== tests/cases/compiler/thisInAccessors.ts ===
// this capture only in getter
class GetterOnly {
>GetterOnly : Symbol(GetterOnly, Decl(thisInAccessors.ts, 0, 0))

    get Value() {
>Value : Symbol(GetterOnly.Value, Decl(thisInAccessors.ts, 1, 18), Decl(thisInAccessors.ts, 5, 5))

        var fn = () => this;
>fn : Symbol(fn, Decl(thisInAccessors.ts, 3, 11))
>this : Symbol(GetterOnly, Decl(thisInAccessors.ts, 0, 0))

        return '';
    }
    set Value(val) {
>Value : Symbol(GetterOnly.Value, Decl(thisInAccessors.ts, 1, 18), Decl(thisInAccessors.ts, 5, 5))
>val : Symbol(val, Decl(thisInAccessors.ts, 6, 14))
    }
}

// this capture only in setter
class SetterOnly {
>SetterOnly : Symbol(SetterOnly, Decl(thisInAccessors.ts, 8, 1))

    get Value() {
>Value : Symbol(SetterOnly.Value, Decl(thisInAccessors.ts, 11, 18), Decl(thisInAccessors.ts, 14, 5))

        return '';
    }
    set Value(val) {
>Value : Symbol(SetterOnly.Value, Decl(thisInAccessors.ts, 11, 18), Decl(thisInAccessors.ts, 14, 5))
>val : Symbol(val, Decl(thisInAccessors.ts, 15, 14))

        var fn = () => this;
>fn : Symbol(fn, Decl(thisInAccessors.ts, 16, 11))
>this : Symbol(SetterOnly, Decl(thisInAccessors.ts, 8, 1))
    }
}

// this capture only in both setter and getter
class GetterAndSetter {
>GetterAndSetter : Symbol(GetterAndSetter, Decl(thisInAccessors.ts, 18, 1))

    get Value() {
>Value : Symbol(GetterAndSetter.Value, Decl(thisInAccessors.ts, 21, 23), Decl(thisInAccessors.ts, 25, 5))

        var fn = () => this;
>fn : Symbol(fn, Decl(thisInAccessors.ts, 23, 11))
>this : Symbol(GetterAndSetter, Decl(thisInAccessors.ts, 18, 1))

        return '';
    }
    set Value(val) {
>Value : Symbol(GetterAndSetter.Value, Decl(thisInAccessors.ts, 21, 23), Decl(thisInAccessors.ts, 25, 5))
>val : Symbol(val, Decl(thisInAccessors.ts, 26, 14))

        var fn = () => this;
>fn : Symbol(fn, Decl(thisInAccessors.ts, 27, 11))
>this : Symbol(GetterAndSetter, Decl(thisInAccessors.ts, 18, 1))
    }
}
