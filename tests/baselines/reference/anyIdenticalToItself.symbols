=== tests/cases/compiler/anyIdenticalToItself.ts ===
function foo(x: any);
>foo : Symbol(foo, Decl(anyIdenticalToItself.ts, 0, 0), Decl(anyIdenticalToItself.ts, 0, 21), Decl(anyIdenticalToItself.ts, 1, 21))
>x : Symbol(x, Decl(anyIdenticalToItself.ts, 0, 13))

function foo(x: any);
>foo : Symbol(foo, Decl(anyIdenticalToItself.ts, 0, 0), Decl(anyIdenticalToItself.ts, 0, 21), Decl(anyIdenticalToItself.ts, 1, 21))
>x : Symbol(x, Decl(anyIdenticalToItself.ts, 1, 13))

function foo(x: any, y: number) { }
>foo : Symbol(foo, Decl(anyIdenticalToItself.ts, 0, 0), Decl(anyIdenticalToItself.ts, 0, 21), Decl(anyIdenticalToItself.ts, 1, 21))
>x : Symbol(x, Decl(anyIdenticalToItself.ts, 2, 13))
>y : Symbol(y, Decl(anyIdenticalToItself.ts, 2, 20))

class C {
>C : Symbol(C, Decl(anyIdenticalToItself.ts, 2, 35))

    get X(): any {
>X : Symbol(C.X, Decl(anyIdenticalToItself.ts, 4, 9), Decl(anyIdenticalToItself.ts, 8, 5))

        var y: any;
>y : Symbol(y, Decl(anyIdenticalToItself.ts, 6, 11))

        return y;
>y : Symbol(y, Decl(anyIdenticalToItself.ts, 6, 11))
    }
    set X(v: any) {
>X : Symbol(C.X, Decl(anyIdenticalToItself.ts, 4, 9), Decl(anyIdenticalToItself.ts, 8, 5))
>v : Symbol(v, Decl(anyIdenticalToItself.ts, 9, 10))
    }
}
