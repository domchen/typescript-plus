=== tests/cases/compiler/promiseIdentity2.ts ===
export interface IPromise<T, V> {
>IPromise : IPromise<T, V>
>T : T
>V : V

    then<U, W>(callback: (x: T) => IPromise<U, W>): IPromise<U, W>;
>then : <U, W>(callback: (x: T) => IPromise<U, W>) => IPromise<U, W>
>U : U
>W : W
>callback : (x: T) => IPromise<U, W>
>x : T
>T : T
>IPromise : IPromise<T, V>
>U : U
>W : W
>IPromise : IPromise<T, V>
>U : U
>W : W
}
export interface Promise<T, V> {
>Promise : Promise<T, V>
>T : T
>V : V

    then<U, W>(callback: (x: T) => Promise<T, U>): Promise<T, W>;
>then : <U, W>(callback: (x: T) => Promise<T, U>) => Promise<T, W>
>U : U
>W : W
>callback : (x: T) => Promise<T, U>
>x : T
>T : T
>Promise : Promise<T, V>
>T : T
>U : U
>Promise : Promise<T, V>
>T : T
>W : W
}

// error because T is string in the first declaration, and T is boolean in the second
// Return type and callback return type are ok because T is any in this particular Promise
var x: IPromise<string, number>;
>x : IPromise<string, number>
>IPromise : IPromise<T, V>

var x: Promise<any, string>;
>x : IPromise<string, number>
>Promise : Promise<T, V>

