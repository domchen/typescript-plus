=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations2.ts ===
class A {
>A : Symbol(A, Decl(classAbstractInstantiations2.ts, 0, 0))

    // ...
}

abstract class B {
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

    foo(): number { return this.bar(); }
>foo : Symbol(B.foo, Decl(classAbstractInstantiations2.ts, 4, 18))
>this.bar : Symbol(B.bar, Decl(classAbstractInstantiations2.ts, 5, 40))
>this : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))
>bar : Symbol(B.bar, Decl(classAbstractInstantiations2.ts, 5, 40))

    abstract bar() : number;
>bar : Symbol(B.bar, Decl(classAbstractInstantiations2.ts, 5, 40))
}

new B; // error
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

var BB: typeof B = B;
>BB : Symbol(BB, Decl(classAbstractInstantiations2.ts, 11, 3), Decl(classAbstractInstantiations2.ts, 19, 3))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

var AA: typeof A = BB; // error, AA is not of abstract type.
>AA : Symbol(AA, Decl(classAbstractInstantiations2.ts, 12, 3))
>A : Symbol(A, Decl(classAbstractInstantiations2.ts, 0, 0))
>BB : Symbol(BB, Decl(classAbstractInstantiations2.ts, 11, 3), Decl(classAbstractInstantiations2.ts, 19, 3))

new AA;
>AA : Symbol(AA, Decl(classAbstractInstantiations2.ts, 12, 3))

function constructB(Factory : typeof B) {
>constructB : Symbol(constructB, Decl(classAbstractInstantiations2.ts, 13, 7))
>Factory : Symbol(Factory, Decl(classAbstractInstantiations2.ts, 15, 20))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

    new Factory; // error -- Factory is of type typeof B.
>Factory : Symbol(Factory, Decl(classAbstractInstantiations2.ts, 15, 20))
}

var BB = B;
>BB : Symbol(BB, Decl(classAbstractInstantiations2.ts, 11, 3), Decl(classAbstractInstantiations2.ts, 19, 3))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

new BB; // error -- BB is of type typeof B.
>BB : Symbol(BB, Decl(classAbstractInstantiations2.ts, 11, 3), Decl(classAbstractInstantiations2.ts, 19, 3))

var x : any = C;
>x : Symbol(x, Decl(classAbstractInstantiations2.ts, 22, 3))
>C : Symbol(C, Decl(classAbstractInstantiations2.ts, 23, 6))

new x; // okay -- undefined behavior at runtime
>x : Symbol(x, Decl(classAbstractInstantiations2.ts, 22, 3))

class C extends B { } // error -- not declared abstract
>C : Symbol(C, Decl(classAbstractInstantiations2.ts, 23, 6))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

abstract class D extends B { } // okay
>D : Symbol(D, Decl(classAbstractInstantiations2.ts, 25, 21))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

class E extends B { // okay -- implements abstract method
>E : Symbol(E, Decl(classAbstractInstantiations2.ts, 27, 30))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

    bar() { return 1; }
>bar : Symbol(E.bar, Decl(classAbstractInstantiations2.ts, 29, 19))
}

abstract class F extends B {
>F : Symbol(F, Decl(classAbstractInstantiations2.ts, 31, 1))
>B : Symbol(B, Decl(classAbstractInstantiations2.ts, 2, 1))

    abstract foo() : number;
>foo : Symbol(F.foo, Decl(classAbstractInstantiations2.ts, 33, 28))

    bar() { return 2; }
>bar : Symbol(F.bar, Decl(classAbstractInstantiations2.ts, 34, 28))
}

abstract class G {
>G : Symbol(G, Decl(classAbstractInstantiations2.ts, 36, 1))

    abstract qux(x : number) : string;
>qux : Symbol(G.qux, Decl(classAbstractInstantiations2.ts, 38, 18), Decl(classAbstractInstantiations2.ts, 39, 38))
>x : Symbol(x, Decl(classAbstractInstantiations2.ts, 39, 17))

    abstract qux() : number;
>qux : Symbol(G.qux, Decl(classAbstractInstantiations2.ts, 38, 18), Decl(classAbstractInstantiations2.ts, 39, 38))

    y : number;
>y : Symbol(G.y, Decl(classAbstractInstantiations2.ts, 40, 28))

    abstract quz(x : number, y : string) : boolean; // error -- declarations must be adjacent
>quz : Symbol(G.quz, Decl(classAbstractInstantiations2.ts, 41, 15))
>x : Symbol(x, Decl(classAbstractInstantiations2.ts, 42, 17))
>y : Symbol(y, Decl(classAbstractInstantiations2.ts, 42, 28))

    abstract nom(): boolean;
>nom : Symbol(G.nom, Decl(classAbstractInstantiations2.ts, 42, 51), Decl(classAbstractInstantiations2.ts, 44, 28))

    nom(x : number): boolean; // error -- use of modifier abstract must match on all overloads.
>nom : Symbol(G.nom, Decl(classAbstractInstantiations2.ts, 42, 51), Decl(classAbstractInstantiations2.ts, 44, 28))
>x : Symbol(x, Decl(classAbstractInstantiations2.ts, 45, 8))
}

class H { // error -- not declared abstract
>H : Symbol(H, Decl(classAbstractInstantiations2.ts, 46, 1))

    abstract baz() : number;
>baz : Symbol(H.baz, Decl(classAbstractInstantiations2.ts, 48, 9))
}
