=== tests/cases/compiler/constraints0.ts ===
interface A {
>A : Symbol(A, Decl(constraints0.ts, 0, 0))

	a: number;
>a : Symbol(A.a, Decl(constraints0.ts, 0, 13))
}

interface B {
>B : Symbol(B, Decl(constraints0.ts, 2, 1))

	b: string;
>b : Symbol(B.b, Decl(constraints0.ts, 4, 13))
}

interface C<T extends A> {
>C : Symbol(C, Decl(constraints0.ts, 6, 1))
>T : Symbol(T, Decl(constraints0.ts, 8, 12))
>A : Symbol(A, Decl(constraints0.ts, 0, 0))

    x: T;
>x : Symbol(C.x, Decl(constraints0.ts, 8, 26))
>T : Symbol(T, Decl(constraints0.ts, 8, 12))
}

var v1: C<A>; // should work
>v1 : Symbol(v1, Decl(constraints0.ts, 12, 3))
>C : Symbol(C, Decl(constraints0.ts, 6, 1))
>A : Symbol(A, Decl(constraints0.ts, 0, 0))

var v2: C<B>; // should not work
>v2 : Symbol(v2, Decl(constraints0.ts, 13, 3))
>C : Symbol(C, Decl(constraints0.ts, 6, 1))
>B : Symbol(B, Decl(constraints0.ts, 2, 1))

var y = v1.x.a; // 'a' should be of type 'number'
>y : Symbol(y, Decl(constraints0.ts, 15, 3))
>v1.x.a : Symbol(A.a, Decl(constraints0.ts, 0, 13))
>v1.x : Symbol(C.x, Decl(constraints0.ts, 8, 26))
>v1 : Symbol(v1, Decl(constraints0.ts, 12, 3))
>x : Symbol(C.x, Decl(constraints0.ts, 8, 26))
>a : Symbol(A.a, Decl(constraints0.ts, 0, 13))

