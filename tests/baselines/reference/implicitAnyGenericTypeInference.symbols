=== tests/cases/compiler/implicitAnyGenericTypeInference.ts ===
interface Comparer<T> {
>Comparer : Symbol(Comparer, Decl(implicitAnyGenericTypeInference.ts, 0, 0))
>T : Symbol(T, Decl(implicitAnyGenericTypeInference.ts, 0, 19))

    compareTo<U>(x: T, y: U): U;
>compareTo : Symbol(Comparer.compareTo, Decl(implicitAnyGenericTypeInference.ts, 0, 23))
>U : Symbol(U, Decl(implicitAnyGenericTypeInference.ts, 1, 14))
>x : Symbol(x, Decl(implicitAnyGenericTypeInference.ts, 1, 17))
>T : Symbol(T, Decl(implicitAnyGenericTypeInference.ts, 0, 19))
>y : Symbol(y, Decl(implicitAnyGenericTypeInference.ts, 1, 22))
>U : Symbol(U, Decl(implicitAnyGenericTypeInference.ts, 1, 14))
>U : Symbol(U, Decl(implicitAnyGenericTypeInference.ts, 1, 14))
}

var c: Comparer<any>;
>c : Symbol(c, Decl(implicitAnyGenericTypeInference.ts, 4, 3))
>Comparer : Symbol(Comparer, Decl(implicitAnyGenericTypeInference.ts, 0, 0))

c = { compareTo: (x, y) => { return y; } };
>c : Symbol(c, Decl(implicitAnyGenericTypeInference.ts, 4, 3))
>compareTo : Symbol(compareTo, Decl(implicitAnyGenericTypeInference.ts, 5, 5))
>x : Symbol(x, Decl(implicitAnyGenericTypeInference.ts, 5, 18))
>y : Symbol(y, Decl(implicitAnyGenericTypeInference.ts, 5, 20))
>y : Symbol(y, Decl(implicitAnyGenericTypeInference.ts, 5, 20))

var r = c.compareTo(1, '');
>r : Symbol(r, Decl(implicitAnyGenericTypeInference.ts, 6, 3))
>c.compareTo : Symbol(Comparer.compareTo, Decl(implicitAnyGenericTypeInference.ts, 0, 23))
>c : Symbol(c, Decl(implicitAnyGenericTypeInference.ts, 4, 3))
>compareTo : Symbol(Comparer.compareTo, Decl(implicitAnyGenericTypeInference.ts, 0, 23))

