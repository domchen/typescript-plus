=== tests/cases/conformance/jsx/inline/renderer.d.ts ===
export namespace dom {
>dom : Symbol(dom, Decl(renderer.d.ts, 17, 1), Decl(renderer.d.ts, 0, 0))

    namespace JSX {
>JSX : Symbol(JSX, Decl(renderer.d.ts, 0, 22))

        interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(renderer.d.ts, 1, 19))

            [e: string]: {};
>e : Symbol(e, Decl(renderer.d.ts, 3, 13))
        }
        interface Element {
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))

            __domBrand: void;
>__domBrand : Symbol(Element.__domBrand, Decl(renderer.d.ts, 5, 27))

            props: {
>props : Symbol(Element.props, Decl(renderer.d.ts, 6, 29))

                children?: Element[];
>children : Symbol(children, Decl(renderer.d.ts, 7, 20))
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))

            };
        }
        interface ElementClass extends Element {
>ElementClass : Symbol(ElementClass, Decl(renderer.d.ts, 10, 9))
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))

            render(): Element;
>render : Symbol(ElementClass.render, Decl(renderer.d.ts, 11, 48))
>Element : Symbol(Element, Decl(renderer.d.ts, 4, 9))
        }
        interface ElementAttributesProperty { props: any; }
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(renderer.d.ts, 13, 9))
>props : Symbol(ElementAttributesProperty.props, Decl(renderer.d.ts, 14, 45))

        interface ElementChildrenAttribute { children: any; }
>ElementChildrenAttribute : Symbol(ElementChildrenAttribute, Decl(renderer.d.ts, 14, 59))
>children : Symbol(ElementChildrenAttribute.children, Decl(renderer.d.ts, 15, 44))
    }
}
export function dom(): dom.JSX.Element;
>dom : Symbol(dom, Decl(renderer.d.ts, 17, 1), Decl(renderer.d.ts, 0, 0))
>dom : Symbol(dom, Decl(renderer.d.ts, 17, 1), Decl(renderer.d.ts, 0, 0))
>JSX : Symbol(dom.JSX, Decl(renderer.d.ts, 0, 22))
>Element : Symbol(dom.JSX.Element, Decl(renderer.d.ts, 4, 9))

=== tests/cases/conformance/jsx/inline/renderer2.d.ts ===
export namespace predom {
>predom : Symbol(predom, Decl(renderer2.d.ts, 17, 1), Decl(renderer2.d.ts, 0, 0))

    namespace JSX {
>JSX : Symbol(JSX, Decl(renderer2.d.ts, 0, 25))

        interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

            [e: string]: {};
>e : Symbol(e, Decl(renderer2.d.ts, 3, 13))
        }
        interface Element {
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))

            __predomBrand: void;
>__predomBrand : Symbol(Element.__predomBrand, Decl(renderer2.d.ts, 5, 27))

            props: {
>props : Symbol(Element.props, Decl(renderer2.d.ts, 6, 32))

                children?: Element[];
>children : Symbol(children, Decl(renderer2.d.ts, 7, 20))
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))

            };
        }
        interface ElementClass extends Element {
>ElementClass : Symbol(ElementClass, Decl(renderer2.d.ts, 10, 9))
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))

            render(): Element;
>render : Symbol(ElementClass.render, Decl(renderer2.d.ts, 11, 48))
>Element : Symbol(Element, Decl(renderer2.d.ts, 4, 9))
        }
        interface ElementAttributesProperty { props: any; }
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(renderer2.d.ts, 13, 9))
>props : Symbol(ElementAttributesProperty.props, Decl(renderer2.d.ts, 14, 45))

        interface ElementChildrenAttribute { children: any; }
>ElementChildrenAttribute : Symbol(ElementChildrenAttribute, Decl(renderer2.d.ts, 14, 59))
>children : Symbol(ElementChildrenAttribute.children, Decl(renderer2.d.ts, 15, 44))
    }
}
export function predom(): predom.JSX.Element;
>predom : Symbol(predom, Decl(renderer2.d.ts, 17, 1), Decl(renderer2.d.ts, 0, 0))
>predom : Symbol(predom, Decl(renderer2.d.ts, 17, 1), Decl(renderer2.d.ts, 0, 0))
>JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))

=== tests/cases/conformance/jsx/inline/component.tsx ===
/** @jsx predom */
import { predom } from "./renderer2"
>predom : Symbol(predom, Decl(component.tsx, 1, 8))

export const MySFC = (props: {x: number, y: number, children?: predom.JSX.Element[]}) => <p>{props.x} + {props.y} = {props.x + props.y}{...this.props.children}</p>;
>MySFC : Symbol(MySFC, Decl(component.tsx, 3, 12))
>props : Symbol(props, Decl(component.tsx, 3, 22))
>x : Symbol(x, Decl(component.tsx, 3, 30))
>y : Symbol(y, Decl(component.tsx, 3, 40))
>children : Symbol(children, Decl(component.tsx, 3, 51))
>predom : Symbol(predom, Decl(component.tsx, 1, 8))
>JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))
>p : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))
>props.x : Symbol(x, Decl(component.tsx, 3, 30))
>props : Symbol(props, Decl(component.tsx, 3, 22))
>x : Symbol(x, Decl(component.tsx, 3, 30))
>props.y : Symbol(y, Decl(component.tsx, 3, 40))
>props : Symbol(props, Decl(component.tsx, 3, 22))
>y : Symbol(y, Decl(component.tsx, 3, 40))
>props.x : Symbol(x, Decl(component.tsx, 3, 30))
>props : Symbol(props, Decl(component.tsx, 3, 22))
>x : Symbol(x, Decl(component.tsx, 3, 30))
>props.y : Symbol(y, Decl(component.tsx, 3, 40))
>props : Symbol(props, Decl(component.tsx, 3, 22))
>y : Symbol(y, Decl(component.tsx, 3, 40))
>p : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

export class MyClass implements predom.JSX.Element {
>MyClass : Symbol(MyClass, Decl(component.tsx, 3, 164))
>predom.JSX.Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))
>predom.JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>predom : Symbol(predom, Decl(component.tsx, 1, 8))
>JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))

    __predomBrand!: void;
>__predomBrand : Symbol(MyClass.__predomBrand, Decl(component.tsx, 5, 52))

    constructor(public props: {x: number, y: number, children?: predom.JSX.Element[]}) {}
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>x : Symbol(x, Decl(component.tsx, 7, 31))
>y : Symbol(y, Decl(component.tsx, 7, 41))
>children : Symbol(children, Decl(component.tsx, 7, 52))
>predom : Symbol(predom, Decl(component.tsx, 1, 8))
>JSX : Symbol(predom.JSX, Decl(renderer2.d.ts, 0, 25))
>Element : Symbol(predom.JSX.Element, Decl(renderer2.d.ts, 4, 9))

    render() {
>render : Symbol(MyClass.render, Decl(component.tsx, 7, 89))

        return <p>
>p : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

            {this.props.x} + {this.props.y} = {this.props.x + this.props.y}
>this.props.x : Symbol(x, Decl(component.tsx, 7, 31))
>this.props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>this : Symbol(MyClass, Decl(component.tsx, 3, 164))
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>x : Symbol(x, Decl(component.tsx, 7, 31))
>this.props.y : Symbol(y, Decl(component.tsx, 7, 41))
>this.props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>this : Symbol(MyClass, Decl(component.tsx, 3, 164))
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>y : Symbol(y, Decl(component.tsx, 7, 41))
>this.props.x : Symbol(x, Decl(component.tsx, 7, 31))
>this.props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>this : Symbol(MyClass, Decl(component.tsx, 3, 164))
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>x : Symbol(x, Decl(component.tsx, 7, 31))
>this.props.y : Symbol(y, Decl(component.tsx, 7, 41))
>this.props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>this : Symbol(MyClass, Decl(component.tsx, 3, 164))
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>y : Symbol(y, Decl(component.tsx, 7, 41))

            {...this.props.children}
>this.props.children : Symbol(children, Decl(component.tsx, 7, 52))
>this.props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>this : Symbol(MyClass, Decl(component.tsx, 3, 164))
>props : Symbol(MyClass.props, Decl(component.tsx, 7, 16))
>children : Symbol(children, Decl(component.tsx, 7, 52))

        </p>;
>p : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))
    }
}
export const tree = <MySFC x={1} y={2}><MyClass x={3} y={4} /><MyClass x={5} y={6} /></MySFC>
>tree : Symbol(tree, Decl(component.tsx, 15, 12))
>MySFC : Symbol(MySFC, Decl(component.tsx, 3, 12))
>x : Symbol(x, Decl(component.tsx, 15, 26))
>y : Symbol(y, Decl(component.tsx, 15, 32))
>MyClass : Symbol(MyClass, Decl(component.tsx, 3, 164))
>x : Symbol(x, Decl(component.tsx, 15, 47))
>y : Symbol(y, Decl(component.tsx, 15, 53))
>MyClass : Symbol(MyClass, Decl(component.tsx, 3, 164))
>x : Symbol(x, Decl(component.tsx, 15, 70))
>y : Symbol(y, Decl(component.tsx, 15, 76))
>MySFC : Symbol(MySFC, Decl(component.tsx, 3, 12))

export default <h></h>
>h : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))
>h : Symbol(predom.JSX.IntrinsicElements, Decl(renderer2.d.ts, 1, 19))

=== tests/cases/conformance/jsx/inline/index.tsx ===
/** @jsx dom */
import { dom } from "./renderer"
>dom : Symbol(dom, Decl(index.tsx, 1, 8))

import prerendered, {MySFC, MyClass, tree} from "./component";
>prerendered : Symbol(prerendered, Decl(index.tsx, 2, 6))
>MySFC : Symbol(MySFC, Decl(index.tsx, 2, 21))
>MyClass : Symbol(MyClass, Decl(index.tsx, 2, 27))
>tree : Symbol(tree, Decl(index.tsx, 2, 36))

let elem = prerendered;
>elem : Symbol(elem, Decl(index.tsx, 3, 3))
>prerendered : Symbol(prerendered, Decl(index.tsx, 2, 6))

elem = <h></h>; // Expect assignability error here
>elem : Symbol(elem, Decl(index.tsx, 3, 3))
>h : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))
>h : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))

const DOMSFC = (props: {x: number, y: number, children?: dom.JSX.Element[]}) => <p>{props.x} + {props.y} = {props.x + props.y}{props.children}</p>;
>DOMSFC : Symbol(DOMSFC, Decl(index.tsx, 6, 5))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>x : Symbol(x, Decl(index.tsx, 6, 24))
>y : Symbol(y, Decl(index.tsx, 6, 34))
>children : Symbol(children, Decl(index.tsx, 6, 45))
>dom : Symbol(dom, Decl(index.tsx, 1, 8))
>JSX : Symbol(dom.JSX, Decl(renderer.d.ts, 0, 22))
>Element : Symbol(dom.JSX.Element, Decl(renderer.d.ts, 4, 9))
>p : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))
>props.x : Symbol(x, Decl(index.tsx, 6, 24))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>x : Symbol(x, Decl(index.tsx, 6, 24))
>props.y : Symbol(y, Decl(index.tsx, 6, 34))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>y : Symbol(y, Decl(index.tsx, 6, 34))
>props.x : Symbol(x, Decl(index.tsx, 6, 24))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>x : Symbol(x, Decl(index.tsx, 6, 24))
>props.y : Symbol(y, Decl(index.tsx, 6, 34))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>y : Symbol(y, Decl(index.tsx, 6, 34))
>props.children : Symbol(children, Decl(index.tsx, 6, 45))
>props : Symbol(props, Decl(index.tsx, 6, 16))
>children : Symbol(children, Decl(index.tsx, 6, 45))
>p : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))

class DOMClass implements dom.JSX.Element {
>DOMClass : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>dom.JSX.Element : Symbol(dom.JSX.Element, Decl(renderer.d.ts, 4, 9))
>dom.JSX : Symbol(dom.JSX, Decl(renderer.d.ts, 0, 22))
>dom : Symbol(dom, Decl(index.tsx, 1, 8))
>JSX : Symbol(dom.JSX, Decl(renderer.d.ts, 0, 22))
>Element : Symbol(dom.JSX.Element, Decl(renderer.d.ts, 4, 9))

    __domBrand!: void;
>__domBrand : Symbol(DOMClass.__domBrand, Decl(index.tsx, 8, 43))

    constructor(public props: {x: number, y: number, children?: dom.JSX.Element[]}) {}
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>x : Symbol(x, Decl(index.tsx, 10, 31))
>y : Symbol(y, Decl(index.tsx, 10, 41))
>children : Symbol(children, Decl(index.tsx, 10, 52))
>dom : Symbol(dom, Decl(index.tsx, 1, 8))
>JSX : Symbol(dom.JSX, Decl(renderer.d.ts, 0, 22))
>Element : Symbol(dom.JSX.Element, Decl(renderer.d.ts, 4, 9))

    render() {
>render : Symbol(DOMClass.render, Decl(index.tsx, 10, 86))

        return <p>{this.props.x} + {this.props.y} = {this.props.x + this.props.y}{...this.props.children}</p>;
>p : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))
>this.props.x : Symbol(x, Decl(index.tsx, 10, 31))
>this.props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>this : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>x : Symbol(x, Decl(index.tsx, 10, 31))
>this.props.y : Symbol(y, Decl(index.tsx, 10, 41))
>this.props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>this : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>y : Symbol(y, Decl(index.tsx, 10, 41))
>this.props.x : Symbol(x, Decl(index.tsx, 10, 31))
>this.props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>this : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>x : Symbol(x, Decl(index.tsx, 10, 31))
>this.props.y : Symbol(y, Decl(index.tsx, 10, 41))
>this.props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>this : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>y : Symbol(y, Decl(index.tsx, 10, 41))
>this.props.children : Symbol(children, Decl(index.tsx, 10, 52))
>this.props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>this : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>props : Symbol(DOMClass.props, Decl(index.tsx, 10, 16))
>children : Symbol(children, Decl(index.tsx, 10, 52))
>p : Symbol(dom.JSX.IntrinsicElements, Decl(renderer.d.ts, 1, 19))
    }
}

// Should work, everything is a DOM element
const _tree = <DOMSFC x={1} y={2}><DOMClass x={3} y={4} /><DOMClass x={5} y={6} /></DOMSFC>
>_tree : Symbol(_tree, Decl(index.tsx, 17, 5))
>DOMSFC : Symbol(DOMSFC, Decl(index.tsx, 6, 5))
>x : Symbol(x, Decl(index.tsx, 17, 21))
>y : Symbol(y, Decl(index.tsx, 17, 27))
>DOMClass : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>x : Symbol(x, Decl(index.tsx, 17, 43))
>y : Symbol(y, Decl(index.tsx, 17, 49))
>DOMClass : Symbol(DOMClass, Decl(index.tsx, 6, 147))
>x : Symbol(x, Decl(index.tsx, 17, 67))
>y : Symbol(y, Decl(index.tsx, 17, 73))
>DOMSFC : Symbol(DOMSFC, Decl(index.tsx, 6, 5))

// Should fail, no dom elements
const _brokenTree = <MySFC x={1} y={2}><MyClass x={3} y={4} /><MyClass x={5} y={6} /></MySFC>
>_brokenTree : Symbol(_brokenTree, Decl(index.tsx, 20, 5))
>MySFC : Symbol(MySFC, Decl(index.tsx, 2, 21))
>x : Symbol(x, Decl(index.tsx, 20, 26))
>y : Symbol(y, Decl(index.tsx, 20, 32))
>MyClass : Symbol(MyClass, Decl(index.tsx, 2, 27))
>x : Symbol(x, Decl(index.tsx, 20, 47))
>y : Symbol(y, Decl(index.tsx, 20, 53))
>MyClass : Symbol(MyClass, Decl(index.tsx, 2, 27))
>x : Symbol(x, Decl(index.tsx, 20, 70))
>y : Symbol(y, Decl(index.tsx, 20, 76))
>MySFC : Symbol(MySFC, Decl(index.tsx, 2, 21))

// Should fail, nondom isn't allowed as children of dom
const _brokenTree2 = <DOMSFC x={1} y={2}>{tree}{tree}</DOMSFC>
>_brokenTree2 : Symbol(_brokenTree2, Decl(index.tsx, 23, 5))
>DOMSFC : Symbol(DOMSFC, Decl(index.tsx, 6, 5))
>x : Symbol(x, Decl(index.tsx, 23, 28))
>y : Symbol(y, Decl(index.tsx, 23, 34))
>tree : Symbol(tree, Decl(index.tsx, 2, 36))
>tree : Symbol(tree, Decl(index.tsx, 2, 36))
>DOMSFC : Symbol(DOMSFC, Decl(index.tsx, 6, 5))

