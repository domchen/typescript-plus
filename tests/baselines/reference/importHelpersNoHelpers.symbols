=== tests/cases/compiler/external.ts ===
export * from "./other";
export class A { }
>A : Symbol(A, Decl(external.ts, 0, 24))

export class B extends A { }
>B : Symbol(B, Decl(external.ts, 1, 18))
>A : Symbol(A, Decl(external.ts, 0, 24))

declare var dec: any;
>dec : Symbol(dec, Decl(external.ts, 4, 11))

@dec
>dec : Symbol(dec, Decl(external.ts, 4, 11))

class C {
>C : Symbol(C, Decl(external.ts, 4, 21))

    method(@dec x: number) {
>method : Symbol(C.method, Decl(external.ts, 7, 9))
>dec : Symbol(dec, Decl(external.ts, 4, 11))
>x : Symbol(x, Decl(external.ts, 8, 11))
    }
}

const o = { a: 1 };
>o : Symbol(o, Decl(external.ts, 12, 5))
>a : Symbol(a, Decl(external.ts, 12, 11))

const y = { ...o };
>y : Symbol(y, Decl(external.ts, 13, 5))
>o : Symbol(o, Decl(external.ts, 12, 5))

const { ...x } = y;
>x : Symbol(x, Decl(external.ts, 14, 7))
>y : Symbol(y, Decl(external.ts, 13, 5))

=== tests/cases/compiler/other.ts ===
export const x = 1;
>x : Symbol(x, Decl(other.ts, 0, 12))

=== tests/cases/compiler/script.ts ===
class A { }
>A : Symbol(A, Decl(script.ts, 0, 0))

class B extends A { }
>B : Symbol(B, Decl(script.ts, 0, 11))
>A : Symbol(A, Decl(script.ts, 0, 0))

declare var dec: any;
>dec : Symbol(dec, Decl(script.ts, 3, 11))

@dec
>dec : Symbol(dec, Decl(script.ts, 3, 11))

class C {
>C : Symbol(C, Decl(script.ts, 3, 21))

    method(@dec x: number) {
>method : Symbol(C.method, Decl(script.ts, 6, 9))
>dec : Symbol(dec, Decl(script.ts, 3, 11))
>x : Symbol(x, Decl(script.ts, 7, 11))
    }
}

=== tests/cases/compiler/tslib.d.ts ===
export {}
No type information for this code.
No type information for this code.