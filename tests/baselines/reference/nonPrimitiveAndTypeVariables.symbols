=== tests/cases/conformance/types/nonPrimitive/nonPrimitiveAndTypeVariables.ts ===
// Repros from #23800

type A<T, V> = { [P in keyof T]: T[P] extends V ? 1 : 0; };
>A : Symbol(A, Decl(nonPrimitiveAndTypeVariables.ts, 0, 0))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 2, 7))
>V : Symbol(V, Decl(nonPrimitiveAndTypeVariables.ts, 2, 9))
>P : Symbol(P, Decl(nonPrimitiveAndTypeVariables.ts, 2, 18))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 2, 7))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 2, 7))
>P : Symbol(P, Decl(nonPrimitiveAndTypeVariables.ts, 2, 18))
>V : Symbol(V, Decl(nonPrimitiveAndTypeVariables.ts, 2, 9))

type B<T, V> = { [P in keyof T]: T[P] extends V | object ? 1 : 0; };
>B : Symbol(B, Decl(nonPrimitiveAndTypeVariables.ts, 2, 59))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 3, 7))
>V : Symbol(V, Decl(nonPrimitiveAndTypeVariables.ts, 3, 9))
>P : Symbol(P, Decl(nonPrimitiveAndTypeVariables.ts, 3, 18))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 3, 7))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 3, 7))
>P : Symbol(P, Decl(nonPrimitiveAndTypeVariables.ts, 3, 18))
>V : Symbol(V, Decl(nonPrimitiveAndTypeVariables.ts, 3, 9))

let a: A<{ a: 0 | 1 }, 0> = { a: 0 };
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 5, 3))
>A : Symbol(A, Decl(nonPrimitiveAndTypeVariables.ts, 0, 0))
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 5, 10))
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 5, 29))

let b: B<{ a: 0 | 1 }, 0> = { a: 0 };
>b : Symbol(b, Decl(nonPrimitiveAndTypeVariables.ts, 6, 3))
>B : Symbol(B, Decl(nonPrimitiveAndTypeVariables.ts, 2, 59))
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 6, 10))
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 6, 29))

function foo<T, U>(x: T) {
>foo : Symbol(foo, Decl(nonPrimitiveAndTypeVariables.ts, 6, 37))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 8, 13))
>U : Symbol(U, Decl(nonPrimitiveAndTypeVariables.ts, 8, 15))
>x : Symbol(x, Decl(nonPrimitiveAndTypeVariables.ts, 8, 19))
>T : Symbol(T, Decl(nonPrimitiveAndTypeVariables.ts, 8, 13))

    let a: object = x;  // Error
>a : Symbol(a, Decl(nonPrimitiveAndTypeVariables.ts, 9, 7))
>x : Symbol(x, Decl(nonPrimitiveAndTypeVariables.ts, 8, 19))

    let b: U | object = x;  // Error
>b : Symbol(b, Decl(nonPrimitiveAndTypeVariables.ts, 10, 7))
>U : Symbol(U, Decl(nonPrimitiveAndTypeVariables.ts, 8, 15))
>x : Symbol(x, Decl(nonPrimitiveAndTypeVariables.ts, 8, 19))
}

