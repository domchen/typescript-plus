=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/unionTypesAssignability.ts ===
var unionNumberString: number | string;
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))

class C { }
>C : Symbol(C, Decl(unionTypesAssignability.ts, 0, 39))

class D extends C { foo1() { } }
>D : Symbol(D, Decl(unionTypesAssignability.ts, 1, 11))
>C : Symbol(C, Decl(unionTypesAssignability.ts, 0, 39))
>foo1 : Symbol(D.foo1, Decl(unionTypesAssignability.ts, 2, 19))

class E extends C { foo2() { } }
>E : Symbol(E, Decl(unionTypesAssignability.ts, 2, 32))
>C : Symbol(C, Decl(unionTypesAssignability.ts, 0, 39))
>foo2 : Symbol(E.foo2, Decl(unionTypesAssignability.ts, 3, 19))

var unionDE: D | E;
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>D : Symbol(D, Decl(unionTypesAssignability.ts, 1, 11))
>E : Symbol(E, Decl(unionTypesAssignability.ts, 2, 32))

var num: number;
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

var str: string;
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

var c: C;
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))
>C : Symbol(C, Decl(unionTypesAssignability.ts, 0, 39))

var d: D;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>D : Symbol(D, Decl(unionTypesAssignability.ts, 1, 11))

var e: E;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>E : Symbol(E, Decl(unionTypesAssignability.ts, 2, 32))

// A union type U is assignable to a type T if each type in U is assignable to T
c = d;
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

c = e;
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

c = unionDE; // ok
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))

d = d;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

d = e;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

d = unionDE; // error e is not assignable to d
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))

e = d;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

e = e;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

e = unionDE; // error d is not assignable to e
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))

num = num;
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

num = str;
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

num = unionNumberString; // error string is not assignable to number
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))

str = num;
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

str = str;
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

str = unionNumberString; // error since number is not assignable to string
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))

// A type T is assignable to a union type U if T is assignable to any type in U
d = c;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))

e = c;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))

unionDE = c; // error since C is not assinable to either D or E
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>c : Symbol(c, Decl(unionTypesAssignability.ts, 8, 3))

d = d;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

e = d;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

unionDE = d; // ok
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))

d = e;
>d : Symbol(d, Decl(unionTypesAssignability.ts, 9, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

e = e;
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

unionDE = e; // ok
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>e : Symbol(e, Decl(unionTypesAssignability.ts, 10, 3))

num = num;
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

str = num;
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

unionNumberString = num; // ok 
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))

num = str;
>num : Symbol(num, Decl(unionTypesAssignability.ts, 6, 3))
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

str = str;
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

unionNumberString = str; // ok
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))
>str : Symbol(str, Decl(unionTypesAssignability.ts, 7, 3))

// Any
var anyVar: any;
>anyVar : Symbol(anyVar, Decl(unionTypesAssignability.ts, 47, 3))

anyVar = unionDE;
>anyVar : Symbol(anyVar, Decl(unionTypesAssignability.ts, 47, 3))
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))

anyVar = unionNumberString;
>anyVar : Symbol(anyVar, Decl(unionTypesAssignability.ts, 47, 3))
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))

unionDE = anyVar;
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>anyVar : Symbol(anyVar, Decl(unionTypesAssignability.ts, 47, 3))

unionNumberString = anyVar;
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))
>anyVar : Symbol(anyVar, Decl(unionTypesAssignability.ts, 47, 3))

// null
unionDE = null;
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))

unionNumberString = null;
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))

// undefined
unionDE = undefined;
>unionDE : Symbol(unionDE, Decl(unionTypesAssignability.ts, 4, 3))
>undefined : Symbol(undefined)

unionNumberString = undefined;
>unionNumberString : Symbol(unionNumberString, Decl(unionTypesAssignability.ts, 0, 3))
>undefined : Symbol(undefined)

// type parameters
function foo<T, U>(t: T, u: U) {
>foo : Symbol(foo, Decl(unionTypesAssignability.ts, 59, 30))
>T : Symbol(T, Decl(unionTypesAssignability.ts, 62, 13))
>U : Symbol(U, Decl(unionTypesAssignability.ts, 62, 15))
>t : Symbol(t, Decl(unionTypesAssignability.ts, 62, 19))
>T : Symbol(T, Decl(unionTypesAssignability.ts, 62, 13))
>u : Symbol(u, Decl(unionTypesAssignability.ts, 62, 24))
>U : Symbol(U, Decl(unionTypesAssignability.ts, 62, 15))

    t = u; // error
>t : Symbol(t, Decl(unionTypesAssignability.ts, 62, 19))
>u : Symbol(u, Decl(unionTypesAssignability.ts, 62, 24))

    u = t; // error
>u : Symbol(u, Decl(unionTypesAssignability.ts, 62, 24))
>t : Symbol(t, Decl(unionTypesAssignability.ts, 62, 19))

    var x : T | U;
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))
>T : Symbol(T, Decl(unionTypesAssignability.ts, 62, 13))
>U : Symbol(U, Decl(unionTypesAssignability.ts, 62, 15))

    x = t; // ok
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))
>t : Symbol(t, Decl(unionTypesAssignability.ts, 62, 19))

    x = u; // ok
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))
>u : Symbol(u, Decl(unionTypesAssignability.ts, 62, 24))

    x = undefined;
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))
>undefined : Symbol(undefined)

    t = x; // error U not assignable to T
>t : Symbol(t, Decl(unionTypesAssignability.ts, 62, 19))
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))

    u = x; // error T not assignable to U
>u : Symbol(u, Decl(unionTypesAssignability.ts, 62, 24))
>x : Symbol(x, Decl(unionTypesAssignability.ts, 65, 7))
}

