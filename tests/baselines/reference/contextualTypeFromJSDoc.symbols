=== tests/cases/conformance/types/contextualTypes/jsdoc/index.js ===
/** @type {Array<[string, {x?:number, y?:number}]>} */
const arr = [
>arr : Symbol(arr, Decl(index.js, 1, 5))

    ['a', { x: 1 }],
>x : Symbol(x, Decl(index.js, 2, 11))

    ['b', { y: 2 }]
>y : Symbol(y, Decl(index.js, 3, 11))

];

/** @return {Array<[string, {x?:number, y?:number}]>} */
function f() {
>f : Symbol(f, Decl(index.js, 4, 2))

    return [
        ['a', { x: 1 }],
>x : Symbol(x, Decl(index.js, 9, 15))

        ['b', { y: 2 }]
>y : Symbol(y, Decl(index.js, 10, 15))

    ];
}

class C {
>C : Symbol(C, Decl(index.js, 12, 1))

    /** @param {Array<[string, {x?:number, y?:number}]>} value */
    set x(value) { }
>x : Symbol(C.x, Decl(index.js, 14, 9), Decl(index.js, 16, 20))
>value : Symbol(value, Decl(index.js, 16, 10))

    get x() {
>x : Symbol(C.x, Decl(index.js, 14, 9), Decl(index.js, 16, 20))

        return [
            ['a', { x: 1 }],
>x : Symbol(x, Decl(index.js, 19, 19))

            ['b', { y: 2 }]
>y : Symbol(y, Decl(index.js, 20, 19))

        ];
    }
}
