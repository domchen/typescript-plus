=== tests/cases/compiler/typeParameterExtendsPrimitive.ts ===
// #14473
function f<T extends number>() {
>f : <T extends number>() => number
>T : T

    var t: T;
>t : T
>T : T

    var v = {
>v : { [x: number]: number; }
>{        [t]: 0    } : { [x: number]: number; }

        [t]: 0
>t : T
>0 : 0
    }
    return t + t;
>t + t : number
>t : T
>t : T
}

// #15501
interface I { x: number }
>I : I
>x : number

type IdMap<T> = { [P in keyof T]: T[P] };
>IdMap : IdMap<T>
>T : T
>P : P
>T : T
>T : T
>P : P

function g<T extends I>(i: IdMap<T>) {
>g : <T extends I>(i: IdMap<T>) => number
>T : T
>I : I
>i : IdMap<T>
>IdMap : IdMap<T>
>T : T

    const n: number = i.x;
>n : number
>i.x : T["x"]
>i : IdMap<T>
>x : T["x"]

    return i.x * 2;
>i.x * 2 : number
>i.x : T["x"]
>i : IdMap<T>
>x : T["x"]
>2 : 2
}

// #17069
function h<T extends Record<K, number>, K extends string>(array: T[], prop: K): number {
>h : <T extends Record<K, number>, K extends string>(array: T[], prop: K) => number
>T : T
>Record : Record<K, T>
>K : K
>K : K
>array : T[]
>T : T
>prop : K
>K : K

    let result = 0;
>result : number
>0 : 0

    for (const v of array) {
>v : T
>array : T[]

        result += v[prop];
>result += v[prop] : number
>result : number
>v[prop] : T[K]
>v : T
>prop : K
    }
    return result;
>result : number
}

