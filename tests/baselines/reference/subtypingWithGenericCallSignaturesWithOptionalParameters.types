=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithGenericCallSignaturesWithOptionalParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

module ClassTypeParam {
>ClassTypeParam : any

    interface Base<T> {
>Base : Base<T>
>T : T

        a: () => T;
>a : () => T
>T : T

        a2: (x?: T) => T;
>a2 : (x?: T) => T
>x : T
>T : T
>T : T

        a3: (x: T) => T;
>a3 : (x: T) => T
>x : T
>T : T
>T : T

        a4: (x: T, y?: T) => T;
>a4 : (x: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T

        a5: (x?: T, y?: T) => T;
>a5 : (x?: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I1<T> extends Base<T> {
>I1 : I1<T>
>T : T
>Base : Base<T>
>T : T

        a: () => T; // ok, same T of required params
>a : () => T
>T : T
    }

    interface I2<T> extends Base<T> {
>I2 : I2<T>
>T : T
>Base : Base<T>
>T : T

        a: (x?: T) => T; // ok, same T of required params
>a : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I3<T> extends Base<T> {
>I3 : I3<T>
>T : T
>Base : Base<T>
>T : T

        a: (x: T) => T; // error, too many required params
>a : (x: T) => T
>x : T
>T : T
>T : T
    }


    interface I4<T> extends Base<T> {
>I4 : I4<T>
>T : T
>Base : Base<T>
>T : T

        a2: () => T; // ok, same T of required params
>a2 : () => T
>T : T
    }

    interface I5<T> extends Base<T> {
>I5 : I5<T>
>T : T
>Base : Base<T>
>T : T

        a2: (x?: T) => T; // ok, same T of required params
>a2 : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I6<T> extends Base<T> {
>I6 : I6<T>
>T : T
>Base : Base<T>
>T : T

        a2: (x: T) => T; // ok, same number of params
>a2 : (x: T) => T
>x : T
>T : T
>T : T
    }


    interface I7<T> extends Base<T> {
>I7 : I7<T>
>T : T
>Base : Base<T>
>T : T

        a3: () => T; // ok, fewer required params
>a3 : () => T
>T : T
    }

    interface I8<T> extends Base<T> {
>I8 : I8<T>
>T : T
>Base : Base<T>
>T : T

        a3: (x?: T) => T; // ok, fewer required params
>a3 : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I9<T> extends Base<T> {
>I9 : I9<T>
>T : T
>Base : Base<T>
>T : T

        a3: (x: T) => T; // ok, same T of required params
>a3 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I10<T> extends Base<T> {
>I10 : I10<T>
>T : T
>Base : Base<T>
>T : T

        a3: (x: T, y: T) => T;  // error, too many required params
>a3 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I11<T> extends Base<T> {
>I11 : I11<T>
>T : T
>Base : Base<T>
>T : T

        a4: () => T; // ok, fewer required params
>a4 : () => T
>T : T
    }

    interface I12<T> extends Base<T> {
>I12 : I12<T>
>T : T
>Base : Base<T>
>T : T

        a4: (x?: T, y?: T) => T; // ok, fewer required params
>a4 : (x?: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I13<T> extends Base<T> {
>I13 : I13<T>
>T : T
>Base : Base<T>
>T : T

        a4: (x: T) => T; // ok, same T of required params
>a4 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I14<T> extends Base<T> {
>I14 : I14<T>
>T : T
>Base : Base<T>
>T : T

        a4: (x: T, y: T) => T;  // ok, same number of params
>a4 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I15<T> extends Base<T> {
>I15 : I15<T>
>T : T
>Base : Base<T>
>T : T

        a5: () => T; // ok, fewer required params
>a5 : () => T
>T : T
    }

    interface I16<T> extends Base<T> {
>I16 : I16<T>
>T : T
>Base : Base<T>
>T : T

        a5: (x?: T, y?: T) => T; // ok, fewer required params
>a5 : (x?: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I17<T> extends Base<T> {
>I17 : I17<T>
>T : T
>Base : Base<T>
>T : T

        a5: (x: T) => T; // ok, all present params match
>a5 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I18<T> extends Base<T> {
>I18 : I18<T>
>T : T
>Base : Base<T>
>T : T

        a5: (x: T, y: T) => T;  // ok, same number of params
>a5 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }
}

module GenericSignaturesInvalid {
>GenericSignaturesInvalid : any

    // all of these are errors
    interface Base2 {
>Base2 : Base2

        a: <T>() => T;
>a : <T>() => T
>T : T
>T : T

        a2: <T>(x?: T) => T;
>a2 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T

        a3: <T>(x: T) => T;
>a3 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

        a4: <T>(x: T, y?: T) => T;
>a4 : <T>(x: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T

        a5: <T>(x?: T, y?: T) => T;
>a5 : <T>(x?: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I1<T> extends Base2 {
>I1 : I1<T>
>T : T
>Base2 : Base2

        a: () => T; 
>a : () => T
>T : T
    }

    interface I2<T> extends Base2 {
>I2 : I2<T>
>T : T
>Base2 : Base2

        a: (x?: T) => T;
>a : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I3<T> extends Base2 {
>I3 : I3<T>
>T : T
>Base2 : Base2

        a: (x: T) => T; 
>a : (x: T) => T
>x : T
>T : T
>T : T
    }


    interface I4<T> extends Base2 {
>I4 : I4<T>
>T : T
>Base2 : Base2

        a2: () => T; 
>a2 : () => T
>T : T
    }

    interface I5<T> extends Base2 {
>I5 : I5<T>
>T : T
>Base2 : Base2

        a2: (x?: T) => T
>a2 : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I6<T> extends Base2 {
>I6 : I6<T>
>T : T
>Base2 : Base2

        a2: (x: T) => T;
>a2 : (x: T) => T
>x : T
>T : T
>T : T
    }


    interface I7<T> extends Base2 {
>I7 : I7<T>
>T : T
>Base2 : Base2

        a3: () => T;
>a3 : () => T
>T : T
    }

    interface I8<T> extends Base2 {
>I8 : I8<T>
>T : T
>Base2 : Base2

        a3: (x?: T) => T; 
>a3 : (x?: T) => T
>x : T
>T : T
>T : T
    }

    interface I9<T> extends Base2 {
>I9 : I9<T>
>T : T
>Base2 : Base2

        a3: (x: T) => T; 
>a3 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I10<T> extends Base2 {
>I10 : I10<T>
>T : T
>Base2 : Base2

        a3: (x: T, y: T) => T;  
>a3 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I11<T> extends Base2 {
>I11 : I11<T>
>T : T
>Base2 : Base2

        a4: () => T; 
>a4 : () => T
>T : T
    }

    interface I12<T> extends Base2 {
>I12 : I12<T>
>T : T
>Base2 : Base2

        a4: (x?: T, y?: T) => T; 
>a4 : (x?: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I13<T> extends Base2 {
>I13 : I13<T>
>T : T
>Base2 : Base2

        a4: (x: T) => T; 
>a4 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I14<T> extends Base2 {
>I14 : I14<T>
>T : T
>Base2 : Base2

        a4: (x: T, y: T) => T; 
>a4 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I15<T> extends Base2 {
>I15 : I15<T>
>T : T
>Base2 : Base2

        a5: () => T; 
>a5 : () => T
>T : T
    }

    interface I16<T> extends Base2 {
>I16 : I16<T>
>T : T
>Base2 : Base2

        a5: (x?: T, y?: T) => T; 
>a5 : (x?: T, y?: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I17<T> extends Base2 {
>I17 : I17<T>
>T : T
>Base2 : Base2

        a5: (x: T) => T;
>a5 : (x: T) => T
>x : T
>T : T
>T : T
    }

    interface I18<T> extends Base2 {
>I18 : I18<T>
>T : T
>Base2 : Base2

        a5: (x: T, y: T) => T; 
>a5 : (x: T, y: T) => T
>x : T
>T : T
>y : T
>T : T
>T : T
    }
}

module GenericSignaturesValid {
>GenericSignaturesValid : any

    interface Base2 {
>Base2 : Base2

        a: <T>() => T;
>a : <T>() => T
>T : T
>T : T

        a2: <T>(x?: T) => T;
>a2 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T

        a3: <T>(x: T) => T;
>a3 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

        a4: <T>(x: T, y?: T) => T;
>a4 : <T>(x: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T

        a5: <T>(x?: T, y?: T) => T;
>a5 : <T>(x?: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    // BUG 833350
    interface I1 extends Base2 {
>I1 : I1
>Base2 : Base2

        a: <T>() => T; // ok, same number of required params
>a : <T>() => T
>T : T
>T : T
    }

    interface I2 extends Base2 {
>I2 : I2
>Base2 : Base2

        a: <T>(x?: T) => T; // error, not identical and contextual signature instatiation can't make inference from T to T
>a : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I3 extends Base2 {
>I3 : I3
>Base2 : Base2

        a: <T>(x: T) => T; // error, not identical and contextual signature instatiation can't make inference from T to T
>a : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }


    interface I4 extends Base2 {
>I4 : I4
>Base2 : Base2

        a2: <T>() => T; // error, not identical and contextual signature instatiation can't make inference from T to T
>a2 : <T>() => T
>T : T
>T : T
    }

    interface I5 extends Base2 {
>I5 : I5
>Base2 : Base2

        a2: <T>(x?: T) => T; // ok, identical
>a2 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I6 extends Base2 {
>I6 : I6
>Base2 : Base2

        a2: <T>(x: T) => T; // ok, same number of params
>a2 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }


    interface I7 extends Base2 {
>I7 : I7
>Base2 : Base2

        a3: <T>() => T; // error, no inferences for T so {} not assignable to {} in return type
>a3 : <T>() => T
>T : T
>T : T
    }

    interface I8 extends Base2 {
>I8 : I8
>Base2 : Base2

        a3: <T>(x?: T) => T; // ok, fewer required params
>a3 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I9 extends Base2 {
>I9 : I9
>Base2 : Base2

        a3: <T>(x: T) => T; // ok, identical, same number of required params
>a3 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I10 extends Base2 {
>I10 : I10
>Base2 : Base2

        a3: <T>(x: T, y: T) => T;  // error, too many required params
>a3 : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I11 extends Base2 {
>I11 : I11
>Base2 : Base2

        a4: <T>() => T; // error, not identical and contextual signature instatiation can't make inference from T to T
>a4 : <T>() => T
>T : T
>T : T
    }

    interface I12 extends Base2 {
>I12 : I12
>Base2 : Base2

        a4: <T>(x?: T, y?: T) => T; // ok, fewer required params
>a4 : <T>(x?: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I13 extends Base2 {
>I13 : I13
>Base2 : Base2

        a4: <T>(x: T) => T; // ok, same T of required params
>a4 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I14 extends Base2 {
>I14 : I14
>Base2 : Base2

        a4: <T>(x: T, y: T) => T;  // error, too many required params
>a4 : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }


    interface I15 extends Base2 {
>I15 : I15
>Base2 : Base2

        a5: <T>() => T; // error, not identical and contextual signature instatiation can't make inference from T to T
>a5 : <T>() => T
>T : T
>T : T
    }

    interface I16 extends Base2 {
>I16 : I16
>Base2 : Base2

        a5: <T>(x?: T, y?: T) => T; // ok, fewer required params
>a5 : <T>(x?: T, y?: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }

    interface I17 extends Base2 {
>I17 : I17
>Base2 : Base2

        a5: <T>(x: T) => T; // ok, all present params match
>a5 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    interface I18 extends Base2 {
>I18 : I18
>Base2 : Base2

        a5: <T>(x: T, y: T) => T;  // ok, same number of params
>a5 : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T
    }
}
