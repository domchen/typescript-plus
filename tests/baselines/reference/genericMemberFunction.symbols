=== tests/cases/compiler/genericMemberFunction.ts ===
export class BuildError<A, B, C>{
>BuildError : Symbol(BuildError, Decl(genericMemberFunction.ts, 0, 0))
>A : Symbol(A, Decl(genericMemberFunction.ts, 0, 24))
>B : Symbol(B, Decl(genericMemberFunction.ts, 0, 26))
>C : Symbol(C, Decl(genericMemberFunction.ts, 0, 29))

  public parent<A, B extends A, C>(): FileWithErrors<A, B, C> {
>parent : Symbol(BuildError.parent, Decl(genericMemberFunction.ts, 0, 33))
>A : Symbol(A, Decl(genericMemberFunction.ts, 1, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 1, 18))
>A : Symbol(A, Decl(genericMemberFunction.ts, 1, 16))
>C : Symbol(C, Decl(genericMemberFunction.ts, 1, 31))
>FileWithErrors : Symbol(FileWithErrors, Decl(genericMemberFunction.ts, 4, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 1, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 1, 18))
>C : Symbol(C, Decl(genericMemberFunction.ts, 1, 31))

    return undefined;
>undefined : Symbol(undefined)
  }
}
export class FileWithErrors<A, B, C>{
>FileWithErrors : Symbol(FileWithErrors, Decl(genericMemberFunction.ts, 4, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 5, 28))
>B : Symbol(B, Decl(genericMemberFunction.ts, 5, 30))
>C : Symbol(C, Decl(genericMemberFunction.ts, 5, 33))

  public errors<A, B extends A, C>(): BuildError<A, B, C>[] {
>errors : Symbol(FileWithErrors.errors, Decl(genericMemberFunction.ts, 5, 37))
>A : Symbol(A, Decl(genericMemberFunction.ts, 6, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 6, 18))
>A : Symbol(A, Decl(genericMemberFunction.ts, 6, 16))
>C : Symbol(C, Decl(genericMemberFunction.ts, 6, 31))
>BuildError : Symbol(BuildError, Decl(genericMemberFunction.ts, 0, 0))
>A : Symbol(A, Decl(genericMemberFunction.ts, 6, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 6, 18))
>C : Symbol(C, Decl(genericMemberFunction.ts, 6, 31))

    return undefined;
>undefined : Symbol(undefined)
  }
  public parent<A, B extends A, C>(): BuildResult<A, B, C> {
>parent : Symbol(FileWithErrors.parent, Decl(genericMemberFunction.ts, 8, 3))
>A : Symbol(A, Decl(genericMemberFunction.ts, 9, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 9, 18))
>A : Symbol(A, Decl(genericMemberFunction.ts, 9, 16))
>C : Symbol(C, Decl(genericMemberFunction.ts, 9, 31))
>BuildResult : Symbol(BuildResult, Decl(genericMemberFunction.ts, 12, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 9, 16))
>B : Symbol(B, Decl(genericMemberFunction.ts, 9, 18))
>C : Symbol(C, Decl(genericMemberFunction.ts, 9, 31))

    return undefined;
>undefined : Symbol(undefined)
  }
}
export class BuildResult<A, B, C>{
>BuildResult : Symbol(BuildResult, Decl(genericMemberFunction.ts, 12, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 13, 25))
>B : Symbol(B, Decl(genericMemberFunction.ts, 13, 27))
>C : Symbol(C, Decl(genericMemberFunction.ts, 13, 30))

  public merge<A, B extends A, C>(other: BuildResult<A, B, C>): void {
>merge : Symbol(BuildResult.merge, Decl(genericMemberFunction.ts, 13, 34))
>A : Symbol(A, Decl(genericMemberFunction.ts, 14, 15))
>B : Symbol(B, Decl(genericMemberFunction.ts, 14, 17))
>A : Symbol(A, Decl(genericMemberFunction.ts, 14, 15))
>C : Symbol(C, Decl(genericMemberFunction.ts, 14, 30))
>other : Symbol(other, Decl(genericMemberFunction.ts, 14, 34))
>BuildResult : Symbol(BuildResult, Decl(genericMemberFunction.ts, 12, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 14, 15))
>B : Symbol(B, Decl(genericMemberFunction.ts, 14, 17))
>C : Symbol(C, Decl(genericMemberFunction.ts, 14, 30))

    a.b.c.d.e.f.g = 0;
    removedFiles.forEach(<A, B extends A, C>(each: FileWithErrors<A, B, C>) => {
>A : Symbol(A, Decl(genericMemberFunction.ts, 16, 26))
>B : Symbol(B, Decl(genericMemberFunction.ts, 16, 28))
>A : Symbol(A, Decl(genericMemberFunction.ts, 16, 26))
>C : Symbol(C, Decl(genericMemberFunction.ts, 16, 41))
>each : Symbol(each, Decl(genericMemberFunction.ts, 16, 45))
>FileWithErrors : Symbol(FileWithErrors, Decl(genericMemberFunction.ts, 4, 1))
>A : Symbol(A, Decl(genericMemberFunction.ts, 16, 26))
>B : Symbol(B, Decl(genericMemberFunction.ts, 16, 28))
>C : Symbol(C, Decl(genericMemberFunction.ts, 16, 41))

      this.removeFile(each);
>this : Symbol(BuildResult, Decl(genericMemberFunction.ts, 12, 1))
>each : Symbol(each, Decl(genericMemberFunction.ts, 16, 45))

    });
  }
}

