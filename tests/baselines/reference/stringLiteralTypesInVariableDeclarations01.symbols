=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesInVariableDeclarations01.ts ===
let a: "";
>a : Symbol(a, Decl(stringLiteralTypesInVariableDeclarations01.ts, 0, 3))

var b: "foo";
>b : Symbol(b, Decl(stringLiteralTypesInVariableDeclarations01.ts, 1, 3))

let c: "bar";
>c : Symbol(c, Decl(stringLiteralTypesInVariableDeclarations01.ts, 2, 3))

const d: "baz";
>d : Symbol(d, Decl(stringLiteralTypesInVariableDeclarations01.ts, 3, 5))

a = "";
>a : Symbol(a, Decl(stringLiteralTypesInVariableDeclarations01.ts, 0, 3))

b = "foo";
>b : Symbol(b, Decl(stringLiteralTypesInVariableDeclarations01.ts, 1, 3))

c = "bar";
>c : Symbol(c, Decl(stringLiteralTypesInVariableDeclarations01.ts, 2, 3))

let e: "" = "";
>e : Symbol(e, Decl(stringLiteralTypesInVariableDeclarations01.ts, 9, 3))

var f: "foo" = "foo";
>f : Symbol(f, Decl(stringLiteralTypesInVariableDeclarations01.ts, 10, 3))

let g: "bar" = "bar";
>g : Symbol(g, Decl(stringLiteralTypesInVariableDeclarations01.ts, 11, 3))

const h: "baz" = "baz";
>h : Symbol(h, Decl(stringLiteralTypesInVariableDeclarations01.ts, 12, 5))

e = "";
>e : Symbol(e, Decl(stringLiteralTypesInVariableDeclarations01.ts, 9, 3))

f = "foo";
>f : Symbol(f, Decl(stringLiteralTypesInVariableDeclarations01.ts, 10, 3))

g = "bar";
>g : Symbol(g, Decl(stringLiteralTypesInVariableDeclarations01.ts, 11, 3))

