=== tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/accessorWithMismatchedAccessibilityModifiers.ts ===
class C {
>C : Symbol(C, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 0, 0))

    get x() {
>x : Symbol(C.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 0, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 3, 5))

        return 1;
    }
    private set x(v) {
>x : Symbol(C.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 0, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 3, 5))
>v : Symbol(v, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 4, 18))
    }
}

class D {
>D : Symbol(D, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 6, 1))

    protected get x() {
>x : Symbol(D.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 8, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 11, 5))

        return 1;
    }
    private set x(v) {
>x : Symbol(D.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 8, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 11, 5))
>v : Symbol(v, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 12, 18))
    }
}

class E {
>E : Symbol(E, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 14, 1))

    protected set x(v) {
>x : Symbol(E.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 16, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 18, 5))
>v : Symbol(v, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 17, 20))
    }
    get x() {
>x : Symbol(E.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 16, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 18, 5))

        return 1;
    }
}

class F {
>F : Symbol(F, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 22, 1))

    protected static set x(v) {
>x : Symbol(F.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 24, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 26, 5))
>v : Symbol(v, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 25, 27))
    }
    static get x() {
>x : Symbol(F.x, Decl(accessorWithMismatchedAccessibilityModifiers.ts, 24, 9), Decl(accessorWithMismatchedAccessibilityModifiers.ts, 26, 5))

        return 1;
    }
}
