=== tests/cases/conformance/classes/constructorDeclarations/classConstructorOverloadsAccessibility.ts ===
class A {
>A : Symbol(A, Decl(classConstructorOverloadsAccessibility.ts, 0, 0))

	public constructor(a: boolean) // error
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 1, 20))

	protected constructor(a: number) // error
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 2, 23))

	private constructor(a: string)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 3, 21))

	private constructor() { 
		
	}
}

class B {
>B : Symbol(B, Decl(classConstructorOverloadsAccessibility.ts, 7, 1))

	protected constructor(a: number) // error
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 10, 23))

	constructor(a: string)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 11, 13))

	constructor() { 
		
	}
}

class C {
>C : Symbol(C, Decl(classConstructorOverloadsAccessibility.ts, 15, 1))

	protected constructor(a: number)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 18, 23))

	protected constructor(a: string)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 19, 23))

	protected constructor() { 
		
	}
}

class D {
>D : Symbol(D, Decl(classConstructorOverloadsAccessibility.ts, 23, 1))

	constructor(a: number)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 26, 13))

	constructor(a: string)
>a : Symbol(a, Decl(classConstructorOverloadsAccessibility.ts, 27, 13))

	public constructor() { 
		
	}
}
