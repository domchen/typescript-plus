=== tests/cases/compiler/nestedFreshLiteral.ts ===
interface CSSProps  {
>CSSProps : Symbol(CSSProps, Decl(nestedFreshLiteral.ts, 0, 0))

  color?: string
>color : Symbol(CSSProps.color, Decl(nestedFreshLiteral.ts, 0, 21))
}
interface NestedCSSProps {
>NestedCSSProps : Symbol(NestedCSSProps, Decl(nestedFreshLiteral.ts, 2, 1))

  nested?: NestedSelector
>nested : Symbol(NestedCSSProps.nested, Decl(nestedFreshLiteral.ts, 3, 26))
>NestedSelector : Symbol(NestedSelector, Decl(nestedFreshLiteral.ts, 5, 1))
}
interface NestedSelector  {
>NestedSelector : Symbol(NestedSelector, Decl(nestedFreshLiteral.ts, 5, 1))

  prop: CSSProps;
>prop : Symbol(NestedSelector.prop, Decl(nestedFreshLiteral.ts, 6, 27))
>CSSProps : Symbol(CSSProps, Decl(nestedFreshLiteral.ts, 0, 0))
}

let stylen: NestedCSSProps = {
>stylen : Symbol(stylen, Decl(nestedFreshLiteral.ts, 10, 3))
>NestedCSSProps : Symbol(NestedCSSProps, Decl(nestedFreshLiteral.ts, 2, 1))

  nested: { prop: { colour: 'red' } }
>nested : Symbol(nested, Decl(nestedFreshLiteral.ts, 10, 30))
>prop : Symbol(prop, Decl(nestedFreshLiteral.ts, 11, 11))
>colour : Symbol(colour, Decl(nestedFreshLiteral.ts, 11, 19))
}
