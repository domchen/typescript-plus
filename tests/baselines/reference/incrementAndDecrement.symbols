=== tests/cases/conformance/expressions/operators/incrementAndDecrement.ts ===
enum E { A, B, C };
>E : Symbol(E, Decl(incrementAndDecrement.ts, 0, 0))
>A : Symbol(E.A, Decl(incrementAndDecrement.ts, 0, 8))
>B : Symbol(E.B, Decl(incrementAndDecrement.ts, 0, 11))
>C : Symbol(E.C, Decl(incrementAndDecrement.ts, 0, 14))

var x = 4;
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

var e = E.B;
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))
>E.B : Symbol(E.B, Decl(incrementAndDecrement.ts, 0, 11))
>E : Symbol(E, Decl(incrementAndDecrement.ts, 0, 0))
>B : Symbol(E.B, Decl(incrementAndDecrement.ts, 0, 11))

var a: any;
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

var w = window;
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

// Assign to expression++
x++ = 4; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

// Assign to expression--
x-- = 5; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

// Assign to++expression
++x = 4; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

// Assign to--expression
--x = 5; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

// Pre and postfix++ on number
x++;
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

x--;
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

++x;
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

--x;
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

++x++; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

--x--; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

++x--; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

--x++; // Error
>x : Symbol(x, Decl(incrementAndDecrement.ts, 1, 3))

// Pre and postfix++ on enum
e++;
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

e--;
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

++e;
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

--e;
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

++e++; // Error
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

--e--; // Error
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

++e--; // Error
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

--e++; // Error
>e : Symbol(e, Decl(incrementAndDecrement.ts, 2, 3))

// Pre and postfix++ on value of type 'any'
a++;
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

a--;
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

++a;
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

--a;
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

++a++; // Error
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

--a--; // Error
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

++a--; // Error
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))

--a++; // Error
>a : Symbol(a, Decl(incrementAndDecrement.ts, 3, 3))


// Pre and postfix++ on other types
w++; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

w--; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

++w; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

--w; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

++w++; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

--w--; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

++w--; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))

--w++; // Error
>w : Symbol(w, Decl(incrementAndDecrement.ts, 4, 3))



