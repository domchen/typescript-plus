=== tests/cases/compiler/recursiveClassReferenceTest.ts ===
// Scenario 1: Test reqursive function call with "this" parameter
// Scenario 2: Test recursive function call with cast and "this" parameter



declare module Sample.Thing {
>Sample : typeof Sample
>Thing : typeof Thing

	export interface IWidget {
>IWidget : IWidget

		getDomNode(): any;
>getDomNode : () => any

		destroy();
>destroy : () => any

		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
>gar : (runner: (widget: IWidget) => any) => any
>runner : (widget: IWidget) => any
>widget : IWidget
>Sample : any
>Thing : any
>IWidget : IWidget
	}

	export interface ICodeThing {
>ICodeThing : ICodeThing
  
  		getDomNode(): Element;
>getDomNode : () => any
>Element : No type information available!
		
		addWidget(widgetId:string, widget:IWidget);
>addWidget : (widgetId: string, widget: IWidget) => any
>widgetId : string
>widget : IWidget
>IWidget : IWidget

		
		focus(); 
>focus : () => any
		
		//addWidget(widget: Sample.Thing.Widgets.IWidget);
	}

	export interface IAction {
>IAction : IAction

		run(Thing:ICodeThing):boolean;
>run : (Thing: ICodeThing) => boolean
>Thing : ICodeThing
>ICodeThing : ICodeThing

		getId():string;
>getId : () => string
	}	
}

module Sample.Actions.Thing.Find {
>Sample : typeof Sample
>Actions : typeof Actions
>Thing : typeof Thing
>Find : typeof Find

	export class StartFindAction implements Sample.Thing.IAction {
>StartFindAction : StartFindAction
>Sample.Thing.IAction : any
>Sample.Thing : typeof Sample.Thing
>Sample : typeof Sample
>Thing : typeof Sample.Thing
>IAction : Sample.Thing.IAction
		
		public getId() { return "yo"; }
>getId : () => string
>"yo" : "yo"
		
		public run(Thing:Sample.Thing.ICodeThing):boolean {
>run : (Thing: Sample.Thing.ICodeThing) => boolean
>Thing : Sample.Thing.ICodeThing
>Sample : any
>Thing : any
>ICodeThing : Sample.Thing.ICodeThing

			return true;
>true : true
		}
	}
}

module Sample.Thing.Widgets {
>Sample : typeof Sample
>Thing : typeof Thing
>Widgets : typeof Widgets

	export class FindWidget implements Sample.Thing.IWidget {
>FindWidget : FindWidget
>Sample.Thing.IWidget : any
>Sample.Thing : typeof Thing
>Sample : typeof Sample
>Thing : typeof Thing
>IWidget : IWidget

		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
>gar : (runner: (widget: IWidget) => any) => any
>runner : (widget: IWidget) => any
>widget : IWidget
>Sample : any
>Thing : any
>IWidget : IWidget
>true : true
>runner(this) : any
>runner : (widget: IWidget) => any
>this : this
			
		private domNode:any = null;
>domNode : any
>null : null

		constructor(private codeThing: Sample.Thing.ICodeThing) {
>codeThing : ICodeThing
>Sample : any
>Thing : any
>ICodeThing : ICodeThing

		    // scenario 1
		    codeThing.addWidget("addWidget", this);
>codeThing.addWidget("addWidget", this) : any
>codeThing.addWidget : (widgetId: string, widget: IWidget) => any
>codeThing : ICodeThing
>addWidget : (widgetId: string, widget: IWidget) => any
>"addWidget" : "addWidget"
>this : this
		}
		
		public getDomNode() {
>getDomNode : () => any

			return domNode;
>domNode : any
		}
		
		public destroy() {
>destroy : () => void

		}

	}
}

interface IMode { getInitialState(): IState;} 
>IMode : IMode
>getInitialState : () => IState
>IState : IState

class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
>AbstractMode : AbstractMode
>IMode : IMode
>getInitialState : () => IState
>IState : IState
>null : null

interface IState {}
>IState : IState

interface Window {
>Window : Window

    opener: Window;
>opener : Window
>Window : Window
}
declare var self: Window;
>self : Window
>Window : Window

module Sample.Thing.Languages.PlainText {
>Sample : typeof Sample
>Thing : typeof Thing
>Languages : typeof Languages
>PlainText : typeof PlainText
	
	export class State implements IState {		
>State : State
>IState : IState

        constructor(private mode: IMode) { }
>mode : IMode
>IMode : IMode

		public clone():IState {
>clone : () => IState
>IState : IState

			return this;
>this : this
		}

		public equals(other:IState):boolean {
>equals : (other: IState) => boolean
>other : IState
>IState : IState

			return this === other;
>this === other : boolean
>this : this
>other : IState
		}
		
		public getMode(): IMode { return mode; }
>getMode : () => IMode
>IMode : IMode
>mode : any
	}
	
	export class Mode extends AbstractMode {
>Mode : Mode
>AbstractMode : AbstractMode

		// scenario 2
		public getInitialState(): IState {
>getInitialState : () => IState
>IState : IState

			return new State(self);
>new State(self) : any
>State : typeof State
>self : Window
		}


	}
}


