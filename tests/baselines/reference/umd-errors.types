=== tests/cases/conformance/externalModules/err1.d.ts ===
// Illegal, can't be in script file
export as namespace Foo;
>Foo : No type information available!

=== tests/cases/conformance/externalModules/err2.d.ts ===
// Illegal, can't be in external ambient module
declare module "Foo" {
	export as namespace Bar;
>Bar : No type information available!
}

=== tests/cases/conformance/externalModules/err3.d.ts ===
// Illegal, can't have modifiers
export var p;
>p : any

static export as namespace oo1;
>oo1 : typeof "tests/cases/conformance/externalModules/err3"

declare export as namespace oo2;
>oo2 : typeof "tests/cases/conformance/externalModules/err3"

public export as namespace oo3;
>oo3 : typeof "tests/cases/conformance/externalModules/err3"

const export as namespace oo4;
>oo4 : typeof "tests/cases/conformance/externalModules/err3"

=== tests/cases/conformance/externalModules/err4.d.ts ===
// Illegal, must be at top-level
export namespace B {
>B : typeof B

	export as namespace C1;
>C1 : No type information available!
}

=== tests/cases/conformance/externalModules/err5.ts ===
// Illegal, may not appear in implementation files
export var v;
>v : any

export as namespace C2;
>C2 : No type information available!


