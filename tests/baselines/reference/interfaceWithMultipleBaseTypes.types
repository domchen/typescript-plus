=== tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithMultipleBaseTypes.ts ===
// an interface may have multiple bases with properties of the same name as long as the interface's implementation satisfies all base type versions

interface Base1 {
>Base1 : Base1

    x: {
>x : { a: string; }

        a: string;
>a : string
    }
}

interface Base2 {
>Base2 : Base2

    x: {
>x : { b: string; }

        b: string;
>b : string
    }
}

interface Derived extends Base1, Base2 {
>Derived : Derived
>Base1 : Base1
>Base2 : Base2

    x: {
>x : { a: string; b: string; }

        a: string; b: string;
>a : string
>b : string
    }
}

interface Derived2 extends Base1, Base2 { // error
>Derived2 : Derived2
>Base1 : Base1
>Base2 : Base2

    x: {
>x : { a: string; b: number; }

        a: string; b: number;
>a : string
>b : number
    }
}

module Generic {
>Generic : any

    interface Base1<T> {
>Base1 : Base1<T>
>T : T

        x: {
>x : { a: T; }

            a: T;
>a : T
>T : T
        }
    }

    interface Base2<T> {
>Base2 : Base2<T>
>T : T

        x: {
>x : { b: T; }

            b: T;
>b : T
>T : T
        }
    }

    interface Derived<T> extends Base1<string>, Base2<number> {
>Derived : Derived<T>
>T : T
>Base1 : Base1<T>
>Base2 : Base2<T>

        x: {
>x : { a: string; b: number; }

            a: string; b: number;
>a : string
>b : number
        }
    }

    interface Derived2<T, U> extends Base1<T>, Base2<U> {
>Derived2 : Derived2<T, U>
>T : T
>U : U
>Base1 : Base1<T>
>T : T
>Base2 : Base2<T>
>U : U

        x: {
>x : { a: T; b: U; }

            a: T; b: U;
>a : T
>T : T
>b : U
>U : U
        }
    }

    interface Derived3<T> extends Base1<number>, Base2<number> { } // error
>Derived3 : Derived3<T>
>T : T
>Base1 : Base1<T>
>Base2 : Base2<T>

    interface Derived4<T> extends Base1<number>, Base2<number> { // error
>Derived4 : Derived4<T>
>T : T
>Base1 : Base1<T>
>Base2 : Base2<T>

        x: {
>x : { a: T; b: T; }

            a: T; b: T;
>a : T
>T : T
>b : T
>T : T
        }
    }

    interface Derived5<T> extends Base1<T>, Base2<T> { // error
>Derived5 : Derived5<T>
>T : T
>Base1 : Base1<T>
>T : T
>Base2 : Base2<T>
>T : T

        x: T;
>x : T
>T : T
    }
}
