=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/unionTypeIdentity.ts ===
// Two types are considered identical when
// they are union types with identical sets of constituent types, or
var strOrNum: string | boolean;
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

var strOrNum: boolean | string;
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

var strOrNum: boolean | string | boolean;
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

var strOrNum: string; // error
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

var strOrNum: boolean; // error
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

var strOrNum: number; // error
>strOrNum : Symbol(strOrNum, Decl(unionTypeIdentity.ts, 2, 3), Decl(unionTypeIdentity.ts, 3, 3), Decl(unionTypeIdentity.ts, 4, 3), Decl(unionTypeIdentity.ts, 5, 3), Decl(unionTypeIdentity.ts, 6, 3) ... and 1 more)

