=== tests/cases/conformance/types/keyof/circularIndexedAccessErrors.ts ===
type T1 = {
>T1 : T1

    x: T1["x"];  // Error
>x : any
>T1 : T1

};

type T2<K extends "x" | "y"> = {
>T2 : T2<K>
>K : K

    x: T2<K>[K];  // Error
>x : T2<K>[K]
>T2 : T2<K>
>K : K
>K : K

    y: number;
>y : number
}

declare let x2: T2<"x">;
>x2 : T2<"x">
>T2 : T2<K>

let x2x = x2.x;
>x2x : any
>x2.x : any
>x2 : T2<"x">
>x : any

interface T3<T extends T3<T>> {
>T3 : T3<T>
>T : T
>T3 : T3<T>
>T : T

    x: T["x"];
>x : T["x"]
>T : T
}

interface T4<T extends T4<T>> {
>T4 : T4<T>
>T : T
>T4 : T4<T>
>T : T

    x: T4<T>["x"];  // Error
>x : any
>T4 : T4<T>
>T : T
}

class C1 {
>C1 : C1

    x: C1["x"];  // Error
>x : any
>C1 : C1
}

class C2 {
>C2 : C2

    x: this["y"];
>x : this["y"]

    y: this["z"];
>y : this["z"]

    z: this["x"];
>z : this["x"]
}

// Repro from #12627

interface Foo {
>Foo : Foo

    hello: boolean;
>hello : boolean
}

function foo<T extends Foo | T["hello"]>() {
>foo : <T extends Foo | T["hello"]>() => void
>T : T
>Foo : Foo
>T : T
}

