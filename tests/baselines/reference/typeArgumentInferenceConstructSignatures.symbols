=== tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceConstructSignatures.ts ===
// Generic call with no parameters
interface NoParams {
>NoParams : Symbol(NoParams, Decl(typeArgumentInferenceConstructSignatures.ts, 0, 0))

    new <T>();
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 2, 9))
}
var noParams: NoParams;
>noParams : Symbol(noParams, Decl(typeArgumentInferenceConstructSignatures.ts, 4, 3))
>NoParams : Symbol(NoParams, Decl(typeArgumentInferenceConstructSignatures.ts, 0, 0))

new noParams();
>noParams : Symbol(noParams, Decl(typeArgumentInferenceConstructSignatures.ts, 4, 3))

new noParams<string>();
>noParams : Symbol(noParams, Decl(typeArgumentInferenceConstructSignatures.ts, 4, 3))

new noParams<{}>();
>noParams : Symbol(noParams, Decl(typeArgumentInferenceConstructSignatures.ts, 4, 3))

// Generic call with parameters but none use type parameter type
interface noGenericParams {
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))

    new <T>(n: string);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 11, 9))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 11, 12))
}
var noGenericParams: noGenericParams;
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))

new noGenericParams('');
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))

new noGenericParams<number>('');
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))

new noGenericParams<{}>('');
>noGenericParams : Symbol(noGenericParams, Decl(typeArgumentInferenceConstructSignatures.ts, 7, 19), Decl(typeArgumentInferenceConstructSignatures.ts, 13, 3))

// Generic call with multiple type parameters and only one used in parameter type annotation
interface someGenerics1 {
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))

    new <T, U>(n: T, m: number);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 20, 9))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 20, 11))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 20, 15))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 20, 9))
>m : Symbol(m, Decl(typeArgumentInferenceConstructSignatures.ts, 20, 20))
}
var someGenerics1: someGenerics1;
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))

new someGenerics1(3, 4);
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))

new someGenerics1<string, number>(3, 4); // Error
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))

new someGenerics1<number, {}>(3, 4);
>someGenerics1 : Symbol(someGenerics1, Decl(typeArgumentInferenceConstructSignatures.ts, 16, 28), Decl(typeArgumentInferenceConstructSignatures.ts, 22, 3))

// Generic call with argument of function type whose parameter is of type parameter type
interface someGenerics2a {
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))

    new <T>(n: (x: T) => void);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 29, 9))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 29, 12))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 29, 16))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 29, 9))
}
var someGenerics2a: someGenerics2a;
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))

new someGenerics2a((n: string) => n);
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 32, 20))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 32, 20))

new someGenerics2a<string>((n: string) => n);
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 33, 28))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 33, 28))

new someGenerics2a<string>((n) => n.substr(0));
>someGenerics2a : Symbol(someGenerics2a, Decl(typeArgumentInferenceConstructSignatures.ts, 25, 36), Decl(typeArgumentInferenceConstructSignatures.ts, 31, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 28))
>n.substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 28))
>substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))

interface someGenerics2b {
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))

    new <T, U>(n: (x: T, y: U) => void);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 9))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 11))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 15))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 19))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 9))
>y : Symbol(y, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 24))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 37, 11))
}
var someGenerics2b: someGenerics2b;
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))

new someGenerics2b((n: string, x: number) => n);
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 40, 20))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 40, 30))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 40, 20))

new someGenerics2b<string, number>((n: string, t: number) => n);
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 41, 36))
>t : Symbol(t, Decl(typeArgumentInferenceConstructSignatures.ts, 41, 46))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 41, 36))

new someGenerics2b<string, number>((n, t) => n.substr(t * t));
>someGenerics2b : Symbol(someGenerics2b, Decl(typeArgumentInferenceConstructSignatures.ts, 34, 47), Decl(typeArgumentInferenceConstructSignatures.ts, 39, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 36))
>t : Symbol(t, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 38))
>n.substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 36))
>substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 38))
>t : Symbol(t, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 38))

// Generic call with argument of function type whose parameter is not of type parameter type but body/return type uses type parameter
interface someGenerics3 {
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))

    new <T>(producer: () => T);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 46, 9))
>producer : Symbol(producer, Decl(typeArgumentInferenceConstructSignatures.ts, 46, 12))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 46, 9))
}
var someGenerics3: someGenerics3;
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))

new someGenerics3(() => '');
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))

new someGenerics3<Window>(() => undefined);
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))
>Window : Symbol(Window, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>undefined : Symbol(undefined)

new someGenerics3<number>(() => 3);
>someGenerics3 : Symbol(someGenerics3, Decl(typeArgumentInferenceConstructSignatures.ts, 42, 62), Decl(typeArgumentInferenceConstructSignatures.ts, 48, 3))

// 2 parameter generic call with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
interface someGenerics4 {
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))

    new <T, U>(n: T, f: (x: U) => void);
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 9))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 11))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 15))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 9))
>f : Symbol(f, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 20))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 25))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 55, 11))
}
var someGenerics4: someGenerics4;
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))

new someGenerics4(4, () => null);
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))

new someGenerics4<string, number>('', () => 3);
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))

new someGenerics4<string, number>('', (x: string) => ''); // Error
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 60, 39))

new someGenerics4<string, number>(null, null);
>someGenerics4 : Symbol(someGenerics4, Decl(typeArgumentInferenceConstructSignatures.ts, 51, 35), Decl(typeArgumentInferenceConstructSignatures.ts, 57, 3))

// 2 parameter generic call with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
interface someGenerics5 {
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))

    new <U, T>(n: T, f: (x: U) => void);
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 9))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 11))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 15))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 11))
>f : Symbol(f, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 20))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 25))
>U : Symbol(U, Decl(typeArgumentInferenceConstructSignatures.ts, 65, 9))
}
var someGenerics5: someGenerics5;
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))

new someGenerics5(4, () => null);
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))

new someGenerics5<number, string>('', () => 3);
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))

new someGenerics5<number, string>('', (x: string) => ''); // Error
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 70, 39))

new someGenerics5<string, number>(null, null);
>someGenerics5 : Symbol(someGenerics5, Decl(typeArgumentInferenceConstructSignatures.ts, 61, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 67, 3))

// Generic call with multiple arguments of function types that each have parameters of the same generic type
interface someGenerics6 {
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))

    new <A>(a: (a: A) => A, b: (b: A) => A, c: (c: A) => A);
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 12))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 16))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 27))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 32))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>c : Symbol(c, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 43))
>c : Symbol(c, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 48))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 75, 9))
}
var someGenerics6: someGenerics6;
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))

new someGenerics6(n => n, n => n, n => n);
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 18))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 18))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 25))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 25))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 33))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 78, 33))

new someGenerics6<number>(n => n, n => n, n => n);
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 26))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 26))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 33))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 33))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 41))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 79, 41))

new someGenerics6<number>((n: number) => n, (n: string) => n, (n: number) => n); // Error
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 27))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 27))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 45))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 45))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 63))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 80, 63))

new someGenerics6<number>((n: number) => n, (n: number) => n, (n: number) => n);
>someGenerics6 : Symbol(someGenerics6, Decl(typeArgumentInferenceConstructSignatures.ts, 71, 46), Decl(typeArgumentInferenceConstructSignatures.ts, 77, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 27))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 27))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 45))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 45))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 63))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 63))

// Generic call with multiple arguments of function types that each have parameters of different generic type
interface someGenerics7 {
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))

    new <A, B, C>(a: (a: A) => A, b: (b: B) => B, c: (c: C) => C);
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 9))
>B : Symbol(B, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 11))
>C : Symbol(C, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 14))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 18))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 22))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 9))
>A : Symbol(A, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 9))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 33))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 38))
>B : Symbol(B, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 11))
>B : Symbol(B, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 11))
>c : Symbol(c, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 49))
>c : Symbol(c, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 54))
>C : Symbol(C, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 14))
>C : Symbol(C, Decl(typeArgumentInferenceConstructSignatures.ts, 85, 14))
}
var someGenerics7: someGenerics7;
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))

new someGenerics7(n => n, n => n, n => n);
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 18))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 18))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 25))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 25))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 33))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 88, 33))

new someGenerics7<number, string, number>(n => n, n => n, n => n);
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 42))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 42))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 49))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 49))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 57))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 89, 57))

new someGenerics7<number, string, number>((n: number) => n, (n: string) => n, (n: number) => n);
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 43))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 43))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 61))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 61))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 79))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 79))

// Generic call with argument of generic function type
interface someGenerics8 {
>someGenerics8 : Symbol(someGenerics8, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 96), Decl(typeArgumentInferenceConstructSignatures.ts, 96, 3))

    new <T>(n: T): T;
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 94, 9))
>n : Symbol(n, Decl(typeArgumentInferenceConstructSignatures.ts, 94, 12))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 94, 9))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 94, 9))
}
var someGenerics8: someGenerics8;
>someGenerics8 : Symbol(someGenerics8, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 96), Decl(typeArgumentInferenceConstructSignatures.ts, 96, 3))
>someGenerics8 : Symbol(someGenerics8, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 96), Decl(typeArgumentInferenceConstructSignatures.ts, 96, 3))

var x = new someGenerics8(someGenerics7);
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 97, 3))
>someGenerics8 : Symbol(someGenerics8, Decl(typeArgumentInferenceConstructSignatures.ts, 90, 96), Decl(typeArgumentInferenceConstructSignatures.ts, 96, 3))
>someGenerics7 : Symbol(someGenerics7, Decl(typeArgumentInferenceConstructSignatures.ts, 81, 80), Decl(typeArgumentInferenceConstructSignatures.ts, 87, 3))

new x<string, string, string>(null, null, null);
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 97, 3))

// Generic call with multiple parameters of generic type passed arguments with no best common type
interface someGenerics9 {
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))

    new <T>(a: T, b: T, c: T): T;
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 9))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 12))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 9))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 17))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 9))
>c : Symbol(c, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 23))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 9))
>T : Symbol(T, Decl(typeArgumentInferenceConstructSignatures.ts, 102, 9))
}
var someGenerics9: someGenerics9;
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))

var a9a = new someGenerics9('', 0, []);
>a9a : Symbol(a9a, Decl(typeArgumentInferenceConstructSignatures.ts, 105, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 106, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))

var a9a: {};
>a9a : Symbol(a9a, Decl(typeArgumentInferenceConstructSignatures.ts, 105, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 106, 3))

var a9b = new someGenerics9<{ a?: number; b?: string; }>({ a: 0 }, { b: '' }, null);
>a9b : Symbol(a9b, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 108, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 29))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 41))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 58))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 68))

var a9b: { a?: number; b?: string; };
>a9b : Symbol(a9b, Decl(typeArgumentInferenceConstructSignatures.ts, 107, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 108, 3))
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 108, 10))
>b : Symbol(b, Decl(typeArgumentInferenceConstructSignatures.ts, 108, 22))

// Generic call with multiple parameters of generic type passed arguments with multiple best common types
interface A91 {
>A91 : Symbol(A91, Decl(typeArgumentInferenceConstructSignatures.ts, 108, 37))

    x: number;
>x : Symbol(A91.x, Decl(typeArgumentInferenceConstructSignatures.ts, 111, 15))

    y?: string;
>y : Symbol(A91.y, Decl(typeArgumentInferenceConstructSignatures.ts, 112, 14))
}
interface A92 {
>A92 : Symbol(A92, Decl(typeArgumentInferenceConstructSignatures.ts, 114, 1))

    x: number;
>x : Symbol(A92.x, Decl(typeArgumentInferenceConstructSignatures.ts, 115, 15))

    z?: Window;
>z : Symbol(A92.z, Decl(typeArgumentInferenceConstructSignatures.ts, 116, 14))
>Window : Symbol(Window, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
}
var a9e = new someGenerics9(undefined, { x: 6, z: window }, { x: 6, y: '' });
>a9e : Symbol(a9e, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 120, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 40))
>z : Symbol(z, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 46))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 61))
>y : Symbol(y, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 67))

var a9e: {};
>a9e : Symbol(a9e, Decl(typeArgumentInferenceConstructSignatures.ts, 119, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 120, 3))

var a9f = new someGenerics9<A92>(undefined, { x: 6, z: window }, { x: 6, y: '' });
>a9f : Symbol(a9f, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 122, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>A92 : Symbol(A92, Decl(typeArgumentInferenceConstructSignatures.ts, 114, 1))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 45))
>z : Symbol(z, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 51))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 66))
>y : Symbol(y, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 72))

var a9f: A92;
>a9f : Symbol(a9f, Decl(typeArgumentInferenceConstructSignatures.ts, 121, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 122, 3))
>A92 : Symbol(A92, Decl(typeArgumentInferenceConstructSignatures.ts, 114, 1))

// Generic call with multiple parameters of generic type passed arguments with a single best common type
var a9d = new someGenerics9({ x: 3 }, { x: 6 }, { x: 6 });
>a9d : Symbol(a9d, Decl(typeArgumentInferenceConstructSignatures.ts, 125, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 126, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 125, 29))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 125, 39))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 125, 49))

var a9d: { x: number; };
>a9d : Symbol(a9d, Decl(typeArgumentInferenceConstructSignatures.ts, 125, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 126, 3))
>x : Symbol(x, Decl(typeArgumentInferenceConstructSignatures.ts, 126, 10))

// Generic call with multiple parameters of generic type where one argument is of type 'any'
var anyVar: any;
>anyVar : Symbol(anyVar, Decl(typeArgumentInferenceConstructSignatures.ts, 129, 3))

var a = new someGenerics9(7, anyVar, 4);
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 130, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 131, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>anyVar : Symbol(anyVar, Decl(typeArgumentInferenceConstructSignatures.ts, 129, 3))

var a: any;
>a : Symbol(a, Decl(typeArgumentInferenceConstructSignatures.ts, 130, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 131, 3))

// Generic call with multiple parameters of generic type where one argument is [] and the other is not 'any'
var arr = new someGenerics9([], null, undefined);
>arr : Symbol(arr, Decl(typeArgumentInferenceConstructSignatures.ts, 134, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 135, 3))
>someGenerics9 : Symbol(someGenerics9, Decl(typeArgumentInferenceConstructSignatures.ts, 98, 48), Decl(typeArgumentInferenceConstructSignatures.ts, 104, 3))
>undefined : Symbol(undefined)

var arr: any[];
>arr : Symbol(arr, Decl(typeArgumentInferenceConstructSignatures.ts, 134, 3), Decl(typeArgumentInferenceConstructSignatures.ts, 135, 3))


