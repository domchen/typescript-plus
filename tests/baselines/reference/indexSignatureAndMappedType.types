=== tests/cases/compiler/indexSignatureAndMappedType.ts ===
// A mapped type { [P in K]: X }, where K is a generic type, is related to
// { [key: string]: Y } if X is related to Y.

function f1<T, K extends string>(x: { [key: string]: T }, y: Record<K, T>) {
>f1 : <T, K extends string>(x: { [key: string]: T; }, y: Record<K, T>) => void
>T : T
>K : K
>x : { [key: string]: T; }
>key : string
>T : T
>y : Record<K, T>
>Record : Record<K, T>
>K : K
>T : T

    x = y;
>x = y : Record<K, T>
>x : { [key: string]: T; }
>y : Record<K, T>

    y = x;  // Error
>y = x : { [key: string]: T; }
>y : Record<K, T>
>x : { [key: string]: T; }
}

function f2<T>(x: { [key: string]: T }, y: Record<string, T>) {
>f2 : <T>(x: { [key: string]: T; }, y: Record<string, T>) => void
>T : T
>x : { [key: string]: T; }
>key : string
>T : T
>y : Record<string, T>
>Record : Record<K, T>
>T : T

    x = y;
>x = y : Record<string, T>
>x : { [key: string]: T; }
>y : Record<string, T>

    y = x;
>y = x : { [key: string]: T; }
>y : Record<string, T>
>x : { [key: string]: T; }
}

function f3<T, U, K extends string>(x: { [key: string]: T }, y: Record<K, U>) {
>f3 : <T, U, K extends string>(x: { [key: string]: T; }, y: Record<K, U>) => void
>T : T
>U : U
>K : K
>x : { [key: string]: T; }
>key : string
>T : T
>y : Record<K, U>
>Record : Record<K, T>
>K : K
>U : U

    x = y;  // Error
>x = y : Record<K, U>
>x : { [key: string]: T; }
>y : Record<K, U>

    y = x;  // Error
>y = x : { [key: string]: T; }
>y : Record<K, U>
>x : { [key: string]: T; }
}

// Repro from #14548

type Dictionary = {
>Dictionary : Dictionary

    [key: string]: string;
>key : string

};

interface IBaseEntity {
>IBaseEntity : IBaseEntity

    name: string;
>name : string

    properties: Dictionary;
>properties : Dictionary
>Dictionary : Dictionary
}

interface IEntity<T extends string> extends IBaseEntity {
>IEntity : IEntity<T>
>T : T
>IBaseEntity : IBaseEntity

    properties: Record<T, string>;
>properties : Record<T, string>
>Record : Record<K, T>
>T : T
}

