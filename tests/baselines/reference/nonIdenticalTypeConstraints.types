=== tests/cases/compiler/nonIdenticalTypeConstraints.ts ===
class Different {
>Different : Different

    a: number;
>a : number

    b: string;
>b : string

    c: boolean;
>c : boolean
}

class Foo<T extends Function> {
>Foo : Foo<T>
>T : T
>Function : Function

    n: T;
>n : T
>T : T
}
interface Foo<T extends Different> {
>Foo : Foo<T>
>T : T
>Different : Different

    y: T;
>y : T
>T : T
}
interface Qux<T extends Different> {
>Qux : Qux<T>
>T : T
>Different : Different

    y: T;
>y : T
>T : T
}
class Qux<T extends Function> {
>Qux : Qux<T>
>T : T
>Function : Function

    n: T;
>n : T
>T : T
}

class Bar<T extends Function> {
>Bar : Bar<T>
>T : T
>Function : Function

    n: T;
>n : T
>T : T
}
interface Bar<T extends Function> {
>Bar : Bar<T>
>T : T
>Function : Function

    y: T;
>y : T
>T : T
}
interface Baz<T extends Function> {
>Baz : Baz<T>
>T : T
>Function : Function

    y: T;
>y : T
>T : T
}
class Baz<T extends Function> {
>Baz : Baz<T>
>T : T
>Function : Function

    n: T;
>n : T
>T : T
}

class Quux<T> {
>Quux : Quux<T, U>
>T : T

    n: T;
>n : T
>T : T
}
interface Quux<U> {
>Quux : Quux<T, U>
>U : U

    m: U;
>m : U
>U : U
}
